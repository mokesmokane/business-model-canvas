import React from 'react'
import { ScrollArea } from '@/components/ui/scroll-area'
import { LayoutDashboard } from 'lucide-react'
import { SidebarSection } from './SidebarSection'

interface SidebarContentProps {
  isExpanded: boolean
}

export function SidebarContent({ isExpanded }: SidebarContentProps) {

  return (
    <div className={`flex flex-col h-full ${isExpanded ? '' : 'items-center'}`}>
      <ScrollArea className={`flex-grow ${isExpanded ? 'w-full' : 'w-16'}`}>
        <div className={`flex flex-col gap-4 ${isExpanded ? 'px-4 py-2' : 'items-center py-2'}`}>
          <SidebarSection
            icon={LayoutDashboard}
            title="Business Models"
            isExpanded={isExpanded}
            
          />
        </div>
      </ScrollArea>
    </div>
  )
}import { ChevronLeft, LucideIcon, Plus, Trash2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import React from 'react';
import { useCanvas } from '@/contexts/CanvasContext';
import { DeleteCanvasDialog } from '../DeleteCanvasDialog';
import { useNewCanvas } from '@/contexts/NewCanvasContext';
import { SidebarGroup, useSidebar } from '../ui/sidebar';

interface SidebarSectionProps {
  icon: LucideIcon;
  title: string;
  isExpanded: boolean;
  onItemClick?: (id: string) => void;
  onNewItem?: () => void;
}

export function SidebarSection({ 
  icon: Icon, 
  title, 
  isExpanded
}: SidebarSectionProps) {
  const { loadCanvas, createNewCanvas, deleteCanvas, resetForm, currentCanvas, userCanvases, clearState } = useCanvas();
  const [dialogOpen, setDialogOpen] = React.useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);
  const [canvasToDelete, setCanvasToDelete] = React.useState<{ id: string, name: string } | null>(null);
  const { setNewCanvas } = useNewCanvas();
  const { setOpen } = useSidebar()
  const handleCanvasSelect = React.useCallback(async (canvasId: string) => {
    await loadCanvas(canvasId);
    localStorage.setItem('lastCanvasId', canvasId);
  }, [loadCanvas]);
  
  const handleNewCanvas = React.useCallback(() => {
    setDialogOpen(true);
  }, []);

  const handleDeleteCanvas = React.useCallback(async (canvasId: string) => {
    await deleteCanvas(canvasId);
    if (localStorage.getItem('lastCanvasId') === canvasId) {
      localStorage.removeItem('lastCanvasId');
      if (userCanvases.length > 0) {
        handleCanvasSelect(userCanvases[0].id);
      } else {
        resetForm();
        handleNewCanvas();
      }
    }
  }, [deleteCanvas, createNewCanvas, handleCanvasSelect, userCanvases]);

  React.useEffect(() => {
    const lastCanvasId = localStorage.getItem('lastCanvasId');
    if (lastCanvasId && userCanvases.length > 0) {
      const canvasExists = userCanvases.some(canvas => canvas.id === lastCanvasId);
      if (canvasExists) {
        handleCanvasSelect(lastCanvasId);
      } else {
        handleCanvasSelect(userCanvases[0].id);
        localStorage.setItem('lastCanvasId', userCanvases[0].id);
      }
    }
  }, [userCanvases, handleCanvasSelect]);

  const component = (
    <div className={isExpanded ? "space-y-2 w-full" : "flex flex-col items-center"}>
      {isExpanded ? (
        <>
          <h3 className="text-sm font-semibold text-muted-foreground flex items-center px-4 py-2">
            <Button 
              variant="ghost" 
              className="h-8 w-full justify-start text-muted-foreground hover:text-foreground" 
              onClick={()=>{clearState(); setNewCanvas([false, null])}}
            >
              <Icon className="h-4 w-4 mr-2" />
              {title}
            </Button>
            <div className="flex-grow"></div>
            <Button variant="ghost" size="icon" className="h-8 w-8 text-muted-foreground hover:text-foreground" onClick={()=>setOpen(false)}>
              <ChevronLeft className="h-4 w-4" />
            </Button>
          </h3>
          <div className="flex items-center gap-1 px-4">
          <Button 
            variant="ghost" 
            className="w-full justify-start text-muted-foreground hover:text-foreground hover:bg-zinc-100 dark:hover:bg-zinc-800"
            onClick={() => {
              clearState();
              setNewCanvas([true, null]);
            }}
          >
            <Plus className="h-4 w-4" />
            New Canvas
          </Button>
        </div>
          {userCanvases.map((item) => (
            <div key={item.id} className="flex items-center gap-1 px-8">
              <Button
                variant="ghost"
                className={`flex-1 justify-start text-muted-foreground hover:text-foreground hover:bg-zinc-100 dark:hover:bg-zinc-800 ${
                  currentCanvas?.id === item.id 
                    ? 'bg-muted font-medium border-l-2 border-primary pl-3' 
                    : 'pl-4'
                }`}
                onClick={() => handleCanvasSelect(item.id)}
              >
                {item.name}
              </Button>
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-8 w-8 text-muted-foreground hover:text-foreground"
                onClick={() => {
                  setCanvasToDelete({ id: item.id, name: item.name });
                  setDeleteDialogOpen(true);
                }}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          ))}
          {canvasToDelete && (
            <DeleteCanvasDialog
              open={deleteDialogOpen}
              onOpenChange={setDeleteDialogOpen}
              onConfirm={() => handleDeleteCanvas(canvasToDelete.id)}
              canvasName={canvasToDelete.name}
            />
          )}
        </>
      ) : (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button 
              variant="ghost" 
              size="icon" 
              className="w-10 h-10 p-0 text-muted-foreground hover:text-foreground hover:bg-zinc-100 dark:hover:bg-zinc-800"
              onClick={()=>{setOpen(true);}}
            >
              <Icon className="h-5 w-5" />
            </Button>
          </TooltipTrigger>
          <TooltipContent side="right">
            {title}
          </TooltipContent>
        </Tooltip>
      )}
    </div>)
    return (<SidebarGroup>
      {component} 
    </SidebarGroup>)
  
}'use client'

import React from 'react'
import { TooltipProvider } from '@/components/ui/tooltip'
import { LayoutDashboard } from 'lucide-react'
import { AppSidebarFooter } from './SidebarFooter'
import { SidebarAIChatArea } from '../chat/SidebarAIChatArea'
import { SidebarSection } from './SidebarSection'
import { useAuth } from '@/contexts/AuthContext'
import { SubscriptionProvider } from '@/contexts/SubscriptionContext'
import { ChatProvider } from '@/contexts/ChatContext'
import { 
  Sidebar, 
  SidebarHeader, 
  SidebarContent, 
  SidebarFooter,
  SidebarProvider,
  useSidebar,
  SidebarTrigger
} from '../ui/sidebar'
import CanvasNavigation from './CanvasNavigation'
import { SearchForm } from './SearchForm'

interface AppSidebarProps {
  setShowAuthDialog: (show: boolean) => void
}

function Providers({ children }: { children: React.ReactNode }) {
  return (
    <TooltipProvider>
      <SubscriptionProvider>
          <ChatProvider>
              {children}
          </ChatProvider>
      </SubscriptionProvider>
    </TooltipProvider>
  )
} 

export function AppSidebar({setShowAuthDialog}: AppSidebarProps) {
  const { user } = useAuth()
  const { state } = useSidebar()
  
  if (!user) return null;

  return (
    <Providers>
      <Sidebar collapsible="icon">
        <SidebarHeader className="pt-20">
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <SidebarTrigger />
            {state === 'expanded' && <SearchForm />}
          </div>
        </SidebarHeader>
        <SidebarContent>
          <CanvasNavigation
          />
          <SidebarSection
            icon={LayoutDashboard}
            title="Business Models"
            isExpanded={state === 'expanded'}
          />
          <SidebarAIChatArea />
        </SidebarContent>
        <SidebarFooter>
          <AppSidebarFooter 
            isExpanded={state === 'expanded'} 
            setShowAuthDialog={setShowAuthDialog} 
          />
        </SidebarFooter>
      </Sidebar>
    </Providers>
  )
}
"use client"

import { Search } from 'lucide-react'

import { Label } from '@/components/ui/label'
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarInput,
} from '@/components/ui/sidebar'

export function SearchForm({ ...props }: React.ComponentProps<'form'>) {
  return (
    <form {...props}>
      <SidebarGroup className="py-0">
        <SidebarGroupContent className="relative">
          <Label htmlFor="search" className="sr-only">
            Search
          </Label>
          <SidebarInput
            id="search"
            placeholder="Search canvases..."
            className="pl-8"
          />
          <Search className="pointer-events-none absolute left-2 top-1/2 size-4 -translate-y-1/2 select-none opacity-50" />
        </SidebarGroupContent>
      </SidebarGroup>
    </form>
  )
}

'use client'

import React from 'react';
import { ChevronRight, Folder, Plus, File } from 'lucide-react';
import { CanvasItem, NestedCanvasFolder } from '@/types/canvas';
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
} from "@/components/ui/context-menu";
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarMenuSub,
  SidebarMenuSubItem,
  SidebarMenuSubButton,
} from "@/components/ui/sidebar";
import { CanvasFolder } from '@/types/canvas';
import { useCanvasFolders } from '@/contexts/CanvasFoldersContext';
import { useCanvas } from '@/contexts/CanvasContext';
import { useNewCanvas } from '@/contexts/NewCanvasContext';





export function CanvasNavigation() {
  const { folders, onCreateFolder, setCurrentFolder } = useCanvasFolders()
  const { loadCanvas } = useCanvas()
  const { clearState } = useCanvas()
  const { setNewCanvas } = useNewCanvas()
  
  function handleNewCanvas(folderId: string | null) {
    clearState()
    setNewCanvas([true, folderId])
  }
  const renderItems = (folders: NestedCanvasFolder[], depth = 0) => {
    return folders.map((item) => (
      <React.Fragment key={item.id}>
        {item.children.map((child) => (
          <SidebarMenuItem key={child.id}>
            <SidebarMenuButton className={cn(depth > 0 && "pl-4")}>
              <Folder className="mr-2 h-4 w-4" />
              <span>{item.name}</span>
              <ChevronRight className="ml-auto h-4 w-4" />

            </SidebarMenuButton>
            <SidebarMenuSub>
              {renderItems(item.children || [], depth + 1)}
              <SidebarMenuSubItem>
                <SidebarMenuSubButton onClick={() => onCreateFolder(item.id, "New Folder")}>
                  <Plus className="mr-2 h-4 w-4" />
                  New Folder
                </SidebarMenuSubButton>
              </SidebarMenuSubItem>
              <SidebarMenuSubItem>
                <SidebarMenuSubButton onClick={() => handleNewCanvas(item.id)}>
                  <Plus className="mr-2 h-4 w-4" />
                  New Canvas
                </SidebarMenuSubButton>
              </SidebarMenuSubItem>
            </SidebarMenuSub>
          </SidebarMenuItem>
        ))}

        {Array.from(item.canvases.values()).map((canvas) => (
          <SidebarMenuItem key={canvas.id}>
            <SidebarMenuButton 
              onClick={() => loadCanvas(canvas.id)}
              className={cn(depth > 0 && "pl-4")}
            >
              <File className="mr-2 h-4 w-4" />
              <span>{canvas.name}</span>
            </SidebarMenuButton>
          </SidebarMenuItem>
        ))}
      </React.Fragment>
    ))
  }

  return (
    <SidebarGroup>
      <SidebarGroupLabel className="flex items-center justify-between">
        Canvases
        <Button
          variant="ghost"
          size="icon"
          onClick={() => handleNewCanvas(null)}
          className="h-4 w-4"
        >
          <Plus className="h-4 w-4" />
        </Button>
      </SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {renderItems(folders)}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  )
}

export default CanvasNavigation;

import React from 'react'
import { Settings, HelpCircle, Users, LogOut, Moon, Sun, Shield } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import { useAuth } from '@/contexts/AuthContext'
import { useCanvas } from '@/contexts/CanvasContext'
import { useChat } from '@/contexts/ChatContext'
import { useTheme } from 'next-themes'
import { useRouter } from 'next/navigation'
import { SidebarGroup, SidebarGroupContent, SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '../ui/sidebar'

interface AppSidebarFooterProps {
  isExpanded: boolean
  setShowAuthDialog: (show: boolean) => void
}

export function AppSidebarFooter({ isExpanded, setShowAuthDialog }: AppSidebarFooterProps) {
  const {  logout, isAdminUser } = useAuth();
  const { clearState } = useCanvas();
  const { clearMessages } = useChat();
  const { theme, setTheme } = useTheme()
  const router = useRouter()

  const handleSignOut = async () => {
    try {
      await logout();
      clearState();
      clearMessages();
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };
  
  const footerItems = [
    { icon: Users, label: 'Profile', action: () => router.push('/profile') },
    { icon: Settings, label: 'Settings', action: () => router.push('/settings') },
    { icon: theme === "light" ? Moon : Sun, label: 'Theme', action: () => { setTheme(theme === "light" ? "dark" : "light") } },
    { icon: HelpCircle, label: 'Help', action: () => router.push('/help') },
    ...(isAdminUser ? [{ icon: Shield, label: 'Admin', action: () => router.push('/admin') }] : []),
    { icon: LogOut, label: 'Sign Out', action: handleSignOut },
  ];

  const component = (
    <div className={`mt-auto border-t border-zinc-300/50 dark:border-zinc-800/50 ${isExpanded ? 'py-2' : 'py-4'}`}>
      <SidebarMenu>
        {footerItems.map(({ icon: Icon, label, action }) => (
          <SidebarMenuItem
            key={label}
            onClick={action}
          ><SidebarMenuButton>
            <Icon />
            <span>{label}</span>
          </SidebarMenuButton >
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    </div>
  )
  return (<SidebarGroup>
    <SidebarGroupContent>
      {component}
    </SidebarGroupContent>
  </SidebarGroup>)
}'use client'

import React, { useRef } from 'react'
import { cn } from '@/lib/utils'

interface ResizeHandleProps {
  onResize: (width: number) => void
  sidebarRef: React.RefObject<HTMLDivElement>
  onResizeStart: () => void
  onResizeEnd: () => void
}

export function ResizeHandle({ onResize, sidebarRef, onResizeStart, onResizeEnd }: ResizeHandleProps) {
  const isDragging = useRef(false)

  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault()
    isDragging.current = true
    onResizeStart()
    document.body.style.cursor = 'ew-resize'
    document.body.classList.add('select-none')
    
    const startX = e.pageX
    const startWidth = sidebarRef.current?.offsetWidth || 384

    const handleMouseMove = (moveEvent: MouseEvent) => {
      if (!isDragging.current) return
      
      const deltaX = moveEvent.pageX - startX
      const newWidth = Math.max(250, Math.min(800, startWidth + deltaX))
      
      if (sidebarRef.current) {
        sidebarRef.current.style.width = `${newWidth}px`
      }
    }
    
    const handleMouseUp = () => {
      isDragging.current = false
      onResizeEnd()
      document.body.style.cursor = ''
      document.body.classList.remove('select-none')
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
      
      if (sidebarRef.current) {
        onResize(sidebarRef.current.offsetWidth)
      }
    }
    
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  return (
    <div
      className={cn(
        "absolute right-0 top-0 bottom-0 w-1 cursor-ew-resize z-50",
        "hover:bg-gray-600 transition-colors",
        "after:absolute after:right-0 after:top-0 after:bottom-0 after:w-4 after:translate-x-1/2"
      )}
      onMouseDown={handleMouseDown}
    />
  )
} "use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = ({
  children,
  ...props
}: AlertDialogPrimitive.AlertDialogPortalProps) => (
  <AlertDialogPrimitive.Portal {...props}>
    {children}
  </AlertDialogPrimitive.Portal>
)
AlertDialogPortal.displayName = AlertDialogPrimitive.Portal.displayName

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, children, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-opacity animate-in fade-in",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed z-50 grid w-full max-w-lg scale-100 gap-4 border bg-background p-6 opacity-100 shadow-lg animate-in fade-in-90 slide-in-from-bottom-10 sm:rounded-lg sm:zoom-in-90 sm:slide-in-from-bottom-0",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants("outline"),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500 dark:bg-gray-800 dark:text-gray-400",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-gray-950 data-[state=active]:shadow-sm dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300 dark:data-[state=active]:bg-gray-950 dark:data-[state=active]:text-gray-50",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & { canvasTheme?: string }
>(({ className, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  
  if (canvasTheme) {
    const classString = canvasTheme === 'dark' 
      ? "rounded-lg border border-gray-800 bg-gray-950 text-gray-50 shadow-sm"
      : "rounded-lg border border-gray-100 bg-white text-gray-950 shadow-sm";
    const classes = classString.split(' ');
    
    classStuff = classes
      .filter(cls => {
        if (cls.startsWith('dark:')) {
          return canvasTheme === 'dark';
        } else {
          return true;
        }
      })
      .map(cls => {
        if (cls.startsWith('dark:')) {
          return cls.substring(5);
        } else {
          return cls;
        }
      })
      .join(' ');
  } else {
    classStuff = "rounded-lg border border-gray-200 bg-white text-gray-950 shadow-sm dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50";
  }

  return (
    <div
      ref={ref}
      className={cn(classStuff, className)}
      {...props}
    />
  );
})
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & { canvasTheme?: string }
>(({ className, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  
  if (canvasTheme) {
    const classString = "text-sm text-gray-500 dark:text-gray-400";
    const classes = classString.split(' ');
    
    classStuff = classes
      .filter(cls => {
        if (cls.startsWith('dark:')) {
          return canvasTheme === 'dark';
        } else {
          return true;
        }
      })
      .map(cls => {
        if (cls.startsWith('dark:')) {
          return cls.substring(5);
        } else {
          return cls;
        }
      })
      .join(' ');
  } else {
    classStuff = "text-sm text-gray-500 dark:text-gray-400";
  }

  return (
    <div
      ref={ref}
      className={cn(classStuff, className)}
      {...props}
    />
  );
})
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> & { canvasTheme?: string }
>(({ className, canvasTheme, ...props }, ref) => {
  let trackClasses = "";
  let rangeClasses = "";
  let thumbClasses = "";

  if (canvasTheme) {
    // Track classes
    trackClasses = canvasTheme === 'dark' 
      ? "relative h-2 w-full grow overflow-hidden rounded-full bg-gray-800"
      : "relative h-2 w-full grow overflow-hidden rounded-full bg-gray-100";

    // Range classes
    rangeClasses = canvasTheme === 'dark'
      ? "absolute h-full bg-gray-50"
      : "absolute h-full bg-gray-900";

    // Thumb classes
    thumbClasses = canvasTheme === 'dark'
      ? "block h-5 w-5 rounded-full border-2 border-gray-50 bg-gray-950 ring-offset-gray-950 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-300 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
      : "block h-5 w-5 rounded-full border-2 border-gray-900 bg-white ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50";
  } else {
    trackClasses = "relative h-2 w-full grow overflow-hidden rounded-full bg-gray-100 dark:bg-gray-800";
    rangeClasses = "absolute h-full bg-gray-900 dark:bg-gray-50";
    thumbClasses = "block h-5 w-5 rounded-full border-2 border-gray-900 bg-white ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-gray-50 dark:bg-gray-950 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300";
  }

  return (
    <SliderPrimitive.Root
      ref={ref}
      className={cn(
        "relative flex w-full touch-none select-none items-center",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track className={trackClasses}>
        <SliderPrimitive.Range className={rangeClasses} />
      </SliderPrimitive.Track>
      <SliderPrimitive.Thumb className={thumbClasses} />
    </SliderPrimitive.Root>
  )
})
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
import { Bot } from 'lucide-react'

export function AIThinkingIndicator() {
  return (
    <div className="flex items-center gap-2 p-2 bg-zinc-100 rounded-lg animate-in fade-in duration-300">
      <Bot className="h-4 w-4 text-zinc-500" />
      <div className="flex gap-1">
        <span className="w-1.5 h-1.5 bg-zinc-400 rounded-full animate-bounce [animation-delay:-0.3s]" />
        <span className="w-1.5 h-1.5 bg-zinc-400 rounded-full animate-bounce [animation-delay:-0.15s]" />
        <span className="w-1.5 h-1.5 bg-zinc-400 rounded-full animate-bounce" />
      </div>
    </div>
  )
} "use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500 dark:bg-gray-950",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom: "inset-x-0 bottom-0 border-t rounded-t-[10px] data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right: "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      {/* <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-gray-100 dark:ring-offset-gray-950 dark:focus:ring-gray-300 dark:data-[state=open]:bg-gray-800">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close> */}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-gray-950 dark:text-gray-50", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-gray-200 dark:bg-gray-800" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> & { canvasTheme?: string }
>(({ className, sideOffset = 4, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  
  if (canvasTheme) {
    const classString = "z-50 overflow-hidden rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm text-gray-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50";
    
    const classes = classString.split(' ');
    
    classStuff = classes
      .filter(cls => {
        if (cls.startsWith('dark:')) {
          return canvasTheme === 'dark';
        } else {
          return true;
        }
      })
      .map(cls => {
        if (cls.startsWith('dark:')) {
          return cls.substring(5);
        } else {
          return cls;
        }
      })
      .join(' ');
  } else {
    classStuff = "z-50 overflow-hidden rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm text-gray-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50";
  }

  return (
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(classStuff, className)}
      {...props}
    />
  )
})
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border border-gray-200 p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-gray-950 dark:border-gray-800 dark:[&>svg]:text-gray-50",
  {
    variants: {
      variant: {
        default: "bg-white text-gray-950 dark:bg-gray-950 dark:text-gray-50",
        destructive:
          "border-red-500/50 text-red-500 dark:border-red-500 [&>svg]:text-red-500 dark:border-red-900/50 dark:text-red-900 dark:dark:border-red-900 dark:[&>svg]:text-red-900",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-gray-900 data-[state=unchecked]:bg-gray-200 dark:focus-visible:ring-gray-300 dark:focus-visible:ring-offset-gray-950 dark:data-[state=checked]:bg-gray-50 dark:data-[state=unchecked]:bg-gray-800",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0 dark:bg-gray-950"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item> & { canvasTheme?: string }
>(({ className, canvasTheme, ...props }, ref) => {
  let classStuff = "";

  if (canvasTheme) {
    const classString = "aspect-square h-4 w-4 rounded-full border border-gray-200 border-gray-900 text-gray-900 ring-offset-white focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:border-gray-50 dark:text-gray-50 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300";

    classStuff = classString.split(' ')
      .filter(cls => {
        if (cls.startsWith('dark:')) {
          return canvasTheme === 'dark';
        }
        return true;
      })
      .map(cls => {
        if (cls.startsWith('dark:')) {
          return cls.substring(5);
        }
        return cls;
      })
      .join(' ');
  } else {
    classStuff = "aspect-square h-4 w-4 rounded-full border border-gray-200 border-gray-900 text-gray-900 ring-offset-white focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:border-gray-50 dark:text-gray-50 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300";
  }

  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(classStuff, className)}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = ({
  children,
  ...props
}: DialogPrimitive.DialogPortalProps) => (
  <DialogPrimitive.Portal {...props}>
    <div className="fixed inset-0 z-50 flex items-start justify-center sm:items-center">
      {children}
    </div>
  </DialogPrimitive.Portal>
)
DialogPortal.displayName = DialogPrimitive.Portal.displayName

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> & { canvasTheme?: string }
>(({ className, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  
  if (canvasTheme) {
    const classString = "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in";
    const classes = classString.split(' ');
    
    classStuff = classes
      .filter(cls => cls.startsWith('dark:') ? canvasTheme === 'dark' : true)
      .map(cls => cls.startsWith('dark:') ? cls.substring(5) : cls)
      .join(' ');
  } else {
    classStuff = "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in";
  }

  return (
    <DialogPrimitive.Overlay
      ref={ref}
      className={cn(classStuff, className)}
      {...props}
    />
  );
})
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & { canvasTheme?: string }
>(({ className, children, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  
  if (canvasTheme) {
    const classString = "fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background p-6 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0";
    const classes = classString.split(' ');
    
    classStuff = classes
      .filter(cls => cls.startsWith('dark:') ? canvasTheme === 'dark' : true)
      .map(cls => cls.startsWith('dark:') ? cls.substring(5) : cls)
      .join(' ');
  } else {
    classStuff = "fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background p-6 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0";
  }

  return (
    <DialogPortal>
      <DialogOverlay canvasTheme={canvasTheme} />
      <DialogPrimitive.Content
        ref={ref}
        className={cn(classStuff, className)}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
})
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border border-gray-200 px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 dark:border-gray-800 dark:focus:ring-gray-300",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-gray-900 text-gray-50 hover:bg-gray-900/80 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/80",
        secondary:
          "border-transparent bg-gray-100 text-gray-900 hover:bg-gray-100/80 dark:bg-gray-800 dark:text-gray-50 dark:hover:bg-gray-800/80",
        destructive:
          "border-transparent bg-red-500 text-gray-50 hover:bg-red-500/80 dark:bg-red-900 dark:text-gray-50 dark:hover:bg-red-900/80",
        outline: "text-gray-950 dark:text-gray-50",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-white dark:bg-gray-950",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-white shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring dark:bg-gray-950",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-white shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))] dark:bg-gray-950",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-gray-100/50 font-medium [&>tr]:last:border-b-0 dark:bg-gray-800/50",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-gray-100 dark:hover:bg-gray-800/50 dark:data-[state=selected]:bg-gray-800",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-gray-500 [&:has([role=checkbox])]:pr-0 dark:text-gray-400",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-gray-200 dark:bg-gray-800",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const getButtonClasses = (canvasTheme?: string) => {
  // Base classes including both light and dark variants
  const baseClasses = "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300"

  // Variant classes including both light and dark variants
  const variantClasses = {
    default: "bg-gray-900 text-gray-50 hover:bg-gray-900/90 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90",
    destructive: "bg-red-500 text-gray-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-gray-50 dark:hover:bg-red-900/90",
    outline: "border border-gray-200 bg-transparent hover:bg-gray-100 hover:text-gray-900 dark:border-gray-800 dark:bg-transparent dark:hover:bg-gray-800 dark:hover:text-gray-50",
    secondary: "bg-gray-100 text-gray-900 hover:bg-gray-100/80 dark:bg-gray-800 dark:text-gray-50 dark:hover:bg-gray-800/80",
    ghost: "hover:bg-gray-800 hover:text-gray-100 text-gray-400",
    link: "text-gray-900 underline-offset-4 hover:underline dark:text-gray-50",
  }

  // Process classes based on canvasTheme
  const processClasses = (classString: string) => {
    return classString.split(' ')
      .filter(cls => {
        if (cls.startsWith('dark:')) {
          return canvasTheme === 'dark';
        }
        return true;
      })
      .map(cls => {
        if (cls.startsWith('dark:')) {
          return cls.substring(5);
        }
        return cls;
      })
      .join(' ');
  }

  // Process all variant classes
  const processedVariants = Object.entries(variantClasses).reduce((acc, [key, value]) => {
    acc[key] = processClasses(value);
    return acc;
  }, {} as Record<string, string>);

  return cva(processClasses(baseClasses), {
    variants: {
      variant: processedVariants,
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  });
}

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<ReturnType<typeof getButtonClasses>> {
  asChild?: boolean
  canvasTheme?: string
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, canvasTheme, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    const buttonVariants = getButtonClasses(canvasTheme)
    
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, getButtonClasses as buttonVariants }
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
    canvasTheme?: string
  }
>(({ className, inset, children, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  const baseClasses = "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 data-[state=open]:bg-gray-100 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-gray-800 dark:data-[state=open]:bg-gray-800";

  if (canvasTheme) {
    const classes = baseClasses.split(' ');
    classStuff = classes
      .filter(cls => cls.startsWith('dark:') ? canvasTheme === 'dark' : true)
      .map(cls => cls.startsWith('dark:') ? cls.substring(5) : cls)
      .join(' ');
  } else {
    classStuff = baseClasses;
  }

  return (
    <DropdownMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        classStuff,
        inset && "pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto" />
    </DropdownMenuPrimitive.SubTrigger>
  );
})
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent> & {
    canvasTheme?: string
  }
>(({ className, canvasTheme, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content> & {
    canvasTheme?: string
  }
>(({ className, sideOffset = 4, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  const baseClasses = "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50";

  if (canvasTheme) {
    const classes = baseClasses.split(' ');
    classStuff = classes
      .filter(cls => cls.startsWith('dark:') ? canvasTheme === 'dark' : true)
      .map(cls => cls.startsWith('dark:') ? cls.substring(5) : cls)
      .join(' ');
  } else {
    classStuff = baseClasses;
  }

  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        ref={ref}
        sideOffset={sideOffset}
        className={cn(classStuff, className)}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
})
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
    canvasTheme?: string
  }
>(({ className, inset, canvasTheme, ...props }, ref) => {
  let classStuff = "";
  const baseClasses = "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-gray-800 dark:focus:text-gray-50";

  if (canvasTheme) {
    const classes = baseClasses.split(' ');
    classStuff = classes
      .filter(cls => cls.startsWith('dark:') ? canvasTheme === 'dark' : true)
      .map(cls => cls.startsWith('dark:') ? cls.substring(5) : cls)
      .join(' ');
  } else {
    classStuff = baseClasses;
  }

  return (
    <DropdownMenuPrimitive.Item
      ref={ref}
      className={cn(
        classStuff,
        inset && "pl-8",
        className
    )}
    {...props}
    />
  );
})
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-100 dark:bg-gray-800", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus:ring-gray-300",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-100 dark:bg-gray-800", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps & { canvasTheme?: string }>(
  ({ className, canvasTheme, ...props }, ref) => {
    let classStuff = "";

    if (canvasTheme) {
      const classString = "flex min-h-[80px] w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300";

      const classes = classString.split(' ');

      classStuff = classes
        .filter(cls => {
          if (cls.startsWith('dark:')) {
            return canvasTheme === 'dark';
          } else {
            return true;
          }
        })
        .map(cls => {
          if (cls.startsWith('dark:')) {
            return cls.substring(5);
          } else {
            return cls;
          }
        })
        .join(' ');
    } else {
      classStuff = "flex min-h-[80px] w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300";
    }

    return (
      <textarea
        className={cn(
          classStuff,
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps & { canvasTheme?: string }>(
  ({ className, type, canvasTheme, ...props }, ref) => {
    let classStuff = "";

if (canvasTheme) {
  // The base class string containing both regular and dark-prefixed classes
  const classString = "flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-gray-950 placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:file:text-gray-50 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300";

  // Split the class string into an array of individual classes
  const classes = classString.split(' ');

  // Filter and map classes based on the canvasTheme value
  classStuff = classes
    .filter(cls => {
      if (cls.startsWith('dark:')) {
        // Include dark-prefixed classes only if canvasTheme is 'dark'
        return canvasTheme === 'dark';
      } else {
        // Always include non-prefixed classes
        return true;
      }
    })
    .map(cls => {
      // Remove 'dark:' prefix from classes
      if (cls.startsWith('dark:')) {
        return cls.substring(5); // Remove 'dark:' prefix
      } else {
        return cls;
      }
    })
    .join(' ');
} else {
  // If canvasTheme is not set, use the class string as is
  classStuff = "flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-gray-950 placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:file:text-gray-50 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300";
}
    return (
      <input
        type={type}
        className={cn(
          classStuff,
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-gray-100 dark:bg-gray-800", className)}
      {...props}
    />
  )
}

export { Skeleton }
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[state=open]:bg-gray-100 data-[state=open]:text-gray-900 dark:focus:bg-gray-800 dark:focus:text-gray-50 dark:data-[state=open]:bg-gray-800 dark:data-[state=open]:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-gray-950 dark:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-200 dark:bg-gray-800", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-gray-500 dark:text-gray-400",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
'use client'

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Bot, Building2, Users2, Sparkles, ArrowRight, Check, Info } from "lucide-react"
import { useState, useEffect } from "react"
import { AuthDialog } from "@/components/auth/AuthDialog"

export default function LandingPage() {
  const [windowHeight, setWindowHeight] = useState(0)
  const [showAuthDialog, setShowAuthDialog] = useState(false)
  const [isSignUp, setIsSignUp] = useState(false)
  const [emailInput, setEmailInput] = useState('')

  useEffect(() => {
    const updateHeight = () => {
      setWindowHeight(window.innerHeight)
    }
    updateHeight()
    window.addEventListener('resize', updateHeight)
    return () => window.removeEventListener('resize', updateHeight)
  }, [])

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  return (
    <div className="flex flex-col min-h-screen bg-white">
      <header className="w-full bg-white p-4 fixed top-0 z-50">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-4">
            <Link className="flex items-center justify-center" href="#">
              <span className="text-2xl font-extrabold ">cavvy.ai</span>
            </Link>
          </div>
          
          <div className="flex items-center gap-8">
            <nav className="flex gap-6">
              <button 
                onClick={() => scrollToSection('features')} 
                className="text-gray-900 hover:underline underline-offset-4 transition-colors font-extrabold"
              >
                Features
              </button>
              <button 
                onClick={() => scrollToSection('pricing')} 
                className="text-gray-900 hover:underline underline-offset-4 transition-colors font-extrabold"
              >
                Pricing
              </button>
            </nav>

            <Button
              onClick={() => {
                setIsSignUp(false)
                setShowAuthDialog(true)
              }}
              variant="outline"
              className="bg-gray-900 font-extrabold text-white hover:bg-gray-600 hover:text-white"
            >
              Sign In
            </Button>
          </div>
        </div>
      </header>

      <main className="flex-1 pt-16">
        <section id="hero" className="w-full flex items-center justify-center" style={{ minHeight: `${windowHeight * 0.75}px` }}>
          <div className="container px-4 md:px-6 mx-auto max-w-7xl">
            <div className="grid gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px] items-center">
              <div className="flex flex-col justify-center space-y-4">
                <div className="space-y-2">
                  <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">
                    Build Your Business Model Canvas with AI
                  </h1>
                  <p className="max-w-[600px] text-gray-500 md:text-xl ">
                    Create, iterate, and perfect your business model with intelligent AI assistance. Get suggestions,
                    insights, and real-time feedback.
                  </p>
                </div>
                <div className="flex flex-col gap-2 min-[400px]:flex-row">
                  <form className="flex-1 space-y-2" onSubmit={(e) => {
                    e.preventDefault()
                    setIsSignUp(true)
                    setShowAuthDialog(true)
                  }}>
                    <Input 
                      placeholder="Enter your email" 
                      type="email" 
                      value={emailInput}
                      onChange={(e) => setEmailInput(e.target.value)}
                    />
                    <Button type="submit" className="w-full">
                      Get Started Free
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </form>
                </div>
              </div>
              <div className="flex items-center justify-center">
                <div className="grid gap-4 lg:gap-8 w-full">
                  <div className="flex items-center gap-4 rounded-lg border p-4">
                    <Bot className="h-6 w-6" />
                    <div className="space-y-1">
                      <h3 className="font-medium">AI Assistant</h3>
                      <p className="text-sm text-gray-500">
                        Get intelligent suggestions for each section of your canvas
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4 rounded-lg border p-4">
                    <Building2 className="h-6 w-6" />
                    <div className="space-y-1">
                      <h3 className="font-medium">Business Model Canvas</h3>
                      <p className="text-sm text-gray-500">
                        Industry-standard 9-block canvas with real-time collaboration
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4 rounded-lg border p-4">
                    <Users2 className="h-6 w-6" />
                    <div className="space-y-1">
                      <h3 className="font-medium">Team Collaboration</h3>
                      <p className="text-sm text-gray-500">
                        Work together with your team in real-time
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        
        <section id="features" className="w-full bg-gray-100 flex items-center justify-center" style={{ minHeight: `${windowHeight * 0.75}px` }}>
          <div className="container px-4 md:px-6 mx-auto">
            <div className="max-w-[900px] mx-auto text-center">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-5xl mb-4">Features</h2>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
                Everything you need to create and perfect your business model
              </p>
            </div>
            <div className="grid max-w-5xl mx-auto items-center gap-6 py-12 lg:grid-cols-3 lg:gap-12">
              <div className="flex flex-col items-center text-center justify-center space-y-4">
                <Sparkles className="h-12 w-12" />
                <h3 className="text-xl font-bold">AI-Powered Insights</h3>
                <p className="text-gray-500">
                  Get intelligent suggestions and feedback for each section of your canvas
                </p>
                <ul className="grid gap-2 text-sm">
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Smart suggestions
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Real-time feedback
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Industry insights
                  </li>
                </ul>
              </div>
              <div className="flex flex-col items-center text-center justify-center space-y-4">
                <Building2 className="h-12 w-12" />
                <h3 className="text-xl font-bold">Business Model Canvas</h3>
                <p className="text-gray-500">
                  Industry-standard 9-block canvas with powerful editing features
                </p>
                <ul className="grid gap-2 text-sm">
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> 9-block layout
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Rich text editing
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Export options
                  </li>
                </ul>
              </div>
              <div className="flex flex-col items-center text-center justify-center space-y-4">
                <Users2 className="h-12 w-12" />
                <h3 className="text-xl font-bold">Team Collaboration</h3>
                <p className="text-gray-500">
                  Work together with your team in real-time on your business model
                </p>
                <ul className="grid gap-2 text-sm">
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Real-time editing
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Comments & feedback
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4" /> Version history
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </section>
        
        <section id="pricing" className="w-full flex items-center justify-center" style={{ minHeight: `${windowHeight * 0.75}px` }}>
          <div className="container px-4 md:px-6 mx-auto">
            <div className="max-w-[900px] mx-auto text-center">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-5xl mb-4">Pricing</h2>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
                Choose the perfect plan for your needs
              </p>
            </div>
            <div className="grid max-w-5xl mx-auto gap-6 py-12 lg:grid-cols-3 lg:gap-12">
              <div className="flex flex-col justify-between rounded-lg border p-6">
                <div>
                  <h3 className="text-xl font-bold">Free</h3>
                  <p className="mt-2 text-gray-500">Get started with the basics</p>
                  <div className="mt-4">
                    <span className="text-4xl font-bold">£0</span>
                    <span className="text-gray-500">/month</span>
                  </div>
                  <ul className="mt-4 grid gap-2">
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> 1 Business Model Canvas
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Basic AI Assistance
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Export to PDF
                    </li>
                  </ul>
                </div>
                <Button className="mt-6" variant="outline">
                  Get Started
                </Button>
              </div>
              <div className="relative flex flex-col justify-between rounded-lg border p-6">
                <div className="absolute -top-2 right-0 rounded-full bg-primary px-3 py-1 text-xs text-primary-foreground">
                  Popular
                </div>
                <div>
                  <h3 className="text-xl font-bold">Pro</h3>
                  <p className="mt-2 text-gray-500">Perfect for growing businesses</p>
                  <div className="mt-4">
                    <span className="text-4xl font-bold">£10</span>
                    <span className="text-gray-500">/month</span>
                  </div>
                  <ul className="mt-4 grid gap-2">
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Unlimited Canvases
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Advanced AI Features
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Team Collaboration
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Priority Support
                    </li>
                  </ul>
                </div>
                <Button className="mt-6">Get Started</Button>
              </div>
              <div className="flex flex-col justify-between rounded-lg border p-6">
                <div>
                  <h3 className="text-xl font-bold">Enterprise</h3>
                  <p className="mt-2 text-gray-500">For large organizations</p>
                  <div className="mt-4">
                    <span className="text-4xl font-bold">£100</span>
                    <span className="text-gray-500">/month</span>
                  </div>
                  <ul className="mt-4 grid gap-2">
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Everything in Pro
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Custom AI Training
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> Dedicated Support
                    </li>
                    <li className="flex items-center gap-2">
                      <Check className="h-4 w-4" /> SLA Guarantee
                    </li>
                  </ul>
                </div>
                <Button className="mt-6" variant="outline">
                  Contact Sales
                </Button>
              </div>
            </div>
          </div>
        </section>
        <section id="origins" className="w-full bg-gray-50 py-12 md:py-24">
          <div className="container px-4 md:px-6 mx-auto">
            <div className="max-w-[900px] mx-auto text-center">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl mb-4">The Origins of the Business Model Canvas</h2>
              <div className="flex justify-center mb-6">
                <Info className="h-12 w-12 text-primary" />
              </div>
              <p className="text-gray-700 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed mb-6">
                The Business Model Canvas, a groundbreaking strategic management tool, was developed by Alexander Osterwalder and Yves Pigneur. Introduced in their 2010 book "Business Model Generation," it has since transformed how organizations visualize, design, and innovate their business models.
              </p>
              <div className="grid md:grid-cols-2 gap-6 mb-8">
                <div className="bg-white p-6 rounded-lg shadow-md">
                  <h3 className="text-xl font-semibold mb-3">Key Benefits</h3>
                  <ul className="text-left text-gray-600 space-y-2">
                    <li className="flex items-start">
                      <Check className="h-5 w-5 text-green-500 mr-2 mt-1 flex-shrink-0" />
                      <span>Simplifies complex business models into a single, easy-to-understand page</span>
                    </li>
                    <li className="flex items-start">
                      <Check className="h-5 w-5 text-green-500 mr-2 mt-1 flex-shrink-0" />
                      <span>Facilitates team collaboration and alignment on business strategy</span>
                    </li>
                    <li className="flex items-start">
                      <Check className="h-5 w-5 text-green-500 mr-2 mt-1 flex-shrink-0" />
                      <span>Enables rapid iteration and testing of business ideas</span>
                    </li>
                  </ul>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                  <h3 className="text-xl font-semibold mb-3">Wide-ranging Impact</h3>
                  <p className="text-gray-600 text-left">
                    From startups to Fortune 500 companies, the Business Model Canvas has become an indispensable tool for entrepreneurs, executives, and consultants worldwide. Its versatility and effectiveness have made it a staple in business schools and innovation workshops globally.
                  </p>
                </div>
              </div>
              <p className="text-sm text-gray-500 mb-4">
                The Business Model Canvas is licensed under the Creative Commons Attribution-Share Alike 3.0 Unported License, making it freely accessible and adaptable for various uses.
              </p>
              <Link 
                href="https://creativecommons.org/licenses/by-sa/3.0/" 
                target="_blank" 
                rel="noopener noreferrer"
                className="inline-flex items-center text-primary hover:underline"
              >
                Learn more about the Creative Commons license
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </div>
          </div>
        </section>
      </main>

      <footer className="flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center px-4 md:px-6 border-t">
        <p className="text-xs text-gray-500">
          © 2024 cavvy.ai. All rights reserved.
        </p>
        <nav className="sm:ml-auto flex gap-4 sm:gap-6">
          <Link className="text-xs hover:underline underline-offset-4" href="#">
            Terms of Service
          </Link>
          <Link className="text-xs hover:underline underline-offset-4" href="#">
            Privacy
          </Link>
        </nav>
      </footer>

      <AuthDialog 
        isOpen={showAuthDialog}
        openSignUp={isSignUp}
        onClose={() => setShowAuthDialog(false)}
        onSuccess={() => setShowAuthDialog(false)}
        initialEmail={emailInput}
      />
    </div>
  )
}import { GridItem } from './gridTypes'

export function cssToGridItems(areas: string[], cols: string, rows: string): GridItem[] {
  const colsArray = cols.split(' ').map(fr => parseInt(fr.replace('fr', '')))
  const rowsArray = rows.split(' ').map(size => size === 'auto' ? 1 : parseInt(size))
  
  return areas.map((area, index) => {
    const [rowStart, colStart, rowEnd, colEnd] = area.split(' / ').map(Number)
    return {
      i: index.toString(),
      x: colsArray.slice(0, colStart - 1).reduce((a, b) => a + b, 0),
      y: rowsArray.slice(0, rowStart - 1).reduce((a, b) => a + b, 0),
      w: colsArray.slice(colStart - 1, colEnd - 1).reduce((a, b) => a + b, 0),
      h: rowsArray.slice(rowStart - 1, rowEnd - 1).reduce((a, b) => a + b, 0),
    }
  })
}

export function gridItemsToCss(items: GridItem[]): { areas: string[], cols: string, rows: string } {
  if (items.length === 0) {
    return { areas: [], cols: '', rows: '' }
  }

  // Find the minimum x and y to normalize the grid
  const minX = Math.min(...items.map(item => item.x))
  const minY = Math.min(...items.map(item => item.y))

  // Normalize items
  const normalizedItems = items.map(item => ({
    ...item,
    x: item.x - minX,
    y: item.y - minY
  }))

  // Determine the number of columns and rows
  const maxX = Math.max(...normalizedItems.map(item => item.x + item.w))
  const maxY = Math.max(...normalizedItems.map(item => item.y + item.h))

  const areas = normalizedItems.map(item => 
    `${item.y + 1} / ${item.x + 1} / ${item.y + item.h + 1} / ${item.x + item.w + 1}`
  )

  const colSizes = Array(maxX).fill('1fr')
  const rowSizes = Array(maxY).fill('auto')

  return {
    areas,
    cols: colSizes.join(' '),
    rows: rowSizes.join(' ')
  }
}

export interface GridItem {
    i: string
    x: number
    y: number
    w: number
    h: number
  }
  
  "use client"

import React, { useState, useEffect } from 'react'
import { Responsive, WidthProvider } from 'react-grid-layout'
import 'react-grid-layout/css/styles.css'
import 'react-resizable/css/styles.css'
import { Plus, Save } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { cssToGridItems, gridItemsToCss } from './utils'
import { GridItem } from './gridTypes'

const ResponsiveGridLayout = WidthProvider(Responsive)

const COLORS = ['bg-red-200', 'bg-blue-200', 'bg-green-200', 'bg-yellow-200', 'bg-purple-200', 'bg-pink-200']

interface VisualGridEditorProps {
  initialAreas: string[]
  initialCols: string
  initialRows: string
  onChange: (areas: string[], cols: string, rows: string) => void
}

export function VisualGridEditor({ initialAreas, initialCols, initialRows, onChange }: VisualGridEditorProps) {
    console.log('initialAreas', initialAreas)
    console.log('initialCols', initialCols)
    console.log('initialRows', initialRows)
  const [gridItems, setGridItems] = useState<GridItem[]>([])

  useEffect(() => {
    if (initialRows.includes('repeat')) {
      console.error('Invalid row definition: "repeat" syntax is not supported.')
      return
    }

    const initialItems = cssToGridItems(initialAreas, initialCols, initialRows)
    setGridItems(initialItems)
  }, [initialAreas, initialCols, initialRows])

  const addNewArea = () => {
    const newItem: GridItem = {
      i: gridItems.length.toString(),
      x: (gridItems.length * 3) % 12,
      y: Infinity, // puts it at the bottom
      w: 3,
      h: 2
    }
    setGridItems([...gridItems, newItem])
  }

  const onLayoutChange = (layout: GridItem[]) => {
    const newItems = layout.map(item => ({
        ...item,
        w: Math.max(item.w, 1), // Ensure minimum width of 1
      h: Math.max(item.h, 1), // Ensure minimum height of 1
    }))
    setGridItems(newItems)
    
    const { areas, cols, rows } = gridItemsToCss(newItems)
    onChange(areas, cols, rows)
  }

  // Set a fixed number of columns for consistent sizing
  const fixedCols = 12;
  const rowHeight = 50; // Fixed row height for consistent sizing

  return (
    <Card className="flex-grow">
      <CardHeader>
        <CardTitle>Visual Grid Editor</CardTitle>
      </CardHeader>
      <CardContent className="flex-grow">
        <ResponsiveGridLayout
          className="layout bg-gray-50 border rounded-lg p-4"
          layouts={{ lg: gridItems }}
          breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}
          cols={{ lg: fixedCols, md: fixedCols, sm: fixedCols, xs: fixedCols, xxs: fixedCols }}
          rowHeight={rowHeight}
          width={1200}
          onLayoutChange={onLayoutChange}
          compactType={null}
          preventCollision={true}
          isResizable={true}
          isDraggable={true}
        >
          {gridItems.map((item, index) => (
            <div
              key={item.i}
              className={`${COLORS[index % COLORS.length]} rounded-lg p-2 flex flex-col justify-between shadow-md cursor-move`}
            >
              <div className="font-bold text-gray-700">Area {parseInt(item.i) + 1}</div>
              <div className="text-xs text-gray-600">
                {item.w}x{item.h}
              </div>
            </div>
          ))}
        </ResponsiveGridLayout>
      </CardContent>
    </Card>
  )
}

'use client'

import React from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { useState, useRef, useEffect } from 'react'
import { 
  ThumbsUp,
  X
} from 'lucide-react'
import DynamicIcon from '../Util/DynamicIcon'
import { useCanvas } from '@/contexts/CanvasContext'

interface AISuggestion {
  id: string;
  suggestion: string;
  rationale: string;
  section?: string;
  itemId?: string;
}

interface AISuggestionItemProps {
  suggestion: AISuggestion;
  onLike: () => void;
  onDismiss: () => void;
  onExpand: () => void;
}

function AISuggestionItem({ suggestion, onLike, onDismiss, onExpand }: AISuggestionItemProps) {
  const [isHovered, setIsHovered] = useState(false)
  const [isRemoving, setIsRemoving] = useState(false)
  const [isLiked, setIsLiked] = useState(false)
  const [isDismissed, setIsDismissed] = useState(false)
  const { formData } = useCanvas()
  const actionExecuted = useRef(false)
  const icon = formData?.canvasType?.sections.find(section => section.name === suggestion.section)?.icon

  useEffect(() => {
    if (isRemoving && !actionExecuted.current) {
      actionExecuted.current = true;
      const timer = setTimeout(() => {
        if (isLiked) {
          onLike()
        } else {
          onDismiss()
        }
      }, 1000)
      return () => clearTimeout(timer)
    }
  }, [isRemoving, isLiked, onLike, onDismiss])

  const handleLike = () => {
    setIsLiked(true)
    setIsRemoving(true)
  }

  const handleDismiss = () => {
    setIsDismissed(true)
    setIsRemoving(true)
  }

  return (
    <Card 
      className={`mb-2 border-2 dark:bg-gray-900 bg-white ${
        isHovered ? 'border-gray-700 dark:border-gray-700 border-gray-300' : 'dark:border-gray-800 border-gray-200'
      } ${
        isRemoving
          ? isLiked
            ? 'opacity-50'
            : isDismissed
              ? 'opacity-50 line-through'
              : ''
          : ''
      } transition-all duration-500`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <CardContent className="p-3 relative">
        <div className={`flex items-start gap-2 ${
          isLiked ? 'text-green-600 dark:text-green-400' : ''
        }`}>
          {icon && <DynamicIcon name={icon}  className={`w-4 h-4 mt-1 ${
            isLiked 
              ? 'text-green-600 dark:text-green-400' 
              : 'dark:text-gray-400 text-gray-500'
          }`} />}
          <div className="flex-1">
            <p className={`text-sm mb-1 ${
              isLiked 
                ? 'text-green-600 dark:text-green-400' 
                : 'dark:text-gray-200 text-gray-700'
            }`}>
              {suggestion.suggestion}
            </p>
            <p className={`text-xs ${
              isLiked 
                ? 'text-green-500/80 dark:text-green-500/60' 
                : 'dark:text-gray-400 text-gray-500'
            }`}>
              {suggestion.rationale}
            </p>
          </div>
        </div>
        <div className={`flex gap-1 mt-2 justify-end transition-opacity duration-300 ${
          isRemoving ? 'opacity-0' : 'opacity-100'
        }`}>
          <Button
            size="sm"
            variant="ghost"
            className={`${
              isLiked 
                ? 'text-green-600 dark:text-green-400' 
                : 'dark:text-gray-400 text-gray-500 dark:hover:text-gray-100 hover:text-gray-900'
            }`}
            onClick={handleLike}
            disabled={isRemoving}
          >
            <ThumbsUp className="h-4 w-4" />
          </Button>
          <Button
            size="sm"
            variant="ghost"
            className="dark:text-gray-400 text-gray-500 dark:hover:text-gray-100 hover:text-gray-900"
            onClick={handleDismiss}
            disabled={isRemoving}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

export default AISuggestionItem'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Slider } from '@/components/ui/slider'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Label } from '@/components/ui/label'
import { AIQuestion } from '@/types/canvas'
import DynamicIcon from '../Util/DynamicIcon'
import { useCanvas } from '@/contexts/CanvasContext'

interface AIQuestionItemProps {
  question: AIQuestion;
  onSubmit: (question: AIQuestion) => void;
}
function AIQuestionItem({ question, onSubmit }: AIQuestionItemProps) {
  const [answer, setAnswer] = useState<string | number>('')
  const [isSubmitted, setIsSubmitted] = useState(false)
  const { formData } = useCanvas()
  const icon = formData?.canvasType?.sections.find((section: any) => section.name === question.section)?.icon

  const handleSubmit = () => {
    if (answer) {
      setIsSubmitted(true)
      console.log('handleSubmit', question, answer)
      onSubmit({
        ...question,
        answer: answer
      })
    }
  }

  const renderQuestionInput = () => {
    switch (question.type) {
      case 'open':
        return (
          <Input
            type="text"
            value={answer as string}
            onChange={(e) => setAnswer(e.target.value)}
            placeholder="Type your answer..."
            className="mt-2"
          />
        )

      case 'rating':
        return question.scale ? (
          <div className="mt-4 space-y-2">
            <Slider
              min={question.scale.min}
              max={question.scale.max}
              step={1}
              value={[Number(answer) || question.scale.min]}
              onValueChange={(value) => setAnswer(value[0])}
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>{question.scale.min}</span>
              <span>{question.scale.label}</span>
              <span>{question.scale.max}</span>
            </div>
          </div>
        ) : null

      case 'multipleChoice':
        return question.options ? (
          <RadioGroup
            className="mt-2 space-y-2"
            value={answer as string}
            onValueChange={setAnswer}
          >
            {question.options.map((option) => (
              <div key={option} className="flex items-center space-x-2">
                <RadioGroupItem value={option} id={option} />
                <Label htmlFor={option}>{option}</Label>
              </div>
            ))}
          </RadioGroup>
        ) : null
    }
  }

  return (
    <Card className={`mb-2 border-2 dark:bg-gray-900 bg-white dark:border-gray-800 border-gray-200 
      ${isSubmitted ? 'scale-95 opacity-50' : ''} transition-all duration-300`}
    >
      <CardContent className="p-3">
        <div className="flex items-start gap-2">
          {icon && <DynamicIcon name={icon} className="w-4 h-4 mt-1 dark:text-gray-400 text-gray-500" />}
          <div className="flex-1">
            <p className="text-sm dark:text-gray-200 text-gray-700 mb-2">{question.question}</p>
            {renderQuestionInput()}
            <div className="flex justify-end mt-3">
              <Button
                size="sm"
                onClick={handleSubmit}
                disabled={!answer || isSubmitted}
              >
                Submit
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

export default AIQuestionItem import { Button } from '@/components/ui/button'
import { Lightbulb, HelpCircle, MessageCircle, Search } from 'lucide-react'

const actions = [
  { key: 'suggest', label: 'Suggest', icon: Lightbulb, color: 'text-amber-500 dark:text-amber-400' },
  { key: 'critique', label: 'Critique', icon: MessageCircle, color: 'text-green-500 dark:text-green-400' },
  { key: 'question', label: 'Question', icon: HelpCircle, color: 'text-purple-500 dark:text-purple-400' },
  { key: 'research', label: 'Research', icon: Search, color: 'text-blue-500 dark:text-blue-400' }
]

interface ActionButtonsProps {
  onActionSelect: (action: string) => void;
}

export function ActionButtons({ onActionSelect }: ActionButtonsProps) {
  const isWide  = false
  return (
    <div className={`flex gap-2 px-2 py-2 ${isWide ? 'justify-start' : 'justify-evenly'}`}>
      {actions.map(({ key, label, icon: Icon, color }) => (
        <Button
          key={key}
          variant="outline"
          size="sm"
          className={`
            border-gray-200 dark:border-gray-700 
            bg-gray-50 dark:bg-gray-900 
            text-muted-foreground hover:text-foreground
            hover:bg-gray-100 dark:hover:bg-gray-800
            ${isWide ? 'flex gap-2 items-center' : ''}
          `}
          onClick={() => onActionSelect(key)}
        >
          {isWide && <Icon size={16} className={color} />}
          {label}
        </Button>
      ))}
    </div>
  )
} 'use client'

import React, { useState, useEffect, useRef } from 'react'
import { useCanvas } from '@/contexts/CanvasContext'
import { AdminMessage, useChat } from '@/contexts/ChatContext'
import { Message } from '@/contexts/ChatContext'
import { sendAdminChatRequest, sendChatRequest } from '@/services/aiService'
import { ChatHeader } from './ChatHeader'
import { AIAgent, Section } from '@/types/canvas'
import { ChatInput } from './ChatInput'
import { ChatMessageList } from './ChatMessageList'
import { useAuth } from '@/contexts/AuthContext'
import { CanvasTypeSuggestion, CanvasLayoutSuggestion } from '@/types/canvas-sections'
import { useAIAgents } from '@/contexts/AIAgentContext'
import { useSidebar } from '../ui/sidebar'
import { useSidebarWidth } from '@/contexts/SIdebarWidthCOntext'
import { SIDEBAR_WIDTH_MEDIUM, SIDEBAR_WIDTH_WIDE } from '@/src/constants/sideBarWidths'


export function AIChatArea({ onClose }: { onClose?: () => void }) {

  const { updateSection, updateQuestionAnswer, formData, aiAgent } = useCanvas()
  const { messages, addMessage, addMessages, input, setInput, isLoading, setIsLoading, clearMessages } = useChat()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const [activeSection, setActiveSection] = useState<string | null>(null)
  const { sidebarWidth, setSidebarWidth } = useSidebarWidth()
  const isWide  = sidebarWidth === SIDEBAR_WIDTH_WIDE
  const { open } = useSidebar()
  const { isInTrialPeriod, userData } = useAuth()
  const [activeTool, setActiveTool] = useState<string | null>(null)
  const { getAIAgent } = useAIAgents()

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, isLoading])

  const handleAddSuggestion = (index: number, section: string, suggestion: string, rationale: string, suggestionId: string) => {
    const sectionData = formData.sections.get(section) as Section
    const currentItems = sectionData?.items || []
    const newItems = [...currentItems, `${suggestion}\n\n${rationale}`]
    updateSection(section, newItems)
    // handleRemoveSuggestion(index, suggestionId)
  }

  const handleSend = async () => {
    console.log('isInTrialPeriod', isInTrialPeriod)
    console.log('userData', userData)
    if (!isInTrialPeriod && (!userData?.subscriptionStatus || userData?.subscriptionPlan === 'free')) {
      addMessages([{ role: 'assistant', content: 'Your trial period has ended. Please upgrade to continue using AI features.' }])
      return
    }
    if(activeTool) {
      if(input.trim()) {
        const userMessage = { role: 'user', content: input, action: activeTool } as Message
        const updatedMessages = [...messages, userMessage]
        addMessages(updatedMessages)      
        setInput('')
        setIsLoading(true)

        try {
          const currentMessages = [...updatedMessages.filter((m: Message) => 
            m.role == 'system' || m.role == 'user' || m.role == 'assistant'
          )]
          const aiResponse = await sendAdminChatRequest([...currentMessages])
          const formattedResponse: AdminMessage = {
            role: 'assistant',
            content: aiResponse.content || '',
            canvasTypeSuggestions: aiResponse.canvasTypeSuggestions?.map((suggestion: any) => ({
              id: suggestion.id,
              name: suggestion.name,
              icon: suggestion.icon,
              description: suggestion.description,
              defaultLayout: suggestion.defaultLayout,
              sections: suggestion.sections,
              rationale: suggestion.rationale
            } as CanvasTypeSuggestion)),
            canvasLayoutSuggestions: aiResponse.canvasLayoutSuggestions?.map((suggestion: any) => ({
              gridTemplate: {
                columns: suggestion.gridTemplate.columns,
                rows: suggestion.gridTemplate.rows
              },
              areas: suggestion.areas,
              rationale: suggestion.rationale
            } as CanvasLayoutSuggestion))
          }
          addMessages([...updatedMessages, formattedResponse])
        } catch (error) {
          const errorMessage = error instanceof Error 
            ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
            : String(error)
          
          addMessages([...updatedMessages, { 
            role: 'error', 
            content: `An error occurred:\n\n${errorMessage}` 
          }])
        } finally {
          setIsLoading(false)
        }
      }
    }
    else if (input.trim()) {
      const userMessage = { role: 'user', content: input } as Message
      const updatedMessages = [...messages, userMessage]
      addMessages(updatedMessages)      
      setInput('')
      setIsLoading(true)

      try {
        const currentMessages = [...updatedMessages.filter((m: Message) => 
          m.role == 'system' || m.role == 'user' || m.role == 'assistant'
        )]
        if(!aiAgent) {
          throw new Error('No AI agent found')
        }
        const aiResponse = await sendChatRequest([...currentMessages], formData, aiAgent)
        const formattedResponse: Message = {
          role: 'assistant',
          content: aiResponse.content || '',
          suggestions: aiResponse.suggestions?.map((suggestion: any) => ({
            id: suggestion.id,
            section: suggestion.section || activeSection,
            suggestion: suggestion.suggestion,
            rationale: suggestion.rationale
          })),
          questions: aiResponse.questions?.map((question: any) => ({
            id: question.id,
            question: question.question,
            section: question.section || activeSection,
            type: question.type || 'open',
            options: question.options || [],
            scale: question.scale || null
          }))
        }
        addMessages([...updatedMessages, formattedResponse])
      } catch (error) {
        const errorMessage = error instanceof Error 
          ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
          : String(error)
        
        addMessages([...updatedMessages, { 
          role: 'error', 
          content: `An error occurred:\n\n${errorMessage}` 
        }])
      } finally {
        setIsLoading(false)
      }
    }
  }

  const handleDismiss = (index: number, suggestionId: string) => {
    // handleRemoveSuggestion(index, suggestionId)
  }

  const handleExpand = async (suggestion: { suggestion: string }) => {
    const expandMessage = `Tell me more about "${suggestion.suggestion}"`
    setInput('')
    setIsLoading(true)

    try {
      const userMessage = { role: 'user', content: 'Tell me more' } as Message
      const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]
      addMessages([...currentMessages, userMessage])
      if(!aiAgent) {
        throw new Error('No AI agent found')
      }
      const aiResponse = await sendChatRequest([...currentMessages, { role: 'user', content: expandMessage }], formData, aiAgent)
      const formattedResponse: Message = {
        role: 'assistant',
        content: aiResponse.content || '',
        suggestions: aiResponse.suggestions?.map((suggestion: any) => ({
          id: suggestion.id,
          section: suggestion.section || activeSection,
          suggestion: suggestion.suggestion,
          rationale: suggestion.rationale
        })),
        questions: aiResponse.questions?.map((question: any) => ({
          id: question.id,
          question: question.question,
          section: question.section || activeSection,
          type: question.type || 'open',
          options: question.options || [],
          scale: question.scale || null
        }))
      }
      addMessages([...messages, formattedResponse])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...messages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }])
    } finally {
      setIsLoading(false)
    }
  }
  const handleChipClick = (action: string) => {
    
  }
  
  const handleQuestionSubmit = (action: string) => {
    let message = {
      action: action,
      section: activeSection
    }
    handleActionMessage(message)
  }

  const handleActionMessage = async (action: any) => {
    const actionMessage = typeof action === 'string' 
      ? action 
      : action.message;

    const userMessage = { 
      role: 'user', 
      content: actionMessage,
      action: typeof action === 'string' ? action : action.action,
      section: typeof action === 'string' ? null : action.section
    } as Message;

    const currentMessages = [...messages.filter((m: Message) => 
      m.role === 'system' || m.role === 'user' || m.role === 'assistant'
    )];
    const updatedMessages = [...currentMessages, userMessage];
    
    addMessages(updatedMessages);
    setIsLoading(true);

    try {
      if(!aiAgent) {
        throw new Error('No AI agent found')
      }
      const aiResponse = await sendChatRequest(updatedMessages, formData, aiAgent);
      const formattedResponse: Message = {
        role: 'assistant',
        content: aiResponse.content || '',
        suggestions: aiResponse.suggestions?.map((suggestion: any) => ({
          id: suggestion.id,
          section: suggestion.section || action.section,
          suggestion: suggestion.suggestion,
          rationale: suggestion.rationale
        })),
        questions: aiResponse.questions?.map((question: any) => ({
          id: question.id,
          question: question.question,
          section: question.section || activeSection,
          type: question.type || 'open',
          options: question.options || [],
          scale: question.scale || null
        }))
      };
      addMessages([...updatedMessages, formattedResponse]);
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error);
      
      addMessages([...updatedMessages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClearChat = () => {
    clearMessages()
  }

  const handleAdminToolSelect = async (tool: string | null) => {
    setActiveTool(tool)
  }

  return (
    <>
          <div className="flex-shrink-0">
            <ChatHeader 
              isWide={isWide}
              onClearChat={handleClearChat}
              onToggleWidth={()=>{
                if(isWide) {
                  setSidebarWidth(SIDEBAR_WIDTH_MEDIUM)
                }
                else {
                  setSidebarWidth(SIDEBAR_WIDTH_WIDE)
                }
              }}
              onClose={onClose}
            />
          </div>
          <div className="flex-1 overflow-hidden flex flex-col">
            <ChatMessageList
              activeSection={activeSection}
              onSectionSelect={setActiveSection}
              onActionSelect={handleActionMessage}
              messages={messages}
              isLoading={isLoading}
              onSuggestionAdd={handleAddSuggestion}
              onSuggestionDismiss={handleDismiss}
              onSuggestionExpand={handleExpand}
              onQuestionSubmit={updateQuestionAnswer}
              messagesEndRef={messagesEndRef}
              onAdminToolSelect={handleAdminToolSelect}
              activeTool={activeTool}
            />
          </div>
          <div className="flex-shrink-0">
            <ChatInput
              input={input}
              isLoading={isLoading}
              onSectionSelect={setActiveSection}
              onActionSelect={handleActionMessage}
              onInputChange={setInput}
              onSend={handleSend}
            />
          </div>
        </>
  )
}import { Button } from '@/components/ui/button'
import { 
  Wand2,
  BrainCircuit,
  MessageSquareQuote,
  ListChecks,
  FileQuestion,
  X
} from 'lucide-react'

const adminTools = [
  { key: 'suggestCanvasTypes', label: 'Suggest Canvas Types', icon: Wand2 },
  { key: 'suggestCanvasLayouts', label: 'Suggest Canvas Layouts', icon: BrainCircuit }
]

interface AdminButtonBarProps {
  activeTool: string | null
  onToolSelect: (tool: string | null) => void
}

export function AdminButtonBar({ activeTool, onToolSelect }: AdminButtonBarProps) {
  return (
    <div className="flex flex-wrap gap-2 px-4 py-2">
      {adminTools.map(({ key, label, icon: Icon }) => (
        <Button
          key={key}
          variant="outline"
          size="sm"
          className={`flex items-center gap-2 
            border-gray-200 dark:border-gray-700 
            ${key === activeTool
              ? 'bg-primary text-primary-foreground hover:bg-primary/90'
              : 'text-muted-foreground hover:text-foreground bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800'
            }`}
          onClick={() => onToolSelect(key)}
        >
          <Icon className="w-4 h-4" />
          {label}
        </Button>
      ))}
      {activeTool && (
        <Button
          variant="ghost"
          size="sm"
          className="flex items-center gap-2 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/10"
          onClick={() => onToolSelect(null)}
        >
          <X className="w-4 h-4" />
          Cancel
        </Button>
      )}
    </div>
  )
} import React from 'react'
import { Bot, Shrink, Expand, MoreVertical, ChevronDown } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface ChatHeaderProps {
  isWide: boolean
  onClearChat: () => void
  onToggleWidth: () => void
  onClose?: () => void
}

export function ChatHeader({ isWide, onClearChat, onToggleWidth, onClose }: ChatHeaderProps) {
  return (
    <div className="flex items-center justify-between gap-2 p-4 border-b border-zinc-300/50 dark:border-zinc-800/50">
      <div className="flex items-center gap-2">
        <Bot className="h-4 w-4 text-muted-foreground" />
        <h3 className="text-sm font-semibold text-muted-foreground">AI Assistant</h3>
      </div>
      <div className="flex items-center gap-2">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 text-muted-foreground hover:text-foreground"
            >
              <MoreVertical className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={onClearChat}>
              <Bot className="h-4 w-4 mr-2" />
              New Chat
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
        <Button
          variant="ghost"
          size="icon"
          className="text-muted-foreground hover:text-foreground"
          onClick={onClose ? onClose : onToggleWidth}
        >
          {onClose ? <ChevronDown className="h-4 w-4" /> : isWide ? <Shrink className="h-4 w-4" /> : <Expand className="h-4 w-4" />}
        </Button>
      </div>
    </div>
  )
} import { Button } from '@/components/ui/button'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import { useCanvas } from '@/contexts/CanvasContext';
import DynamicIcon from '../Util/DynamicIcon';


interface SectionButtonsProps {
  activeSection: string | null;
  onSectionSelect: (section: string | null) => void;
}

export function SectionButtons({ activeSection, onSectionSelect }: SectionButtonsProps) {
  let {formData} = useCanvas();
// Type the Map entries and conversion
  const sections = Array.from(
    formData.canvasType.sections.entries()
  ).map(([i,section]) => ({
    icon: section.icon,
    name: section.name,
    key: section.name
  }));
  return (
    <div className="flex justify-between px-4 py-2">
      {sections.map(({ icon: Icon, name, key }) => (
        <Tooltip key={key}>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className={`h-8 w-8 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-gray-800 dark:hover:text-gray-100 ${
                activeSection === key 
                  ? 'dark:bg-gray-800 dark:text-gray-100 bg-gray-100 text-gray-900' 
                  : 'text-gray-400'
              }`}
              onClick={() => {
                if (activeSection !== key) {
                  onSectionSelect(key)
                } else {
                  onSectionSelect(null)
                }
              }}
            >
              <DynamicIcon name={Icon} className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent 
            side="top" 
            className="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 border-gray-200 dark:border-gray-800"
          >
            {name}
          </TooltipContent>
        </Tooltip>
      ))}
    </div>
  )
} import React from 'react'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Bot, User, AlertTriangle, Users, Heart, Truck, Users2, Coins, Receipt, Building2, Workflow, Gift, Shield } from 'lucide-react'
import { Message, AdminMessage } from '@/contexts/ChatContext'
import { AIThinkingIndicator } from '@/components/ui/ai-thinking'
import ReactMarkdown from 'react-markdown'
import { motion, AnimatePresence } from 'framer-motion'
import AISuggestionItem from './AISuggestionItem'
import AIQuestionItem from './AIQuestionItem'
import { SectionButtons } from './SectionButtons'
import { ActionButtons } from './ActionButtons'
import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Search, HelpCircle, Zap, MessageCircle, Lightbulb } from 'lucide-react'
import { AdminButtonBar } from './AdminButtonBar'
import DynamicIcon from '../Util/DynamicIcon'
import { CanvasTypeService } from '@/services/canvasTypeService'
import { CanvasLayoutDetails, CanvasSection, CanvasType } from '@/types/canvas-sections'
import { useCanvas } from '@/contexts/CanvasContext'
import { AIQuestion } from '@/types/canvas'

interface ChatMessageListProps {
  messages: Message[]
  isLoading: boolean
  onSuggestionAdd: (messageIndex: number, section: string, suggestion: string, rationale: string, id: string) => void
  onSuggestionDismiss: (messageIndex: number, id: string) => void
  onSuggestionExpand: (suggestion: { suggestion: string }) => void
  onQuestionSubmit: (question: AIQuestion) => void
  activeSection: string | null
  activeTool: string | null
  onSectionSelect: (section: string | null) => void
  onActionSelect: (action: { message: string, section: string, action: string }) => void
  messagesEndRef: React.RefObject<HTMLDivElement>
  onAdminToolSelect: (tool: string | null) => void
}

interface CanvasTypeSuggestion {
  name: string;
  description: string;
  icon: string;
  rationale: string;
  sections: any[]; // You may want to type this more specifically based on your data structure
  defaultLayout: CanvasLayoutDetails;
}

export function ChatMessageList({
  messages,
  isLoading,
  onSuggestionAdd,
  onSuggestionDismiss,
  onSuggestionExpand,
  onQuestionSubmit,
  activeSection,
  activeTool,
  onSectionSelect,
  onActionSelect,
  messagesEndRef,
  onAdminToolSelect
}: ChatMessageListProps) {

  const isEmptyChat = messages.length === 0
  const getMessage = (action: string, section: string) => {
    if(action === 'suggest') {
      return `Suggest items for ${section}`
    }
    if(action === 'critique') {
      return `Critique ${section}`
    }
    if(action === 'research') {
      return `Suggest research for ${section}`
    }
    else {
      return `Question me about ${section}`
    }
  }
  // const sectionsMap = {
  //   keyPartners: {
  //     key: 'keyPartners',
  //     name: "Key Partners",
  //     icon: <Building2 className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   keyActivities: {
  //     key: 'keyActivities',
  //     name: "Key Activities",
  //     icon: <Workflow className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   keyResources: {
  //     key: 'keyResources',
  //     name: "Key Resources",
  //     icon: <Receipt className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   valuePropositions: {
  //     key: 'valuePropositions',
  //     name: "Value Propositions",
  //     icon: <Gift className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   customerRelationships: {
  //     key: 'customerRelationships',
  //     name: "Customer Relationships",
  //     icon: <Heart className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   channels: {
  //     key: 'channels',
  //     name: "Channels",
  //     icon: <Truck className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   customerSegments: {
  //     key: 'customerSegments',
  //     name: "Customer Segments",
  //     icon: <Users2 className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   costStructure: {
  //     key: 'costStructure',
  //     name: "Cost Structure",
  //     icon: <Receipt className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   },
  //   revenueStreams: {
  //     key: 'revenueStreams',
  //     name: "Revenue Streams",
  //     icon: <Coins className="w-4 h-4 text-blue-500 dark:text-blue-400" />
  //   }
  // }
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [adminTool, setAdminTool] = useState<string | null>(null)
  const [showAdminTool, setShowAdminTool] = useState(false)
  const { formData } = useCanvas()
  const sectionsMap = formData?.canvasType?.sections.reduce((acc: any, section: CanvasSection) => {
    acc[section.name] = {
      name: section.name,
      icon: section.icon
    };
    return acc;
  }, {}) || {};


  const suggestions = {
    suggest: [
      ...Object.values(sectionsMap).map((section) => ({section: section, action: 'suggest'})),
    ],
      critique: [
        ...Object.values(sectionsMap).map((section) => ({section: section, action: 'critique'})),
    ],
    research: [
      ...Object.values(sectionsMap).map((section) => ({section: section, action: 'research'})),
    ],
    question: [
      ...Object.values(sectionsMap).map((section) => ({section: section, action: 'question'})),
    ]
  }

  const handleSaveCanvasType = async (suggestion: any) => {
    try {
      const canvasTypeService = new CanvasTypeService();
      const canvasType: CanvasType = {
        id: '', // This will be set by Firestore
        name: suggestion.name,
        description: suggestion.description,
        icon: suggestion.icon,
        sections: suggestion.sections || [],
        defaultLayout: suggestion.defaultLayout
      };
      
      await canvasTypeService.saveCanvasType(canvasType);
      // You might want to add some success feedback here
    } catch (error) {
      console.error('Error saving canvas type:', error);
      // You might want to add some error feedback here
    }
  };

  return (
    <div className="flex flex-col h-full overflow-hidden">
      {isEmptyChat && !showAdminTool ? (
        <div className="h-full flex flex-col justify-center">
          <div className="text-center">
            <h3 className="text-lg font-semibold mb-4 text-foreground flex items-center justify-center gap-2">
              {selectedCategory ? (
                <>
                  {selectedCategory === 'research' ? <Search className="h-5 w-5 text-blue-500 dark:text-blue-400" /> :
                   selectedCategory === 'suggest' ? <Lightbulb className="h-5 w-5 text-amber-500 dark:text-amber-400" /> :
                   selectedCategory === 'critique' ? <MessageCircle className="h-5 w-5 text-green-500 dark:text-green-400" /> :
                   <HelpCircle className="h-5 w-5 text-purple-500 dark:text-purple-400" />}
                  {`${selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)} Ideas`}
                </>
              ) : (
                <>
                  <Bot className="h-5 w-5 text-muted-foreground" />
                  'How can I help you today?'
                </>
              )}
            </h3>
            <motion.div
              layout
              className="flex justify-center"
            >
              <AnimatePresence mode="wait">
                {selectedCategory ? (
                  <motion.div
                    key="suggestions"
                    initial={{ opacity: 0, height: "48px", marginBottom: "0.5rem" }}
                    animate={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                    exit={{ opacity: 0, height: "48px", marginBottom: 0 }}
                    transition={{ 
                      height: { duration: 0.3, ease: "easeOut" },
                      opacity: { duration: 0.2 }
                    }}
                    className="flex flex-col gap-2 max-w-sm mx-auto overflow-hidden"
                    style={{ minHeight: "48px" }}
                  >
                    {suggestions[selectedCategory as keyof typeof suggestions].map((suggestion: any, index: number) => (
                      <motion.div
                        key={suggestion.section.name + suggestion.action}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}
                      >
                        <Button
                          variant="outline"
                          className="w-full text-left justify-start text-muted-foreground hover:text-foreground
                            border-gray-200 dark:border-gray-700 
                            bg-gray-50 dark:bg-gray-900 
                            hover:bg-gray-100 dark:hover:bg-gray-800"
                          onClick={() => {
                            onActionSelect({
                              message: getMessage(suggestion.action, suggestion.section.name),
                              section: suggestion.section.key,
                              action: suggestion.action
                            })
                          }}
                        >
                          <div className="flex items-center gap-2">
                            <DynamicIcon name={suggestion.section.icon} className="w-4 h-4 text-blue-500 dark:text-blue-400" />
                            {getMessage(suggestion.action, suggestion.section.name)}
                          </div>
                        </Button>
                      </motion.div>
                    ))}
                    <motion.div
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: suggestions[selectedCategory as keyof typeof suggestions].length * 0.1 }}
                    >
                      <Button
                        variant="ghost"
                        className="w-full mt-2 text-muted-foreground"
                        onClick={() => setSelectedCategory(null)}
                      >
                        ← Back
                      </Button>
                    </motion.div>
                  </motion.div>
                ) : (
                  <motion.div
                    key="categories"
                    initial={{ opacity: 0, height: "auto" }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: "48px" }}
                    transition={{ 
                      height: { duration: 0.3, ease: "easeOut" },
                      opacity: { duration: 0.2 }
                    }}
                    className="flex flex-wrap justify-center gap-2"
                    style={{ minHeight: "48px" }}
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-2 text-muted-foreground hover:text-foreground
                        border-gray-200 dark:border-gray-700 
                        bg-gray-50 dark:bg-gray-900 
                        hover:bg-gray-100 dark:hover:bg-gray-800"
                      onClick={() => setSelectedCategory('suggest')}
                    >
                      <Lightbulb className="w-4 h-4  text-amber-500 dark:text-amber-400" />
                      Suggest
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-2 text-muted-foreground hover:text-foreground
                        border-gray-200 dark:border-gray-700 
                        bg-gray-50 dark:bg-gray-900 
                        hover:bg-gray-100 dark:hover:bg-gray-800"
                      onClick={() => setSelectedCategory('critique')}
                    >
                      <MessageCircle className="w-4 h-4  text-green-500 dark:text-green-400" />
                      Critique
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-2 text-muted-foreground hover:text-foreground
                        border-gray-200 dark:border-gray-700 
                        bg-gray-50 dark:bg-gray-900 
                        hover:bg-gray-100 dark:hover:bg-gray-800"
                      onClick={() => setSelectedCategory('research')}
                    >
                      <Search className="w-4 h-4 text-blue-500 dark:text-blue-400" />
                      Research
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-2 text-muted-foreground hover:text-foreground
                        border-gray-200 dark:border-gray-700 
                        bg-gray-50 dark:bg-gray-900 
                        hover:bg-gray-100 dark:hover:bg-gray-800"
                      onClick={() => setSelectedCategory('question')}
                    >
                      <HelpCircle className="w-4 h-4 text-purple-500 dark:text-purple-400" />
                      Question Me
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-2 text-muted-foreground hover:text-foreground
                        border-gray-200 dark:border-gray-700 
                        bg-gray-50 dark:bg-gray-900 
                        hover:bg-gray-100 dark:hover:bg-gray-800"
                      onClick={() => {
                        setShowAdminTool(true)
                        setSelectedCategory(null)
                      }}
                    >
                      <Shield className="w-4 h-4 text-muted-foreground" />
                      Admin
                    </Button>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          </div>
        </div>
      ) : (
        <>
          <ScrollArea className="flex-1">
            <div className="p-4 space-y-4">
              {messages.map((message, messageIndex) => (
        <div key={messageIndex} className={`flex gap-2 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
          {message.role === 'assistant' && (
            <div className="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
              <Bot className="w-5 h-5 text-blue-600 dark:text-blue-300" />
            </div>
          )}
          <div className={`max-w-[600px] rounded-lg p-3 ${
            message.role === 'user' 
              ? 'bg-muted text-mut-foreground dark:bg-secondary dark:text-secondary-foreground' 
              : message.role === 'assistant'
              ? 'bg-blue-100 text-blue-900 dark:bg-blue-900 dark:text-blue-100'
              : 'bg-destructive/50 text-destructive-foreground'
          }`}>
            {message.role === 'error' ? (
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-destructive" />
                <span>{message.content}</span>
              </div>
            ) : (
              <ReactMarkdown className="prose dark:prose-invert prose-sm">
                {message.content}
              </ReactMarkdown>
            )}
            
            {(message as AdminMessage).canvasTypeSuggestions && (
              <div className="mt-4 space-y-3">
                <h4 className="font-medium text-sm">Suggested Canvas Types:</h4>
                {(message as AdminMessage).canvasTypeSuggestions?.map((suggestion, index) => (
                  <div key={index} className="bg-background/50 rounded-md p-3 space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        {/* <DynamicIcon name={suggestion.icon} className="w-5 h-5" /> */}
                        <h5 className="font-medium">name:{suggestion.name}</h5>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleSaveCanvasType(suggestion)}
                        className="text-blue-500 hover:text-blue-600"
                      >
                        Save Canvas Type
                      </Button>
                    </div>
                    <p className="text-sm text-muted-foreground">{suggestion.description}</p>
                    <div className="text-sm">
                      <strong className="text-foreground">Rationale:</strong> {suggestion.rationale}
                    </div>
                    
                    {suggestion.sections && suggestion.sections.length > 0 && (
                      <div className="mt-3">
                        <h6 className="font-medium text-sm mb-2">Sections:</h6>
                        <div className="grid grid-cols-2 gap-2">
                          {suggestion.sections.map((section, sIdx) => (
                            <div key={sIdx} className="bg-background/30 p-2 rounded-md">
                              <div className="flex items-center gap-2 mb-1">
                                <DynamicIcon name={section.icon} className="w-4 h-4" />
                                <span className="font-medium text-sm">{section.name}</span>
                              </div>
                              <p className="text-xs text-muted-foreground">{section.placeholder}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {suggestion.defaultLayout && (
                      <div className="mt-2 text-sm">
                        <strong className="text-foreground">Layout:</strong> {suggestion.defaultLayout.name}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}

            {message.suggestions && (
              <div className="mt-2">
                <AnimatePresence initial={false}>
                  {message.suggestions.map((suggestion, index) => (
                    <motion.div
                      key={suggestion.id || index}
                      initial={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                      animate={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                      exit={{ opacity: 0, height: 0, marginBottom: 0 }}
                      transition={{ duration: 0.2, ease: "easeOut" }}
                    >
                      <AISuggestionItem   
                        suggestion={suggestion}
                        onLike={() => onSuggestionAdd(messageIndex, suggestion.section, suggestion.suggestion, suggestion.rationale, suggestion.id)}
                        onDismiss={() => onSuggestionDismiss(messageIndex, suggestion.id)}
                        onExpand={() => onSuggestionExpand(suggestion)}
                      />
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            )}

            {message.questions && (
              <motion.div
                key="questions"
                initial={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                animate={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                exit={{ opacity: 0, height: 0, marginBottom: 0 }}
                transition={{ duration: 0.2, ease: "easeOut" }}
              >
                {message.questions.map((question: any, index: number) => (
                  <AIQuestionItem
                    key={index}
                    question={question}
                    onSubmit={onQuestionSubmit}
                  />
                ))}
              </motion.div>
            )}
          </div>
          {message.role === 'user' && (
            <div className="w-8 h-8 rounded-full bg-secondary dark:bg-secondary flex items-center justify-center">
              <User className="w-5 h-5 text-secondary-foreground dark:text-secondary-foreground" />
            </div>
          )}
        </div>
      ))}
      {isLoading && (
        <div className="flex gap-2">
          <div className="w-6 h-6 rounded-full bg-muted flex items-center justify-center">
            <Bot className="w-4 h-4 text-muted-foreground" />
          </div>
          <AIThinkingIndicator />
        </div>
      )}
      <div ref={messagesEndRef} />
    </div>
  </ScrollArea>
  <div className="flex-shrink-0 flex flex-col">
    {showAdminTool ? (
      <AdminButtonBar activeTool={activeTool} onToolSelect={(tool) => {
        onAdminToolSelect(tool)
        if(!tool) {
          setShowAdminTool(false)
        }
      }} />
    ) : (
      <>
        <SectionButtons 
          activeSection={activeSection}
          onSectionSelect={onSectionSelect}
        />
        <div className={`transition-all duration-200 ease-in-out overflow-hidden ${
          activeSection 
            ? 'opacity-100 h-12 translate-y-0' 
            : 'opacity-0 h-0 translate-y-2 pointer-events-none'
        }`}>
          <ActionButtons
            onActionSelect={(action) => {
              if(activeSection) {
                onActionSelect({
                  message: getMessage(action, sectionsMap[activeSection as keyof typeof sectionsMap].name),
                  section: activeSection,
                  action: action
                })
              }
            }}
          />
        </div>
      </>
    )}
  </div>
        </>
      )}
    </div>
  )
}import React from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Send } from 'lucide-react'
import { SectionButtons } from './SectionButtons'
import { ActionButtons } from './ActionButtons'
import { useSidebar } from '../ui/sidebar'

interface ChatInputProps {
  input: string
  isLoading: boolean
  onInputChange: (value: string) => void
  onSend: () => void
  onSectionSelect: (section: string | null) => void
  onActionSelect: (action: string) => void
}

export function ChatInput({ 
  input, 
  isLoading, 
  onInputChange, 
  onSend,
}: ChatInputProps) {
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSend()
  }
  const { open } = useSidebar()
  return (
    <div className="flex-shrink-0">
      
      <div className="p-2">
        <form onSubmit={handleSubmit} className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => onInputChange(e.target.value)}
            placeholder={open ? "Type your message..." : "Chat..."}
            className="flex-grow bg-background border-input text-foreground placeholder:text-muted-foreground"
          />
          <Button 
            type="submit" 
            size="icon" 
            disabled={isLoading}
            variant="ghost"
            className="text-muted-foreground hover:text-foreground"
          >
            <Send className="h-4 w-4" />
          </Button>
        </form>
      </div>
    </div>
  )
} 'use client'

import React, { useEffect, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Bot } from 'lucide-react'
import { useChat } from '@/contexts/ChatContext'
import { useSidebar } from '../ui/sidebar'
import { SidebarGroup } from '../ui/sidebar'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import { AIChatArea } from './AIChatArea'
import { useSidebarWidth } from '@/contexts/SIdebarWidthCOntext'
import { SIDEBAR_WIDTH_WIDE } from '@/src/constants/sideBarWidths'

export function SidebarAIChatArea() {
  const { messages, isLoading } = useChat()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const { state, setOpen } = useSidebar()
  const { setSidebarWidth } = useSidebarWidth()

  const setWide = () => {
    setSidebarWidth(SIDEBAR_WIDTH_WIDE)
  }
  
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, isLoading])

  const component =  (
    <div className="h-full flex flex-col">
      {state === 'expanded' ? (
        <AIChatArea />
      ) : (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="w-10 h-10 p-0 text-muted-foreground hover:text-foreground"
              onClick={() => {setOpen(true); setWide();}}
            >
              <Bot className="h-5 w-5 text-muted-foreground" />
              <span className="sr-only">AI Assistant</span>
            </Button>
          </TooltipTrigger>
          <TooltipContent side="right">
            AI Assistant
          </TooltipContent>
        </Tooltip>
      )}
    </div>
  )
  return (<SidebarGroup>  
    {component}
  </SidebarGroup>)
}import { icons } from 'lucide-react';

const DynamicIcon = ({name, className, color, size}: {name: string, className?: string, color?: string, size?: number}) => {
  const LucideIcon = icons[name as keyof typeof icons];

  if (!LucideIcon) {
    // console.warn(`Icon "${name}" not found`);
    //if its a single letter, try and see if its an emoji
    if (name.length === 1 && name.match(/^[a-zA-Z]$/)) {
      return <span className={className}>{name}</span>;
    }
    return null;
  }

  return <LucideIcon className={className} color={color} size={size}/>;
};

export default DynamicIcon;"use client"

import * as React from "react"
import { Canvas } from "./Canvas/Canvas"
import { AppSidebar } from "./Sidebar/Sidebar"
import { useAuth } from '@/contexts/AuthContext';
import { AuthDialog } from './auth/AuthDialog';
import { CanvasProvider, useCanvas } from "@/contexts/CanvasContext";
import { CanvasTypeSelector } from "./CanvasTypeSelector";
import { NewCanvasProvider, useNewCanvas } from "@/contexts/NewCanvasContext";
import { UserCanvasSelector } from "./UserCanvasSelector";
import { SidebarProvider } from "./ui/sidebar";

export function BusinessModelCanvasComponent() {
  const { user } = useAuth();
  const { currentCanvas, userCanvases } = useCanvas();
  const { newCanvas } = useNewCanvas();
  
  const [showAuthDialog, setShowAuthDialog] = React.useState(false);

  const handleSave = React.useCallback(async () => {
    if (!user) {
      setShowAuthDialog(true);
      return;
    }
  }, [user]);
  console.log('newCanvas', newCanvas);
  return (
    <>
          {currentCanvas ? (
            <div className="flex h-full bg-white">
                <AppSidebar setShowAuthDialog={setShowAuthDialog} />
              <Canvas/>  
          </div>
          ) : newCanvas || !userCanvases || userCanvases.length === 0 ? (
            <div className="flex h-full bg-white">
                <AppSidebar setShowAuthDialog={setShowAuthDialog} />
              <CanvasTypeSelector />
            </div>
          ) : (
            <div className="flex h-full bg-white">
                <AppSidebar setShowAuthDialog={setShowAuthDialog} />
              <UserCanvasSelector />
            </div>
          )}
      <AuthDialog 
        isOpen={showAuthDialog}
        openSignUp={false}
        onClose={() => setShowAuthDialog(false)}
        onSuccess={handleSave}
        />
    </>
  );
}import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useAuth } from '@/contexts/AuthContext';

interface AuthDialogProps {
  isOpen: boolean;
  openSignUp: boolean;
  onClose: () => void;
  onSuccess: () => void;
  initialEmail?: string;
}

export function AuthDialog({ isOpen, openSignUp, onClose, onSuccess, initialEmail }: AuthDialogProps) {

  const [isSignUp, setIsSignUp] = React.useState(openSignUp);
  const [email, setEmail] = React.useState(initialEmail || '');
  const [password, setPassword] = React.useState('');
  const [error, setError] = React.useState('');
  const [verificationSent, setVerificationSent] = React.useState(false);
  const [isResetting, setIsResetting] = React.useState(false);
  const { signUp, signIn, sendVerificationEmail, resetPassword } = useAuth();

  React.useEffect(() => {
    setIsSignUp(openSignUp);
  }, [openSignUp]);

  React.useEffect(() => {
    if (initialEmail) {
      setEmail(initialEmail);
    }
  }, [initialEmail]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      if (isSignUp) {
        const user = await signUp(email, password);
        setVerificationSent(true);
      } else {
        const user = await signIn(email, password);
        if (!user.emailVerified) {
          setError('Please verify your email before signing in');
          return;
        }
        onSuccess();
        onClose();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  const handleResendVerification = async () => {
    try {
      await sendVerificationEmail();
      setError('Verification email resent');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to resend verification email');
    }
  };

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      await resetPassword(email);
      setError('Password reset email sent. Please check your inbox.');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to send reset email');
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{isSignUp ? 'Create an account' : 'Sign in'}</DialogTitle>
          <DialogDescription>
            {isSignUp 
              ? 'Create an account to save your business model canvas'
              : ''}
          </DialogDescription>
        </DialogHeader>
        {isSignUp ?
        <form 
          onSubmit={handleSubmit} 
          className="space-y-4" 
          method="post"
          autoComplete="on"
          name="signup"
        >
          <Input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            id="email"
            name="email"
            autoComplete="username"
          />

          <div>
            <Input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              id="password"
              name="password"
              autoComplete="new-password"
              minLength={8}
              aria-label="Create password"
            />
          </div>
          {error && <p className="text-sm text-red-500">{error}</p>}
          <div className="flex flex-col gap-2">
            <Button type="submit">
              {isSignUp ? 'Sign up' : 'Sign in'}
            </Button>
            <Button 
              type="button" 
              variant="ghost"
              onClick={() => setIsSignUp(!isSignUp)}
            >
              {"Already have an account? Sign in"}
            </Button>
          </div>
        </form>
        :
        <form 
          onSubmit={handleSubmit} 
          className="space-y-4" 
          method="post"
          autoComplete="on"
          name={isSignUp ? "signup" : "login"}
        >
          <Input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            id="email"
            name="email"
            autoComplete="username"
          />

          <div>
            <Input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              id="password"
              name="password"
              autoComplete="current-password"
              aria-label="Enter password"
            />
          </div>
          {error && <p className="text-sm text-red-500">{error}</p>}
          <div className="flex flex-col gap-2">
            <Button type="submit">
              {"Sign in"}
            </Button>
            <Button 
              type="button" 
              variant="ghost"
              onClick={() => setIsSignUp(!isSignUp)}
            >
              {"Don't have an account? Sign up"}
            </Button>
            <Button
              type="button"
              variant="link"
              onClick={handleResetPassword}
              className="text-sm text-blue-500 hover:text-blue-600"
            >
              Forgot password?
            </Button>
          </div>
        </form>
        }
      </DialogContent>
    </Dialog>
  );
} 'use client'

import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { CanvasLayout, CanvasLayoutDetails, CanvasType } from "@/types/canvas-sections"
import DynamicIcon from "./Util/DynamicIcon"

interface LayoutSelectorProps {
  layouts: CanvasLayoutDetails[]
  selectedLayout: CanvasLayoutDetails | null
  onSelect: (layout: CanvasLayoutDetails) => void
  canvasType: CanvasType | null
}

export function LayoutSelector({ layouts, selectedLayout, onSelect, canvasType }: LayoutSelectorProps) {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
      {layouts.map((layout) => (
        <Button
          key={layout.id}
          variant={selectedLayout?.id === layout.id ? "default" : "outline"}
          className={`h-[250px] p-4 relative ${
            selectedLayout?.id === layout.id 
              ? 'ring-2 ring-primary ring-offset-2'
              : 'hover:border-primary/50'
          }`}
          onClick={() => onSelect(layout)}
        >
          <div 
            className={`absolute inset-1 rounded-lg ${
              selectedLayout?.id === layout.id
                ? 'border-primary/30'
                : 'border-muted-foreground/20'
            }`}
            style={{
              display: 'grid',
              gridTemplateColumns: layout.layout.gridTemplate.columns,
              gridTemplateRows: layout.layout.gridTemplate.rows,
              gap: '0.5rem',
              padding: '0.5rem',
            }}
          >
            {canvasType && layout.layout.areas.map((area, index) => {
              const [row, col, rowSpan, colSpan] = area.split('/').map(n => n.trim());
              const sectionData = canvasType.sections[index];
              
              if (!sectionData) return null;
              
              return (
                <div
                  key={index}
                  className={`flex items-center justify-center gap-2 rounded-md border-2 border-dashed ${
                    selectedLayout?.id === layout.id
                      ? 'border-primary/20 bg-primary/5'
                      : 'border-muted-foreground/10 bg-muted/5'
                  }`}
                  style={{
                    gridArea: `${row} / ${col} / ${rowSpan} / ${colSpan}`,
                  }}
                >
                  {sectionData && (
                    <div className="flex items-center justify-center flex-wrap gap-1">
                      <DynamicIcon 
                        name={sectionData.icon} 
                        className={`w-4 h-4 ${
                          selectedLayout?.id === layout.id
                            ? 'text-primary'
                            : 'text-muted-foreground'
                        }`}
                      />
                      <span className={`text-xs text-center ${
                        selectedLayout?.id === layout.id
                          ? 'text-primary'
                          : 'text-muted-foreground'
                      }`}>
                        {sectionData.name}
                      </span>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Button>
      ))}
    </div>
  )
}

'use client'

import { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Button } from "@/components/ui/button"
import { CanvasType, CanvasLayout, CanvasLayoutDetails, compareLayouts } from "@/types/canvas-sections"
import { useCanvas } from "@/contexts/CanvasContext"
import { NewCanvasDialog } from "./NewCanvasDialog"
import { LayoutSelector } from "./LayoutSelector"
import { TypeIcon as type, LucideIcon, XIcon, AlertCircle } from 'lucide-react'
import { useTheme } from "next-themes"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import DynamicIcon from "./Util/DynamicIcon"
import { useLayouts } from "@/contexts/LayoutContext"
import { useCanvasTypes } from "@/contexts/CanvasTypeContext"
import { useNewCanvas } from "@/contexts/NewCanvasContext"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { TAG_INFO } from "@/src/constants/tags"

export function CanvasTypeSelector() {
  const { selectedType: initialType, setSelectedType } = useNewCanvas();
  const [selectedType, setSelectedTypeLocal] = useState<CanvasType | null>(initialType);
  const [selectedLayout, setSelectedLayout] = useState<CanvasLayoutDetails | null>(null)
  const [showDialog, setShowDialog] = useState(false)
  const { theme } = useTheme()
  const { userCanvases } = useCanvas()
  const containerRef = useRef<HTMLDivElement>(null)
  const { getLayoutsForSectionCount } = useLayouts()
  const { getCanvasTypes } = useCanvasTypes()
  const [compatibleLayouts, setCompatibleLayouts] = useState<CanvasLayoutDetails[]>([])
  const [canvasTypes, setCanvasTypes] = useState<Record<string, CanvasType>>({})
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  
  useEffect(() => {
    getCanvasTypes().then((types) => {
        //for each type, type set its id as the key
        const typs = Object.entries(types).map(([key, type]) => ({
          ...type,
          id: key
        }))
        let record = typs.reduce((acc, type) => {   
          acc[type.id] = type;
          return acc;
        }, {} as Record<string, CanvasType>);
        setCanvasTypes(record)    
        console.log("canvasTypes in useEffect", canvasTypes)
    })
  }, [getCanvasTypes])

  useEffect(() => {
    if (selectedType) {
      const fetchLayouts = async () => {
        // Get base layouts for this section count
        const layouts = await getLayoutsForSectionCount(selectedType.sections.length);
        
        // Create a new array with default layout if it exists
        let allLayouts = [...layouts];
        if (selectedType.defaultLayout) {
          allLayouts = [
            {
              id: `${selectedType.id}-default`,
              layout: selectedType.defaultLayout.layout,
              name: 'Default Layout',
              sectionCount: selectedType.sections.length,
              description: 'Default layout for this canvas type'
            },
            ...layouts
          ];
        }
        
        setCompatibleLayouts(allLayouts);
        
        // Set default layout as selected if no layout is currently selected
        if (!selectedLayout && selectedType.defaultLayout) {
          setSelectedLayout(allLayouts[0]);
        }
      };
      fetchLayouts();
    } else {
      // Clear compatible layouts when no type is selected
      setCompatibleLayouts([]);
      setSelectedLayout(null);
    }
  }, [selectedType, getLayoutsForSectionCount]);

  useEffect(() => {
    setSelectedType(selectedType);
  }, [selectedType, setSelectedType]);

  const handleCanvasTypeSelect = (canvasType: CanvasType) => {
    if (selectedType === canvasType) {
      setSelectedTypeLocal(null);
      setSelectedLayout(null);
      setCompatibleLayouts([]);
    } else {
      setSelectedTypeLocal(canvasType);
    }
  }

  const handleLayoutSelect = (layout: CanvasLayoutDetails) => {
    setSelectedLayout(layout)
}

  useEffect(() => {
    if (selectedType && containerRef.current) {
      containerRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })
    }
  }, [selectedType])

  console.log("canvasTypes in CanvasTypeSelector", canvasTypes)

  const handleTagSelect = (tagName: string) => {
    setSelectedTags(prev => 
      prev.includes(tagName) 
        ? prev.filter(t => t !== tagName)
        : [...prev, tagName]
    );
  };

  const getAvailableTags = () => {
    const availableTags = new Set<string>();
    Object.values(canvasTypes).forEach(type => {
      type.tags?.forEach(tag => availableTags.add(tag));
    });
    return TAG_INFO.filter(tag => availableTags.has(tag.name));
  };

  return (
    <div className="flex flex-col items-center gap-8 bg-background w-full h-screen overflow-hidden">
      <div className="h-[200px]">
        <AnimatePresence mode="wait">
          {!selectedType ? (
            <motion.div
              key="header"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="text-center space-y-4 w-full p-8 h-full"
            >
              <div className="max-w-[800px] mx-auto">
                <h2 className="text-3xl font-bold tracking-tight text-foreground">
                  Create Your {userCanvases && userCanvases.length > 0 ? 'Next' : 'First'} Canvas
                </h2>
                <p className="text-muted-foreground">
                  Choose a canvas type to get started. Each canvas is designed to help you visualize and develop different aspects of your business.
                </p>
              </div>
              <div className="flex flex-wrap gap-2 justify-center mt-4 max-w-[1200px] mx-auto">
                {getAvailableTags().map(({ name, color }) => (
                  <button
                    key={name}
                    onClick={() => handleTagSelect(name)}
                    className={`
                      px-3 py-1 rounded-full text-sm font-medium
                      transition-colors duration-200
                      ${selectedTags.includes(name) 
                        ? color
                        : 'bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-gray-200'
                      }
                    `}
                  >
                    {name}
                  </button>
                ))}
              </div>
            </motion.div>
          ) : (
            <motion.div
              key="selected-type"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="w-full max-w-[600px] p-8 h-full"
            >
              <div className="flex flex-col items-center gap-4">
                <CanvasTypeIcon icon={selectedType.icon} theme={theme} />
                <div className="space-y-2 text-center">
                  <h3 className="text-2xl font-semibold text-foreground">{selectedType.name}</h3>
                  <p className="text-sm text-muted-foreground">
                    {selectedType.description}
                  </p>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSelectedTypeLocal(null);
                    setSelectedLayout(null);
                  }}
                  className="mt-2"
                >
                  <XIcon className="w-4 h-4 mr-2" />
                  Choose Different Type
                </Button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {!selectedType ? (
        <ScrollArea className="w-full flex-1">
          <div className="relative flex flex-wrap gap-6 w-full justify-center p-6">
            <AnimatePresence>
              {Object.entries(canvasTypes)
                .filter(([_, type]) => 
                  selectedTags.length === 0 || 
                  type.tags?.some(tag => selectedTags.includes(tag))
                )
                .map(([key, type]) => (
                <motion.div
                  key={key}
                  layout
                  initial={{ opacity: 1, scale: 1 }}
                  animate={{
                    opacity: selectedType ? (selectedType === type ? 1 : 0.5) : 1,
                    scale: selectedType === type ? 1.05 : 1,
                    zIndex: selectedType === type ? 10 : 1,
                  }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  transition={{ duration: 0.5, ease: "easeInOut" }}
                  style={{
                    width: 510,
                    height: 'auto',
                  }}
                >
                  <div
                    className={`h-full p-8 flex flex-col items-center gap-4 w-full bg-background hover:bg-muted cursor-pointer border rounded-md relative ${
                      selectedType === type ? 'shadow-lg' : ''
                    }`}
                    onClick={() => handleCanvasTypeSelect(type)}
                  >
                    <CanvasTypeIcon icon={type.icon} theme={theme} />
                    <div className="space-y-2 text-center">
                      <h3 className="font-semibold text-foreground">{type.name}</h3>
                      <p className="text-sm text-muted-foreground overflow-hidden text-ellipsis line-clamp-4">
                        {type.description}
                      </p>
                    </div>
                    
                    {type.tags && type.tags.length > 0 && (
                      <div className="flex flex-wrap gap-1 justify-center">
                        {type.tags.map(tagName => {
                          const tagInfo = TAG_INFO.find(t => t.name === tagName);
                          return tagInfo && (
                            <span
                              key={tagName}
                              className={`px-1.5 py-0.5 rounded-full text-[10px] font-medium ${tagInfo.color}`}
                            >
                              {tagName}
                            </span>
                          );
                        })}
                      </div>
                    )}

                    {type.defaultLayout && (
                      <div 
                        className="grid gap-1 p-2 border rounded-md w-full mt-2"
                        style={{
                          gridTemplateColumns: type.defaultLayout.layout.gridTemplate.columns,
                          gridTemplateRows: type.defaultLayout.layout.gridTemplate.rows,
                          minHeight: '250px'
                        }}
                      >
                        {type.defaultLayout.layout.areas.map((area, index) => {
                          const [row, col, rowSpan, colSpan] = area.split('/').map(n => n.trim());
                          return (
                            <div
                              key={index}
                              className="flex items-center justify-center border-2 border-dashed h-full"
                              style={{
                                gridArea: `${row} / ${col} / ${rowSpan} / ${colSpan}`,
                              }}
                            >
                              {/* Optionally, you can add an icon or text here */}
                            </div>
                          );
                        })}
                      </div>
                    )}

                    {selectedType === type && (
                      <Button
                        variant="outline"
                        size="icon"
                        className="absolute top-2 right-2"
                        onClick={(e) => {
                          e.stopPropagation()
                          setSelectedType(null)
                          setSelectedLayout(null)
                        }}
                      >
                        <XIcon className="w-4 h-4" />
                        <span className="sr-only">Close</span>
                      </Button>
                    )}
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
          </div>
        </ScrollArea>
      ) : (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="w-full flex-1 overflow-auto p-8"
        >
          <LayoutSelector
            layouts={compatibleLayouts}
            selectedLayout={selectedLayout}
            onSelect={handleLayoutSelect}
            canvasType={selectedType}
          />
        </motion.div>
      )}

      {selectedType && selectedLayout && (
        <>
          <Button 
            className="mb-8"
            size="lg"
            onClick={() => setShowDialog(true)}
          >
            Create Canvas
          </Button>
          <NewCanvasDialog
            open={showDialog}
            onOpenChange={setShowDialog}
            canvasType={selectedType || "businessModel"}
            layout={selectedLayout.layout}
          />
        </>
      )}
    </div>
  )
}

function CanvasTypeIcon({ icon, theme }: { icon: string; theme?: string }) {
  return (
    <div className="w-12 h-12 rounded-full bg-muted flex items-center justify-center">
      <DynamicIcon name={icon} className="w-6 h-6 text-foreground" />
    </div>
  )
}
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider, type ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return (
    <NextThemesProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      disableTransitionOnChange
      {...props}
    >
      {children}
    </NextThemesProvider>
  )
} 'use client'

import { AuthProvider as AuthContextProvider } from '@/contexts/AuthContext'

export function AuthProvider({ children }: { children: React.ReactNode }) {
  return <AuthContextProvider>{children}</AuthContextProvider>
} 'use client'

import { AuthProvider } from './AuthProvider'
import { ThemeProvider } from './ThemeProvider'
import { SidebarProvider } from '../ui/sidebar'
import { CanvasFoldersProvider } from '@/contexts/CanvasFoldersContext'
export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <AuthProvider>
      <CanvasFoldersProvider>
            {children}
      </CanvasFoldersProvider>
    </AuthProvider>
  )
} 'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Send } from 'lucide-react'
import { useCanvas } from '@/contexts/CanvasContext'

interface DynamicInputProps {
    onSubmit: (value: string) => void
    onCancel?: () => void
    placeholder?: string
    initialValue?: string
    isEditing?: boolean
  }
  
  export function DynamicInput({ 
    placeholder = 'Type something...',
    onSubmit, 
    onCancel, 
    initialValue = '', 
    isEditing = false 
  }: DynamicInputProps) {
    const [inputValue, setInputValue] = useState(initialValue)
    const [isExpanded, setIsExpanded] = useState(!!initialValue)
    const [isFocused, setIsFocused] = useState(false)
    const [showButton, setShowButton] = useState(false)
    const textareaRef = useRef<HTMLTextAreaElement>(null)
    const { canvasTheme } = useCanvas()
  
    // Update input value when initialValue changes
    useEffect(() => {
      setInputValue(initialValue)
      setIsExpanded(!!initialValue)
      if (initialValue && textareaRef.current) {
        textareaRef.current.focus()
      }
    }, [initialValue])
  
    useEffect(() => {
      if (isExpanded && textareaRef.current) {
        textareaRef.current.focus()
      }
    }, [isExpanded])
  
    useEffect(() => {
      let timer: NodeJS.Timeout
      if (isExpanded) {
        timer = setTimeout(() => setShowButton(true), 300)
      } else {
        setShowButton(false)
      }
      return () => clearTimeout(timer)
    }, [isExpanded])
  
    const handleSubmit = () => {
      if (inputValue.trim()) {
        onSubmit(inputValue.trim())
        setInputValue('')
        setIsExpanded(false)
      }
    }
  
    const handleCancel = () => {
      setInputValue('')
      setIsExpanded(false)
      onCancel?.()
    }
  
    const handleKeyDown = (e: React.KeyboardEvent) => {
      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        handleSubmit()
      } else if (e.key === 'Escape' && onCancel) {
        e.preventDefault()
        handleCancel()
      }
    }
  
    return (
      <div 
        className="w-full"
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => {
          if (!inputValue && !isFocused) {
            setIsExpanded(false)
          }
        }}
      >
        <div className={`relative transition-all duration-300 ease-in-out`}>
          <Textarea
            ref={textareaRef}
            canvasTheme={canvasTheme}
            className={`w-full resize-none transition-all duration-300 ease-in-out ${
              isExpanded 
                ? 'h-32 pb-12' 
                : 'h-10 overflow-hidden text-ellipsis whitespace-nowrap'
            }`}
            placeholder={isExpanded ? placeholder : isEditing ? "Edit item..." : placeholder.split('\n')[0]}
            value={inputValue}
            onChange={(e) => {
              setInputValue(e.target.value)
              setIsExpanded(true)
            }}
            onKeyDown={handleKeyDown}
            onFocus={() => {
              setIsExpanded(true)
              setIsFocused(true)
            }}
            onBlur={() => {
              setIsFocused(false)
              if (!inputValue) {
                setIsExpanded(false)
              }
            }}
          />
          {isExpanded && (
            <div 
              className={`absolute right-2 bottom-2 flex items-center gap-2 transition-opacity duration-300 ease-in-out ${
                showButton ? 'opacity-100' : 'opacity-0'
              }`}
            >
              {onCancel && (
                <Button 
                  size="sm"
                  variant="outline"
                  onClick={handleCancel}
                  aria-label="Cancel"
                  className="py-1 h-7"
                >
                  Cancel
                </Button>
              )}
              <Button 
                size="sm"
                onClick={handleSubmit}
                disabled={!inputValue.trim()}
                aria-label={isEditing ? "Save changes" : "Add item"}
                className="py-1 h-7"
              >
                <Send className="h-4 w-4 mr-2" />
                {isEditing ? 'Save' : 'Send'}
              </Button>
            </div>
          )}
        </div>
      </div>
    )
  }import React from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { ScrollArea } from '@/components/ui/scroll-area'
import QuestionAnswerItem from './QuestionAnswerItem'
import { useCanvas } from '@/contexts/CanvasContext'

interface QuestionsDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  questions: any[]
  onDelete: (index: number) => void
  onEdit: (index: number, updatedQuestion: any) => void
  sectionTitle: string
}

export function QuestionsDialog({
  open,
  onOpenChange,
  questions,
  onDelete,
  onEdit,
  sectionTitle
}: QuestionsDialogProps) {
  const { canvasTheme } = useCanvas()

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent 
        canvasTheme={canvasTheme}
        className={`max-w-2xl max-h-[80vh] flex flex-col ${
          canvasTheme === 'light' 
            ? 'bg-white text-gray-900 border-gray-200'
            : 'bg-gray-950 text-gray-50 border-gray-800'
        }`}
      >
        <DialogHeader>
          <DialogTitle className={
            canvasTheme === 'light' ? 'text-gray-900' : 'text-gray-50'
          }>
            {sectionTitle} Questions & Answers
          </DialogTitle>
        </DialogHeader>
        <ScrollArea className="flex-1 pr-4">
          {questions.map((qa, index) => (
            <QuestionAnswerItem 
              key={index}
              question={qa}
              onEdit={() => onEdit(index, qa)}
              onDelete={() => onDelete(index)}
              canvasTheme={canvasTheme}
            />
          ))}
        </ScrollArea>
      </DialogContent>
    </Dialog>
  )
} 'use client'

import React from 'react'
import { Button } from '@/components/ui/button'
import { 
  Sparkles,
  Lightbulb,
  MessageCircle
} from 'lucide-react'
import { useChat } from '@/contexts/ChatContext'
import { Message } from '@/contexts/ChatContext'
import { useCanvas } from '@/contexts/CanvasContext'
import { sendChatRequest } from '@/services/aiService'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

const actions = [
  { key: 'suggestEdit', label: 'Suggest Edit', icon: Lightbulb },
  { key: 'critique', label: 'Critique', icon: MessageCircle }
]

interface AIItemAssistButtonProps {
  section: string
  sectionKey: string
  onExpandSidebar: () => void
  onDropdownStateChange: (isOpen: boolean) => void
}

export function AIItemAssistButton({ 
  section, 
  sectionKey, 
  onExpandSidebar,
  onDropdownStateChange 
}: AIItemAssistButtonProps) {
  const { setIsLoading, addMessages, isLoading, messages } = useChat()
  const { formData, canvasTheme, aiAgent } = useCanvas()

  const handleAction = async (action: string) => {
    onExpandSidebar()
    const actionMessage = action === 'question' 
      ? `Question me about ${section}` 
      : action === 'critique' 
      ? `Critique the ${section}` 
      : action === 'research' 
      ? `Research the ${section}` 
      : `Suggest things for ${section}`

    const message = {
      role: 'user',
      content: actionMessage,
      action: action
    } as Message

    const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]
    const updatedMessages = [...currentMessages, message]
    
    await addMessages(updatedMessages)
    setIsLoading(true)
    try {
      if(!aiAgent) {
        throw new Error('No AI agent found')
      }
      const aiResponse = await sendChatRequest(updatedMessages, formData, aiAgent)
      const formattedResponse: Message = {
        role: 'assistant',
        content: aiResponse.content || '',
        suggestions: aiResponse.suggestions?.map((suggestion: any) => ({
          id: suggestion.id,
          section: suggestion.section || sectionKey,
          suggestion: suggestion.suggestion,
          rationale: suggestion.rationale
        })),
        questions: aiResponse.questions?.map((question: any) => ({
          id: question.id,
          section: sectionKey,
          question: question.question,
          type: question.type || 'open',
          options: question.options || [],
          scale: question.scale || null
        }))
      }
      addMessages([...updatedMessages, formattedResponse])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...updatedMessages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <DropdownMenu 
    onOpenChange={onDropdownStateChange}>
      <DropdownMenuTrigger 
        asChild
      >
        <Button 
          variant="outline"
          size="icon"
          canvasTheme={canvasTheme}
          className="ml-2"
        >
          <Sparkles className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent 
        canvasTheme={canvasTheme}
        align="end" 
        className={`w-48`}
      >
        {actions.map(({ key, label, icon: Icon }) => (
          <DropdownMenuItem
            canvasTheme={canvasTheme}
            key={key}
            onClick={() => handleAction(key)}
            className={`cursor-pointer flex items-center gap-2`}

          >
            <Icon className={`h-4 w-4 ${
              canvasTheme === 'light'
                ? 'text-gray-600'
                : 'text-gray-400'
            }`} />
            {label}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
} import React from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog'
import { Pencil } from 'lucide-react'
import { Textarea } from '@/components/ui/textarea'
import { DialogClose } from '@radix-ui/react-dialog'
import { useCanvas } from '@/contexts/CanvasContext'

export function CompanyEditDialog() {
  const { formData, updateField } = useCanvas();
  const [tempName, setTempName] = React.useState(formData.name || '')
  const [tempDescription, setTempDescription] = React.useState(formData.description || '')
  const [isValid, setIsValid] = React.useState(true)

  const handleSave = () => {
    if (!tempName.trim()) {
      setIsValid(false)
      return
    }
    updateField('name', tempName)
    updateField('description', tempDescription)
  }

  const handleOpenChange = (open: boolean) => {
    if (open) {
      setTempName(formData.name || '')
      setTempDescription(formData.description || '')
      setIsValid(true)
    }
  }

  return (
    <Dialog onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Pencil className="h-4 w-4" />
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Company Details</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col gap-4">
          <div>
            <Input
              placeholder="Company Name"
              value={tempName}
              onChange={(e) => {
                setTempName(e.target.value)
                setIsValid(!!e.target.value.trim())
              }}
              className={!isValid ? 'border-red-500' : ''}
            />
            {!isValid && (
              <p className="text-sm text-red-500 mt-1">Company name cannot be empty</p>
            )}
          </div>
          <Textarea
            placeholder="Company Description"
            value={tempDescription}
            onChange={(e) => setTempDescription(e.target.value)}
            className="min-h-[100px]"
          />
          <DialogFooter>
            <DialogClose asChild>
              <Button onClick={handleSave}>
                Save Changes
              </Button>
            </DialogClose>
          </DialogFooter>
        </div>
      </DialogContent>
    </Dialog>
  )
} 'use client'

import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Undo2, Save, Grid2x2 } from 'lucide-react';
import { useCanvas } from '@/contexts/CanvasContext';
import { CanvasLayout, compareLayouts } from '@/types/canvas-sections';
import { motion } from 'framer-motion';
import { CanvasTypeService } from '@/services/canvasTypeService';
import { CanvasLayoutDetails } from '@/types/canvas-sections';
import { useLayouts } from '@/contexts/LayoutContext';
import DynamicIcon from '../Util/DynamicIcon';

interface LayoutItem {
  id: string;
  content: string;
  icon: string;
  gridArea: string;
  sectionKey: string;
  gridIndex: number;
}

interface GridItemProps {
  item: LayoutItem;
  canvasTheme?: string;
  isHighlighted: boolean;
  onDragStart: (id: string) => void;
  onDragEnter: (id: string) => void;
  onDragEnd: () => void;
}

function GridItem({ 
  item, 
  canvasTheme,
  isHighlighted,
  onDragStart,
  onDragEnter,
  onDragEnd,
}: GridItemProps) {
  return (
    <div
      draggable
      onDragStart={() => onDragStart(item.id)}
      onDragEnter={() => onDragEnter(item.id)}
      onDragEnd={onDragEnd}
      onDragOver={(e) => e.preventDefault()}
      style={{ gridArea: item.gridArea }}
      className={`
        p-4 rounded-lg border flex flex-col
        transition-colors duration-200 cursor-grab active:cursor-grabbing
        ${isHighlighted ? 'ring-2 ring-primary bg-primary/10' : ''}
        ${canvasTheme === 'dark' 
          ? 'bg-gray-900 border-gray-800 hover:bg-gray-800' 
          : 'bg-white border-gray-200 hover:bg-gray-50'}
      `}
    >
      <div className="flex items-center gap-2">
        <DynamicIcon name={item.icon} className="h-4 w-4 text-muted-foreground" />
        <span className="text-sm font-medium text-muted-foreground">{item.content}</span>
      </div>
    </div>
  );
}

interface LayoutEditorProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export default function LayoutEditor({ open, onOpenChange }: LayoutEditorProps) {
  const { formData, canvasTheme, updateLayout } = useCanvas();
  const currentLayout = formData.canvasLayout;
  const canvasType = formData.canvasType;
  
  const [layoutItems, setLayoutItems] = useState<LayoutItem[]>(() => {
    const sortedSections = Array.from(formData.sections.entries())
      .map(([key, section], index) => ({
        key,
        section,
        gridIndex: section.gridIndex ?? index
      }))
      .sort((a, b) => a.gridIndex - b.gridIndex);
    console.log('sortedSections', sortedSections);
    return sortedSections.map((item, index) => {
      const sectionConfig = canvasType.sections.find(s => s.name === item.section.name);
      return {
        id: `section-${index}`,
        content: sectionConfig?.name || '',
        icon: sectionConfig?.icon || 'QuestionMark',
        gridArea: currentLayout.areas?.[index] || 'auto',
        sectionKey: item.key,
        gridIndex: item.gridIndex
      };
    });
  });

  const [draggedId, setDraggedId] = useState<string | null>(null);
  const [targetId, setTargetId] = useState<string | null>(null);
  const [selectedLayout, setSelectedLayout] = useState<CanvasLayout>(formData.canvasLayout);
  const [availableLayouts, setAvailableLayouts] = useState<CanvasLayoutDetails[]>([]);
  const { getLayoutsForSectionCount, isLoading } = useLayouts();

  useEffect(() => {
    const loadLayouts = async () => {
      const layouts = await getLayoutsForSectionCount(canvasType.sections.length);
      setAvailableLayouts(layouts);
    };

    loadLayouts();
  }, [canvasType.sections.length, getLayoutsForSectionCount]);

  const [gridStyle, setGridStyle] = useState({});

  useEffect(() => {
    setGridStyle({
      gridTemplateColumns: currentLayout.gridTemplate.columns,
      gridTemplateRows: currentLayout.gridTemplate.rows,
    });
  }, [currentLayout]);

  const handleDragStart = (id: string) => {
    setDraggedId(id);
  };

  const handleDragEnter = (id: string) => {
    if (id !== draggedId) {
      setTargetId(id);
    }
  };

  const handleDragEnd = () => {
    if (draggedId && targetId) {
      setLayoutItems((items) => {
        const draggedIndex = items.findIndex(item => item.id === draggedId);
        const targetIndex = items.findIndex(item => item.id === targetId);
        
        const newItems = [...items];
        const draggedGridArea = items[draggedIndex].gridArea;
        const targetGridArea = items[targetIndex].gridArea;
        const draggedGridIndex = items[draggedIndex].gridIndex;
        const targetGridIndex = items[targetIndex].gridIndex;
        
        // Swap grid areas and keep original gridIndex values
        newItems[draggedIndex] = {
          ...items[draggedIndex],
          gridArea: targetGridArea,
          gridIndex: targetGridIndex
        };
        newItems[targetIndex] = {
          ...items[targetIndex],
          gridArea: draggedGridArea,
          gridIndex: draggedGridIndex
        };
        
        return newItems;
      });
    }
    
    setDraggedId(null);
    setTargetId(null);
  };

  const handleLayoutSelect = (layout: CanvasLayout) => {
    setSelectedLayout(layout);
    const newLayout = layout;
    
    // Maintain existing section order when changing layouts
    setLayoutItems(layoutItems.map((item, index) => ({
      ...item,
      gridArea: newLayout.areas?.[index] || 'auto'
    })));

    setGridStyle({
      gridTemplateColumns: newLayout.gridTemplate.columns,
      gridTemplateRows: newLayout.gridTemplate.rows,
    });
  };

  const handleSave = () => {
    // Create ordered array of section keys based on gridIndex
    const orderedSectionKeys = layoutItems
      .sort((a, b) => a.gridIndex - b.gridIndex)
      .map(item => item.sectionKey);

    // Update layout with new section order
    updateLayout(orderedSectionKeys, selectedLayout);
    //also save chhosen layout
    

    onOpenChange(false);
  };

  const handleReset = () => {
    // Reset to original order based on canvasType sections
    setLayoutItems(canvasType.sections.map((section, index) => ({
      id: `section-${index}`,
      content: section.name,
      icon: section.icon,
      gridArea: currentLayout.areas?.[index] || 'auto',
      sectionKey: section.name,
      gridIndex: index
    })));

    setGridStyle({
      gridTemplateColumns: currentLayout.gridTemplate.columns,
      gridTemplateRows: currentLayout.gridTemplate.rows,
    });
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent
        className={`sm:max-w-[1200px] w-full h-[90vh] flex flex-col ${
          canvasTheme === 'dark' ? 'bg-gray-950 text-gray-50' : 'bg-white text-gray-900'
        }`}
      >
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Grid2x2 className="h-6 w-6" />
            Edit Canvas Layout
          </DialogTitle>
        </DialogHeader>

        <div className="flex flex-col gap-4 flex-grow overflow-hidden">
          {/* Grid Container */}
          <div
            className={`p-4 rounded-lg border flex-grow overflow-auto ${
              canvasTheme === 'dark' ? 'border-gray-800' : 'border-gray-200'
            }`}
          >
            <div 
              className="grid gap-2 h-full w-full"
              style={{
                ...gridStyle,
                minHeight: '100%',
                minWidth: '100%'
              }}
            >
              {layoutItems.map((item) => (
                <GridItem 
                  key={item.id} 
                  item={item}
                  canvasTheme={canvasTheme}
                  isHighlighted={item.id === targetId}
                  onDragStart={handleDragStart}
                  onDragEnter={handleDragEnter}
                  onDragEnd={handleDragEnd}
                />
              ))}
            </div>
          </div>

          {/* Footer */}
          <div className="flex flex-col gap-4 mt-auto">
            {/* Scrolling Buttons Container */}
            <div className="overflow-x-auto">
              <div className="flex space-x-2 pb-2">
                {isLoading ? (
                  <div className="flex items-center justify-center w-full p-4">
                    <span className="text-muted-foreground">Loading layouts...</span>
                  </div>
                ) : (
                  availableLayouts.map((layoutDetails) => (
                    <motion.div
                      key={layoutDetails.name}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      className="p-2 transition-all duration-300 flex-shrink-0"
                    >
                      <Button
                        variant="outline"
                        className={`w-24 h-24 p-2 ${
                          compareLayouts(layoutDetails.layout, selectedLayout) 
                            ? 'bg-primary text-primary-foreground' 
                            : canvasTheme === 'dark'
                              ? 'bg-gray-800 text-gray-200'
                              : 'bg-gray-100 text-gray-800'
                        } hover:bg-primary/90 hover:text-primary-foreground transition-colors duration-200`}
                        onClick={() => handleLayoutSelect(layoutDetails.layout)}
                      >
                        <div
                          className="w-full h-full grid gap-1"
                          style={{
                            gridTemplateColumns: layoutDetails.layout.gridTemplate.columns,
                            gridTemplateRows: layoutDetails.layout.gridTemplate.rows,
                          }}
                        >
                          {Array.from({ length: layoutDetails.sectionCount }).map((_, index) => (
                            <div
                              key={index}
                              className={`rounded-sm transition-colors duration-200 ${
                                compareLayouts(layoutDetails.layout, selectedLayout) 
                                  ? 'bg-primary-foreground' 
                                  : canvasTheme === 'dark'
                                    ? 'bg-gray-700'
                                    : 'bg-gray-300'
                              }`}
                              style={{
                                gridArea: layoutDetails.layout.areas?.[index] || 'auto',
                              }}
                            />
                          ))}
                        </div>
                      </Button>
                    </motion.div>
                  ))
                )}
              </div>
              <div className="flex items-center justify-end gap-2 pb-1">
              <Button
                variant="outline"
                onClick={handleReset}
                className="flex items-center gap-2"
                canvasTheme={canvasTheme}
              >
                <Undo2 className="h-4 w-4" />
                Reset
              </Button>
              <Button
                onClick={handleSave}
                className="flex items-center gap-2"
                canvasTheme={canvasTheme}
              >
                <Save className="h-4 w-4" />
                Save Layout
              </Button>
            </div>
            </div>
            
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Slider } from '@/components/ui/slider'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Label } from '@/components/ui/label'
import { 
  Building2, 
  Users, 
  Workflow, 
  Gift, 
  Heart, 
  Users2, 
  Truck, 
  Receipt, 
  Coins,
  LucideIcon,
  Edit2,
  Trash2,
  Star
} from 'lucide-react'
import { AIQuestion } from '@/types/canvas'

interface AIQuestionItemProps {
  question: AIQuestion;
  onEdit?: () => void;
  onDelete?: () => void;
  canvasTheme?: string;
}

const sectionIcons: Record<string, LucideIcon> = {
  keyPartners: Building2,
  keyActivities: Workflow,
  keyResources: Receipt,
  valuePropositions: Gift,
  customerRelationships: Heart,
  channels: Truck,
  customerSegments: Users2,
  costStructure: Users,
  revenueStreams: Coins,
}

function AIQuestionItem({ question, onEdit, onDelete, canvasTheme }: AIQuestionItemProps) {
  const [isHovered, setIsHovered] = useState(false)

  const renderAnswer = () => {
    switch (question.type) {
      case 'open':
        return (
          <p className={`mt-2 text-sm ${
            canvasTheme === 'light' ? 'text-gray-600' : 'text-gray-300'
          }`}>
            {question.answer}
          </p>
        )

      case 'rating':
        return question.scale ? (
          <div className="mt-2">
            <div className="flex items-center gap-1">
              {[...Array(question.scale.max)].map((_, index) => (
                <Star
                  key={index}
                  className={`h-4 w-4 ${
                    index < Number(question.answer)
                      ? 'fill-current text-yellow-400'
                      : canvasTheme === 'light'
                        ? 'text-gray-300'
                        : 'text-gray-600'
                  }`}
                />
              ))}
              <span className={`ml-2 text-sm ${
                canvasTheme === 'light' ? 'text-gray-600' : 'text-gray-300'
              }`}>
              </span>
            </div>
          </div>
        ) : null

      case 'multipleChoice':
        return (
          <p className={`mt-2 text-sm ${
            canvasTheme === 'light' ? 'text-gray-600' : 'text-gray-300'
          }`}>
            {question.answer}
          </p>
        )
    }
  }

  const Icon = question.section ? sectionIcons[question.section] : undefined

  return (
    <Card 
      canvasTheme={canvasTheme}
      className={`mb-2 border-2 ${
        canvasTheme === 'dark' 
          ? 'bg-gray-900 border-gray-800 text-gray-100' 
          : 'bg-white border-gray-200 text-gray-900'
      }`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <CardContent className="p-3">
        <div className="flex items-start gap-2">
          {Icon && (
            <Icon className={`w-4 h-4 mt-1 ${
              canvasTheme === 'light' ? 'text-gray-500' : 'text-gray-400'
            }`} />
          )}
          <div className="flex-1">
            <p className={`text-sm mb-2 ${
              canvasTheme === 'light' ? 'text-gray-700' : 'text-gray-200'
            }`}>
              {question.question}
            </p>
            {renderAnswer()}
            <div 
              className={`transition-all duration-500 ease-[cubic-bezier(0.34,1.56,0.64,1)] ${
                isHovered ? 'opacity-100 max-h-24 translate-y-0' : 'opacity-0 max-h-0 translate-y-2'
              } overflow-hidden`}
            >
              <div className="flex items-center space-x-2 mt-2 justify-end">
                <Button 
                  onClick={onEdit}
                  size="sm" 
                  variant="outline"
                  canvasTheme={canvasTheme}
                  className={`flex items-center ${
                    canvasTheme === 'light' 
                      ? 'border-gray-200 hover:bg-gray-100'
                      : 'border-gray-700 hover:bg-gray-800'
                  }`}
                >
                  <Edit2 className="h-4 w-4" />
                </Button>
                <Button 
                  onClick={onDelete}
                  size="sm" 
                  variant="outline"
                  canvasTheme={canvasTheme}
                  className={`flex items-center ${
                    canvasTheme === 'light' 
                      ? 'border-gray-200 hover:bg-gray-100'
                      : 'border-gray-700 hover:bg-gray-800'
                  }`}
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

export default AIQuestionItem import React, { ChangeEvent, useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { CompanyEditDialog } from './CompanyEditDialog'
import { Canvas } from '@/types/canvas'
import { useCanvas } from '@/contexts/CanvasContext'
import { Grid2x2, Moon, Sun } from 'lucide-react'
import LayoutEditor from './LayoutEditor'

interface HeaderProps {
  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void
}

const ThemeToggleButton = () => {
  const { canvasTheme, setCanvasTheme } = useCanvas()
  return (
    <Button
      variant="outline"
      size="icon"
      onClick={() => setCanvasTheme(canvasTheme === 'light' ? 'dark' : 'light')}
      className={`${
        canvasTheme === 'light'
          ? 'bg-white text-gray-700 border-gray-200 hover:bg-gray-100 hover:text-gray-900'
          : 'bg-gray-950 text-gray-300 border-gray-800 hover:bg-gray-800 hover:text-gray-100'
      }`}
    >
      {canvasTheme === 'light' ? (
        <Moon className="h-4 w-4" />
      ) : (
        <Sun className="h-4 w-4" />
      )}
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}

export function Header() {
  const { canvasTheme, formData, updateField } = useCanvas();
  const [showLayoutEditor, setShowLayoutEditor] = useState(false);


  useEffect(() => {
  }, [formData]);

  function onInputChange(event: ChangeEvent<HTMLInputElement>): void {
    updateField(event.target.id as keyof Canvas, event.target.value)
  }

  return (
    <div className={`flex items-center justify-between p-4 border-b ${
      canvasTheme === 'light' 
        ? 'bg-white border-gray-200 text-black'
        : 'bg-gray-950 border-gray-800 text-white'
    }`}>
      <div className="flex items-center gap-4">
        <h1 className={`text-3xl font-bold tracking-tight ${
          canvasTheme === 'light' ? 'text-black' : 'text-white'
        }`}>
          The Business Model Canvas
        </h1>
        <div className="flex items-center gap-2">
          <Input 
            canvasTheme={canvasTheme}
            value={formData.name}
            className={`max-w-[200px] ${
              canvasTheme === 'light' ? 'text-black' : 'text-white'
            }`}
            readOnly
          />
          <div className={`${!formData.name || !formData.description ? 
            'animate-pulse ring-2 ring-blue-500 rounded-md ring-opacity-75 shadow-lg shadow-blue-500/50' : ''}`}>
            <CompanyEditDialog/>
          </div>
        </div>
      </div>
      
      <div className="flex items-center gap-4">
        <Input
          id="designedFor"
          canvasTheme={canvasTheme}
          className={`max-w-[150px] ${
            canvasTheme === 'light' ? 'text-black' : 'text-white'
          }`}
          type="text"
          placeholder="Designed For"
          value={formData.designedFor}
          onChange={onInputChange}
        />
        <Input
          id="designedBy"
          canvasTheme={canvasTheme}
          className={`max-w-[150px] ${
            canvasTheme === 'light' ? 'text-black' : 'text-white'
          }`}
          type="text"
          placeholder="Designed By"
          value={formData.designedBy}
          onChange={onInputChange}
        />
        <Input
          id="date"
          canvasTheme={canvasTheme}
          className={`max-w-[150px] ${
            canvasTheme === 'light' ? 'text-black' : 'text-white'
          }`}
          type="date"
          placeholder="Date"
          value={formData.date}
          onChange={onInputChange}
        />
        <Input
          id="version"
          canvasTheme={canvasTheme}
          className={`max-w-[150px] ${
            canvasTheme === 'light' ? 'text-black' : 'text-white'
          }`}
          type="text"
          placeholder="Version"
          value={formData.version}
          onChange={onInputChange}
        />
        <Button
          canvasTheme={canvasTheme}
          variant="outline"
          size="icon"
          onClick={() => setShowLayoutEditor(true)}
          className="ml-2"
        >
          <Grid2x2 className="h-4 w-4" />
        </Button>
        <ThemeToggleButton />
      </div>
      <LayoutEditor 
        open={showLayoutEditor} 
        onOpenChange={setShowLayoutEditor}
      />
    </div>
    
  )
} 'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { 
  Sparkles,
  Lightbulb,
  HelpCircle,
  MessageCircle,
  Search
} from 'lucide-react'
import { useChat } from '@/contexts/ChatContext'
import { Message } from '@/contexts/ChatContext'
import { useCanvas } from '@/contexts/CanvasContext'
import { sendChatRequest } from '@/services/aiService'

const actions = [
  { key: 'suggest', label: 'Suggest', icon: Lightbulb },
  { key: 'question', label: 'Question Me', icon: HelpCircle },
  { key: 'critique', label: 'Critique', icon: MessageCircle },
  { key: 'research', label: 'Research', icon: Search },
]

interface AISectionAssistButtonProps {
  section: string
  sectionKey: string
  onExpandSidebar: () => void
}

export function AISectionAssistButton({ section, sectionKey, onExpandSidebar }: AISectionAssistButtonProps) {
  const { setIsLoading, addMessages, isLoading, messages } = useChat()
  const { formData, canvasTheme, aiAgent } = useCanvas()
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)

  const handleAction = async (action: string) => {
    onExpandSidebar()
    const actionMessage = action === 'question' 
      ? `Question me about ${section}` 
      : action === 'critique' 
      ? `Critique the ${section}` 
      : action === 'research' 
      ? `Research the ${section}` 
      : `Suggest things for ${section}`

    const message = {
      role: 'user',
      content: actionMessage,
      action: action
    } as Message

    const currentMessages = [...messages.filter((m: Message) => 
      m.role === 'system' || m.role === 'user' || m.role === 'assistant'
    )]
    const updatedMessages = [...currentMessages, message]
    
    await addMessages(updatedMessages)
    setIsLoading(true)
    try {
      if(!aiAgent) {
        throw new Error('No AI agent selected')
      }
      const aiResponse = await sendChatRequest(updatedMessages, formData, aiAgent)
      const formattedResponse: Message = {
        role: 'assistant',
        content: aiResponse.content || '',
        suggestions: aiResponse.suggestions?.map((suggestion: any) => ({
          id: suggestion.id,
          section: suggestion.section || sectionKey,
          suggestion: suggestion.suggestion,
          rationale: suggestion.rationale
        })),
        questions: aiResponse.questions?.map((question: any) => ({
          id: question.id,
          question: question.question,
          section: sectionKey,
          type: question.type || 'open',
          options: question.options || [],
          scale: question.scale || null
        }))
      }
      addMessages([...updatedMessages, formattedResponse])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...updatedMessages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      } as Message])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div 
      className="relative"
      onMouseEnter={() => setIsDropdownOpen(true)}
      onMouseLeave={() => setIsDropdownOpen(false)}
    >
      <Button 
        variant="outline"
        size="icon"
        canvasTheme={canvasTheme}
        className="ml-2 hover:bg-gray-800/50 hover:text-gray-100 group"
        disabled={isLoading}
      >
        <Sparkles className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
      </Button>

      <div className={`
        absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-gray-900 border border-gray-800
        transform transition-all duration-200 ease-in-out origin-top-right z-50
        ${isDropdownOpen 
          ? 'opacity-100 scale-100 translate-y-0' 
          : 'opacity-0 scale-95 -translate-y-2 pointer-events-none'}
      `}>
        <div className="absolute -top-2 right-0 h-2 w-full" />
        <div className="py-1">
          {actions.map(({ key, label, icon: Icon }) => (
            <button
              key={key}
              onClick={() => handleAction(key)}
              className="flex w-full items-center gap-2 px-4 py-2 text-sm text-gray-400 hover:bg-gray-800 hover:text-gray-100"
            >
              <Icon className="h-4 w-4" />
              {label}
            </button>
          ))}
        </div>
      </div>
    </div>
  )
} 

export default AISectionAssistButtonimport React from 'react'
import { Header } from "./Header"
import { CanvasContent } from "./CanvasContent"
import { SubscriptionProvider } from '@/contexts/SubscriptionContext'


function Providers({ children }: { children: React.ReactNode }) {
  return (
    <SubscriptionProvider>
      {children}
    </SubscriptionProvider>
  )
}

export function Canvas() {
  let component = (
    <div className="flex flex-col flex-1 overflow-hidden">
      <Header />
      <CanvasContent />
    </div>
  )
  return (
    <Providers>
      {component}
    </Providers>
  )
}import React from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AIItemAssistButton } from './AIItemAssistButton';
import { Edit2, Trash2 } from 'lucide-react';
import { useCanvas } from '@/contexts/CanvasContext';

interface SectionItemProps {
  item: string;
  onDelete: () => void;
  isEditing: boolean;
  isActive: boolean;
  isExpanded: boolean;
  onClick: () => void;
  onEditStart: () => void;
  onEditEnd: () => void;
  className: string;
}

export function SectionItem({
  item,
  onDelete,
  isEditing,
  isActive,
  isExpanded,
  onClick,
  onEditStart,
  onEditEnd,
  className,
}: SectionItemProps) {
  const { canvasTheme } = useCanvas();
  const showControls = isExpanded || isEditing;

  return (
    <Card
      canvasTheme={canvasTheme}
      className={`mb-2 p-3 transition-all duration-300 !bg-transparent relative ${
        isEditing ? 'border-primary/50 bg-primary/5 shadow-md' : ''
      } ${className}`}
      onClick={onClick}
    >
      <p className={`text-sm whitespace-pre-wrap mb-2 ${
        canvasTheme === 'light' ? 'text-gray-700' : 'text-gray-100'
      }`}>
        {item}
      </p>

      <div
        className={`
         transition-all duration-500 ease-in-out 
          overflow-hidden
          ${showControls ? 'max-h-24 opacity-100' : 'max-h-0 opacity-0'} 
        `}
      >
        <div className="flex items-center space-x-2 mt-2 justify-end">
          <AIItemAssistButton
            section={item}
            sectionKey={item}
            onExpandSidebar={() => {}}
            onDropdownStateChange={() => {}}
          />
          <Button
            onClick={isEditing ? onEditEnd : onEditStart}
            size="sm"
            variant={isEditing ? "default" : "outline"}
            canvasTheme={canvasTheme}
            className={`flex items-center ${
              canvasTheme === 'light' 
                ? 'border-gray-200 hover:bg-gray-100'
                : 'hover:bg-gray-800'
            }`}
          >
            <Edit2 className="h-4 w-4" />
          </Button>
          <Button
            onClick={onDelete}
            size="sm"
            variant="outline"
            canvasTheme={canvasTheme}
            className={`flex items-center ${
              canvasTheme === 'light' 
                ? 'border-gray-200 hover:bg-gray-100'
                : 'hover:bg-gray-800'
            }`}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </Card>
  );
}

export default SectionItem;'use client'

import React, { useCallback, useEffect, useState } from 'react'
import ReactMarkdown from 'react-markdown'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { LucideIcon, MoreVertical, Send } from 'lucide-react'
import { AISectionAssistButton } from './AISectionAssistButton'
import { ScrollArea } from '@/components/ui/scroll-area'
import { DynamicInput } from './DynamicInput'
import SectionItem from './SectionItem'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
import { Section } from '@/types/canvas'
import { Button } from '../ui/button'
import { QuestionsDialog } from './QuestionsDialog'
import { useCanvas } from '@/contexts/CanvasContext'
import { debounce } from 'lodash'
import DynamicIcon from '../Util/DynamicIcon'
interface AISuggestion {
  id: string;
  suggestion: string;
  rationale: string;
}

interface CanvasSectionProps {
  title: string;
  sectionKey: string;
  icon: string;
  section: Section;
  onChange: (value: string[]) => void;
  placeholder: string;
  className?: string;
}

export function CanvasSection({ 
  title, 
  sectionKey, 
  icon: Icon, 
  section,
  onChange, 
  placeholder, 
  className 
}: CanvasSectionProps) {
  const { updateQuestions, canvasTheme } = useCanvas()
  const itemsArray = Array.isArray(section.items) ? section.items : section.items ? [section.items] : [];
  const questionsArray = Array.isArray(section.qAndAs) ? section.qAndAs : section.qAndAs ? [section.qAndAs] : [];
  const [editingIndex, setEditingIndex] = useState<number | null>(null)
  const [isQuestionsDialogOpen, setIsQuestionsDialogOpen] = useState(false)
  const [activeItemIndex, setActiveItemIndex] = useState<number | null>(null);

  const [expandedItemIndex, setExpandedItemIndex] = useState<number | null>(null);

  const handleItemClick = (index: number) => {
    setExpandedItemIndex(expandedItemIndex === index ? null : index);
  };

  const handleAddOrUpdateItem = (content: string) => {
    if (editingIndex !== null) {
      // Update existing item
      const newItems = [...itemsArray]
      newItems[editingIndex] = content
      onChange(newItems)
      setEditingIndex(null)
    } else {
      // Add new item
      const newItems = [...itemsArray, content]
      onChange(newItems)
    }
  }

  const handleDeleteItem = (index: number) => {
    const newItems = [...itemsArray]
    newItems.splice(index, 1)
    onChange(newItems)
    if (editingIndex === index) {
      setEditingIndex(null)
    }
  }

  const handleEditStart = (index: number) => {
    setEditingIndex(index)
  }

  const handleEditCancel = () => {
    setEditingIndex(null)
  }

  const handleDeleteQuestion = (index: number) => {
    const newQuestions = [...questionsArray]
    newQuestions.splice(index, 1)
    updateQuestions(sectionKey, newQuestions)
  }

  const handleEditQuestion = (index: number, updatedQuestion: any) => {
    const newQuestions = [...questionsArray]
    newQuestions[index] = updatedQuestion
    // You'll need to add a method to update questions in your context/state management
    // updateQuestions(sectionKey, newQuestions)
  }
  
  console.log('itemsArray', itemsArray);
  return (
    <Card 
      canvasTheme={canvasTheme}
    className={`flex flex-col h-full max-h-full overflow-hidden`}>
      <CardHeader className={`flex-shrink-0`}>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <CardTitle className={`flex items-center gap-2 ${
                canvasTheme === 'light' ? 'text-gray-900' : 'text-gray-100'
              }`}>
                <DynamicIcon name={Icon} className={`h-5 w-5 ${
                  canvasTheme === 'light' ? 'text-gray-700' : 'text-gray-300'
                }`} />
                {title}
                <div className="flex-1" />
                {questionsArray.length > 0 && (
                  <Button 
                    canvasTheme={canvasTheme}
                    variant="outline" 
                    size="icon"
                    onClick={() => setIsQuestionsDialogOpen(true)}
                  >
                    <MoreVertical />
                  </Button>
                )}
                <AISectionAssistButton section={title} sectionKey={sectionKey} onExpandSidebar={() => {}} />
              </CardTitle>
            </TooltipTrigger>
            {(itemsArray.length === 0) && (
              <TooltipContent className={`whitespace-pre-line text-sm ${
                canvasTheme === 'light' ? 'text-gray-600' : 'text-gray-400'
              }`}>
                {placeholder}
              </TooltipContent>
            )}
          </Tooltip>
        </TooltipProvider>
      </CardHeader>
      <CardContent className={`flex-1 flex flex-col overflow-hidden`}>
      <ScrollArea 
          className="flex-1 relative"
          style={{ height: 'calc(100% - 60px)' }}
        >
                    {itemsArray.length === 0 && (
            <div className={`absolute top-0 left-0 pointer-events-none text-sm whitespace-pre-line ${
              canvasTheme === 'light' ? 'text-gray-600' : 'text-gray-400'
            }`}>
              {placeholder}
            </div>
          )}

          <div className="space-y-2">
            {itemsArray.map((item, index) => (
              <SectionItem
                key={index}
                item={item}
                isActive={activeItemIndex === index}
                isExpanded={expandedItemIndex === index}
                onClick={() => handleItemClick(index)}
                onDelete={() => handleDeleteItem(index)}
                isEditing={editingIndex === index}
                onEditStart={() => handleEditStart(index)}
                onEditEnd={() => handleEditCancel()}
                className={`cursor-pointer ${
                  expandedItemIndex === index ? 'bg-gray-200' : ''
                } hover:bg-gray-100`}
              />
            ))}
          </div>
        </ScrollArea>
        
        <div className="flex-shrink-0 mt-auto pt-2">
          <DynamicInput 
            placeholder={title}
            onSubmit={handleAddOrUpdateItem}
            onCancel={editingIndex !== null ? handleEditCancel : undefined}
            initialValue={editingIndex !== null ? itemsArray[editingIndex] : ''}
            isEditing={editingIndex !== null}
          />
        </div>
      </CardContent>
      <QuestionsDialog
        open={isQuestionsDialogOpen}
        onOpenChange={setIsQuestionsDialogOpen}
        questions={questionsArray}
        onDelete={handleDeleteQuestion}
        onEdit={handleEditQuestion}
        sectionTitle={title}
      />
    </Card>
  )
}import { CanvasSection } from "./CanvasSection"
import { useEffect, useState } from "react"
import { useCanvas } from "@/contexts/CanvasContext"
import { CanvasTypeService } from "@/services/canvasTypeService"


export function CanvasContent() {
  const { formData, canvasTheme, updateSection } = useCanvas();
  let canvasType = formData.canvasType;


  // Convert sections Map to array and sort by gridIndex
  const sortedSections = Array.from(formData.sections.entries())
    .map(([key, section]) => ({
      key,
      section,
      config: canvasType.sections.find(s => s.name === key)
    }))
    .sort((a, b) => (a.section.gridIndex || 0) - (b.section.gridIndex || 0));
  console.log('sortedSections', sortedSections);
  return (
    <div className={`flex flex-col flex-1 p-4 space-y-4 overflow-auto ${
      canvasTheme === 'light' ? 'bg-white text-black' : 'bg-gray-950 text-white'
    }`}>
      <div style={{
        display: 'grid',
        gridTemplateColumns: formData.canvasLayout.gridTemplate.columns,
        gridTemplateRows: formData.canvasLayout.gridTemplate.rows || 'auto auto auto',
        gap: '1rem',
        minHeight: '100%',
      }}>
        {sortedSections.map((item, index) => (
          <div 
            key={item.key} 
            style={{ 
              gridArea: formData.canvasLayout.areas?.[index] || 'auto',
              minHeight: 0,
              height: 'auto',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            <CanvasSection
              key={`${item.key}-${item.section.items?.length}`}
              title={item.config?.name || ''}
              sectionKey={item.key}
              icon={item.config!.icon}
              section={item.section}
              onChange={(value: string[]) => updateSection(item.key, value)}
              placeholder={item.config?.placeholder || ''}
              className="h-full overflow-hidden"
            />
          </div>
        ))}
      </div>
    </div>
  );
} import Link from 'next/link'
import { useSubscription } from "@/contexts/SubscriptionContext"

export function SubscriptionBadge() {
  const { subscriptionStatus } = useSubscription()
  if (!subscriptionStatus || subscriptionStatus === 'free') {
    return (
      <Link href="/upgrade" className="text-muted-foreground hover:text-foreground transition-colors">
        Upgrade Plan
      </Link>
    )
  }

  if (subscriptionStatus === 'pro' || subscriptionStatus === 'enterprise') {
    return (
      <div className="flex items-center gap-2 px-3 py-1.5 bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-full">
        <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse" />
        <span className="text-sm font-medium text-blue-600 dark:text-blue-400">
          {subscriptionStatus === 'pro' ? 'Pro' : 'Enterprise'} Plan
        </span>
      </div>
    )
  }

  return null
} import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"

interface DeleteCanvasDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onConfirm: () => void;
  canvasName: string;
}

export function DeleteCanvasDialog({ open, onOpenChange, onConfirm, canvasName }: DeleteCanvasDialogProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Delete Canvas</DialogTitle>
          <DialogDescription>
            Are you sure you want to delete "{canvasName}"? This action cannot be undone.
          </DialogDescription>
        </DialogHeader>
        <DialogFooter>
          <Button 
            variant="outline" 
            onClick={() => onOpenChange(false)}
            className="dark:bg-slate-800 dark:text-slate-100 dark:hover:bg-slate-700 dark:border-slate-700"
          >
            Cancel
          </Button>
          <Button 
            variant="destructive" 
            onClick={() => {
              onConfirm();
              onOpenChange(false);
            }}
            className="dark:bg-red-900 dark:hover:bg-red-800 dark:text-slate-100"
          >
            Delete
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
} import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { Button } from "@/components/ui/button"
import { Bot } from "lucide-react"
import { AIChatArea } from "@/components/chat/AIChatArea"
import { useState } from "react"
import { TooltipProvider } from "@radix-ui/react-tooltip"
import { SheetHeader, SheetTitle } from "@/components/ui/sheet"
import { VisuallyHidden } from '@radix-ui/react-visually-hidden'
import { useCanvas } from "@/contexts/CanvasContext"

export function MobileAIChat() {
  const [isOpen, setIsOpen] = useState(false)
  const { canvasTheme } = useCanvas()
  return (
    <TooltipProvider>
      <Sheet open={isOpen} onOpenChange={setIsOpen}>
        <SheetTrigger asChild>
          <Button
            canvasTheme={canvasTheme}
            size="icon"
            className="fixed bottom-4 right-4 h-12 w-12 rounded-full shadow-lg"
          >
            <Bot className="h-6 w-6" />
          </Button>
        </SheetTrigger>
        <SheetContent 
          side="bottom" 
          className="h-[90vh] p-0"
        >
          <VisuallyHidden asChild>
            <SheetTitle>AI Assistant</SheetTitle>
          </VisuallyHidden>
          <div className="h-full flex flex-col w-full">
            <AIChatArea onClose={() => setIsOpen(false)}/>
          </div>
        </SheetContent>
      </Sheet>
    </TooltipProvider>
  )
} // import { LucideIcon } from "lucide-react";
// import { useCanvas } from "@/contexts/CanvasContext";
// import { Section } from "@/types/canvas";
// import { Card } from "@/components/ui/card";
// import { DynamicInput } from "../Canvas/DynamicInput";
// import { ScrollArea } from "@/components/ui/scroll-area";
// import SectionItem from "../Canvas/SectionItem";

// interface MobileCanvasSectionProps {
//   title: string;
//   icon: LucideIcon;
//   sectionKey: string;
//   section: Section;
// }

// export function MobileCanvasSection({ 
//   title, 
//   icon: Icon, 
//   sectionKey, 
//   section 
// }: MobileCanvasSectionProps) {
//   const { updateSection, canvasTheme } = useCanvas();
//   const itemsArray = Array.isArray(section.items) ? section.items : [];

//   const handleAddOrUpdateItem = (content: string) => {
//     const newItems = [...itemsArray, content];
//     updateSection(sectionKey, newItems);
//   };

//   const handleDeleteItem = (index: number) => {
//     const newItems = [...itemsArray];
//     newItems.splice(index, 1);
//     updateSection(sectionKey, newItems);
//   };

//   return (
//     <Card 
//       canvasTheme={canvasTheme}
//       className={`mx-4 h-[calc(100vh-160px)] flex flex-col ${
//         canvasTheme === 'light' 
//           ? 'bg-white border-gray-200' 
//           : 'bg-gray-950 border-gray-800'
//       }`}
//     >
//       <div className={`p-4 flex items-center gap-2 border-b ${
//         canvasTheme === 'light' 
//           ? 'border-gray-200 text-gray-900' 
//           : 'border-gray-800 text-gray-100'
//       }`}>
//         <Icon className={`h-5 w-5 ${
//           canvasTheme === 'light' ? 'text-gray-900' : 'text-gray-100'
//         }`} />
//         <h2 className="font-semibold">{title}</h2>
//       </div>

//       <ScrollArea className="flex-1 p-4">
//         {itemsArray.length === 0 ? (
//           <p className={`text-sm ${
//             canvasTheme === 'light' 
//               ? 'text-gray-500' 
//               : 'text-gray-400'
//           }`}>
//             Add your first item for {title}
//           </p>
//         ) : (
//           <div className="space-y-2">
//             {itemsArray.map((item, index) => (
//               <SectionItem
//                 key={index}
//                 item={item}
//                 onDelete={() => handleDeleteItem(index)}
//                 isEditing={editingIndex === index}
//                 onEditStart={() => handleEditStart(index)}
//                 onEditEnd={() => handleEditCancel()}
//               />
//             ))}
//           </div>
//         )}
//       </ScrollArea>

//       <div className={`p-4 border-t ${
//         canvasTheme === 'light' 
//           ? 'border-gray-200' 
//           : 'border-gray-800'
//       }`}>
//         <DynamicInput
//           placeholder={`Add to ${title}`}
//           onSubmit={handleAddOrUpdateItem}
//           initialValue=""
//           isEditing={false}
//         />
//       </div>
//     </Card>
//   );
// } import { Button } from "@/components/ui/button"
import { CreditCard, LogOut, Menu, Settings, User } from "lucide-react"
import Link from 'next/link'
import { Sheet, SheetContent, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { useAuth } from "@/contexts/AuthContext"
import { MobileDrawer } from "./MobileDrawer"
import { DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from "@radix-ui/react-dropdown-menu"
import { DropdownMenu } from "@radix-ui/react-dropdown-menu"
import { SubscriptionBadge } from "../subscription/SubscriptionBadge"
import { SubscriptionProvider } from "@/contexts/SubscriptionContext"
import { useState } from "react"
import { VisuallyHidden } from '@radix-ui/react-visually-hidden'
import { CanvasProvider } from "@/contexts/CanvasContext"


export function MobileHeader() {
  const { user, logout } = useAuth()
  const [showAuthDialog, setShowAuthDialog] = useState(false)
  const [isOpen, setIsOpen] = useState(false)

  const handleSignOut = async () => {
    try {   
      await logout()
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }

  return (
    <header className="sticky top-0 z-40 w-full border-b border-gray-200 dark:border-gray-800 bg-background">
      <div className="flex h-16 items-center justify-between px-4">
        <div className="flex items-center gap-4">
          {user && (
            <Sheet open={isOpen} onOpenChange={setIsOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon">
                  <Menu className="h-4 w-4" />
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="w-[300px] p-0 [&_button[data-state=open]]:hidden">
                <VisuallyHidden asChild>
                  <SheetTitle>Navigation Menu</SheetTitle>
                </VisuallyHidden>
                <CanvasProvider>
                  <MobileDrawer onClose={() => setIsOpen(false)} />
                </CanvasProvider>
              </SheetContent>
            </Sheet>
          )}
          <Link className="flex items-center justify-center" href="#">
            <span className="text-2xl font-extrabold text-foreground">cavvy.ai</span>
          </Link>
        </div>

        <nav className="flex items-center gap-4">
          {!user && (
            <>
              <Link href="/features" className="text-sm font-medium">
                Features
              </Link>
              <Link href="/pricing" className="text-sm font-medium">
                Pricing
              </Link>
            </>
          )}
          {user && (
            <SubscriptionProvider>
              <SubscriptionBadge />
            </SubscriptionProvider>
          )}

          {user ? (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button 
                  variant="ghost" 
                  className="relative h-8 w-8 rounded-full hover:bg-muted-foreground/10"
                >
                  <div className="absolute inset-0 rounded-full bg-muted flex items-center justify-center">
                    <User className="h-4 w-4" />
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <div className="flex items-center justify-start gap-2 p-2">
                  <div className="flex flex-col space-y-1 leading-none">
                    <p className="font-medium">{user.email}</p>
                  </div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem asChild>
                  <Link href="/profile">
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Profile</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuItem asChild>
                  <Link href="/billing">
                    <CreditCard className="mr-2 h-4 w-4" />
                    <span>Billing</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleSignOut}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          ) : (
            <Button
              onClick={() => setShowAuthDialog(true)}
              variant="outline"
              className="font-extrabold"
            >
              Sign In
            </Button>
          )}
        </nav>
      </div>
    </header>
  )
} import { useAuth } from "@/contexts/AuthContext"
import { LayoutDashboard, Settings, HelpCircle, LogOut, Trash2, ChevronLeft } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { useCanvas } from "@/contexts/CanvasContext"
import { NewCanvasDialog } from "@/components/NewCanvasDialog"
import { DeleteCanvasDialog } from "@/components/DeleteCanvasDialog"
import { useState } from "react"
import { BUSINESS_MODEL_CANVAS } from "@/types/canvas-sections"

export function MobileDrawer({ onClose }: { onClose: () => void }) {
  const { logout } = useAuth()
  const router = useRouter()
  const { loadCanvas, deleteCanvas, resetForm, currentCanvas, userCanvases } = useCanvas()
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [canvasToDelete, setCanvasToDelete] = useState<{ id: string, name: string } | null>(null)
  const [dialogOpen, setDialogOpen] = useState(false)
  
  const handleSignOut = async () => {
    try {
      await logout()
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }

  const handleCanvasSelect = async (canvasId: string) => {
    await loadCanvas(canvasId)
    localStorage.setItem('lastCanvasId', canvasId)
  }

  const handleDeleteCanvas = async (canvasId: string) => {
    await deleteCanvas(canvasId)
    if (localStorage.getItem('lastCanvasId') === canvasId) {
      localStorage.removeItem('lastCanvasId')
      if (userCanvases.length > 0) {
        handleCanvasSelect(userCanvases[0].id)
      } else {
        resetForm()
      }
    }
  }

  const staticMenuItems = [
    { icon: Settings, label: 'Settings', href: '/settings' },
    { icon: HelpCircle, label: 'Help', href: '/help' },
  ]

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 py-4">
        <div className="space-y-1">
        <h3 className="text-sm font-semibold text-muted-foreground flex items-center px-4 py-2">
            <LayoutDashboard className="h-4 w-4 mr-2" />
            Business Models
            <div className="flex-grow"></div>
            <Button variant="ghost" size="icon" className="h-8 w-8 text-muted-foreground hover:text-foreground" onClick={onClose}>
              <ChevronLeft className="h-4 w-4" />
            </Button>
          </h3>
          <div className="px-4 mb-2">
            <NewCanvasDialog
              open={dialogOpen}
              onOpenChange={setDialogOpen}
              canvasType={currentCanvas?.canvasType || BUSINESS_MODEL_CANVAS}
            />
          </div>
          {userCanvases.map((item) => (
            <div key={item.id} className="flex items-center gap-1 px-4">
              <Button
                variant="ghost"
                className={`flex-1 justify-start text-muted-foreground hover:text-foreground hover:bg-zinc-100 dark:hover:bg-zinc-800 ${
                  currentCanvas?.id === item.id 
                    ? 'bg-muted font-medium border-l-2 border-primary pl-3' 
                    : 'pl-4'
                }`}
                onClick={() => handleCanvasSelect(item.id)}
              >
                <LayoutDashboard className="mr-2 h-5 w-5" />
                {item.name}
              </Button>
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-8 w-8 text-muted-foreground hover:text-foreground"
                onClick={() => {
                  setCanvasToDelete({ id: item.id, name: item.name })
                  setDeleteDialogOpen(true)
                }}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          ))}
          {staticMenuItems.map((item) => {
            const Icon = item.icon
            return (
              <Link key={item.href} href={item.href}>
                <Button
                  variant="ghost"
                  className="w-full justify-start text-base"
                >
                  <Icon className="mr-2 h-5 w-5" />
                  {item.label}
                </Button>
              </Link>
            )
          })}
        </div>
      </div>
      <div className="border-t border-gray-200 dark:border-gray-800 p-4">
        <Button
          variant="ghost"
          className="w-full justify-start text-base"
          onClick={handleSignOut}
        >
          <LogOut className="mr-2 h-5 w-5" />
          Sign Out
        </Button>
      </div>
      {canvasToDelete && (
        <DeleteCanvasDialog
          open={deleteDialogOpen}
          onOpenChange={setDeleteDialogOpen}
          onConfirm={() => handleDeleteCanvas(canvasToDelete.id)}
          canvasName={canvasToDelete.name}
        />
      )}
    </div>
  )
} import { useCanvas } from "@/contexts/CanvasContext";
import { Swiper, SwiperSlide } from 'swiper/react';
// import { MobileCanvasSection } from "../mobile/MobileCanvasSection";
import { MobileAIChat } from "./MobileAIChat";
import 'swiper/css';
import { Building2, Users, Workflow, Gift, Heart, Users2, Truck, Receipt, Coins, Icon } from "lucide-react";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip";
import { CanvasSection } from "../Canvas/CanvasSection";
import DynamicIcon from "../Util/DynamicIcon";

export function MobileBusinessModelCanvas() {
  const { formData, canvasTheme } = useCanvas();
  const [activeIndex, setActiveIndex] = useState(0);


  return (
    <div className={`flex flex-col h-[calc(100vh-64px)] ${
      canvasTheme === 'light' ? 'bg-white' : 'bg-gray-950'
    }`}>
      <div className="flex-1 w-full pt-4">
        <Swiper
          spaceBetween={30}
          onSlideChange={(swiper) => setActiveIndex(swiper.activeIndex)}
          className="h-full"
        >
          {Array.from(formData.sections.entries()).map(([key, section]) => {
            const sectionConfig = formData.canvasType.sections.find(s => s.name === section.name);
            return (
              <SwiperSlide key={key}>
                <CanvasSection
                  onChange={() => {}}
                  placeholder={section.name}
                  title={section.name}
                  icon={sectionConfig?.icon || ''}
                  sectionKey={key}
                  section={formData.sections.get(key) || { name: '', items: [], qAndAs: [] }}
                />
              </SwiperSlide>
            );
          })}
        </Swiper>
      </div>

      <div className={`${
        canvasTheme === 'light' ? 'bg-white' : 'bg-gray-950'
      }`}>
        <TooltipProvider>
          <div className="flex justify-between px-4 py-2">
          {Array.from(formData.sections.entries()).map(([key, section], index) => {
            const sectionConfig = formData.canvasType.sections.find(s => s.name === section.name);
              const icon = sectionConfig?.icon;
              return (
                <Tooltip key={section.name}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      className={`mt-2 h-8 w-8 ${
                        index === activeIndex
                          ? `${canvasTheme === 'light' ? 'bg-gray-100 text-gray-900' : 'bg-gray-800 text-gray-100'}`
                          : `${canvasTheme === 'light' ? 'text-gray-400' : 'text-gray-500'}`
                      }`}
                      onClick={() => {
                        const swiperEl = document.querySelector('.swiper') as HTMLElement & { swiper: any };
                        if (swiperEl) {
                          swiperEl.swiper.slideTo(index);
                        }
                      }}
                    >
                      <DynamicIcon name={icon || ''} className="h-4 w-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent 
                    side="top"
                    className={`${
                      canvasTheme === 'light' 
                        ? 'bg-gray-100 text-gray-900 border-gray-200' 
                        : 'bg-gray-900 text-gray-100 border-gray-800'
                    }`}
                  >
                    {section.name}
                  </TooltipContent>
                </Tooltip>
              );
            })}
            <MobileAIChat />
          </div>

        </TooltipProvider>
        
        <div className="px-4 py-1">
        </div>
      </div>
    </div>
  );
}'use client'

import { BusinessModelCanvasComponent } from "@/components/business-model-canvas"
import { SiteHeader } from "@/components/site/SiteHeader"
import { useAuth } from "@/contexts/AuthContext"
import LandingPage from "./landing/LandingPage"
import { ThemeProvider } from "next-themes"
import { useEffect, useState } from "react"
import { MobileHeader } from "./mobile/MobileHeader"
import { MobileBusinessModelCanvas } from "./mobile/MobileBusinessModelCanvas"
import { CanvasProvider } from "@/contexts/CanvasContext"
import { NewCanvasProvider } from "@/contexts/NewCanvasContext"
import { AIAgentProvider } from "@/contexts/AIAgentContext"
import { SidebarProvider } from "./ui/sidebar"
import { Providers } from "./providers/Providers"
import { useSidebarWidth } from "@/contexts/SIdebarWidthCOntext"
import { SIDEBAR_WIDTH_MOBILE} from "@/src/constants/sideBarWidths"
export function MainContent() {
  const { user, isVerified } = useAuth()
  const { sidebarWidth } = useSidebarWidth()
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768)
    }
    
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  return (
    <div className="h-screen flex flex-col overflow-hidden">
      {user && isVerified ? (
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Providers>
            <NewCanvasProvider>
              <CanvasProvider>
              <AIAgentProvider>
                <SidebarProvider defaultOpen={!isMobile} style={{
                  "--sidebar-width": isMobile ? SIDEBAR_WIDTH_MOBILE : sidebarWidth,
                } as React.CSSProperties}>
                {isMobile ? (
                  <>
                    <MobileHeader />
                    <MobileBusinessModelCanvas />
                  </>
                ) : (
                  <div className="flex flex-col h-screen overflow-hidden">
                    <SiteHeader />
                    <div className="flex-1 overflow-hidden">
                      <BusinessModelCanvasComponent />
                    </div>
                  </div>
                )}
                </SidebarProvider>
              </AIAgentProvider>
            </CanvasProvider>
            </NewCanvasProvider>  
          </Providers>  
        </ThemeProvider>
      ) : (
        <LandingPage />
      )}
    </div>
  )
} "use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
} 'use client'

import { Button } from "@/components/ui/button"
import { useAuth } from "@/contexts/AuthContext"
import { User, LogOut, CreditCard, Settings, Menu } from "lucide-react"
import { useState } from "react"
import { AuthDialog } from "@/components/auth/AuthDialog"
import Link from 'next/link'
import { SidebarTrigger, useSidebar } from "../ui/sidebar"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { SubscriptionProvider, useSubscription } from "@/contexts/SubscriptionContext"
import { SubscriptionBadge } from "../subscription/SubscriptionBadge"


export function SiteHeader() {
  const { user, logout, userData } = useAuth()
  const { subscriptionStatus } = useSubscription()
  const [showAuthDialog, setShowAuthDialog] = useState(false)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)
  const handleSignOut = async () => {
    try {
      await logout()
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }

  return (
    <header className="sticky top-0 z-40 w-full border-b border-gray-200 dark:border-gray-800 bg-background">
      <div className="flex h-16 items-center justify-between px-4">
        <div className="flex items-center gap-4">
          <Link className="flex items-center justify-center" href="#">
            <span className="text-2xl font-extrabold text-foreground">cavvy.ai</span>
          </Link>
        </div>
        
        <nav className="flex items-center gap-6">
          {!user && (
            <>
              <Link href="/features" className="hover:underline underline-offset-4 transition-colors font-extrabold">
                Features
              </Link>
              <Link href="/faq" className="hover:underline underline-offset-4 transition-colors font-extrabold">
                FAQ
              </Link>
              <Link href="/pricing" className="hover:underline underline-offset-4 transition-colors font-extrabold">
                Pricing
              </Link>
            </>
          )}
          {user && (
            <SubscriptionProvider>
              <SubscriptionBadge />
            </SubscriptionProvider>
          )}

          {user ? (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button 
                  variant="ghost" 
                  className="relative h-8 w-8 rounded-full hover:bg-muted-foreground/10"
                >
                  <div className="absolute inset-0 rounded-full bg-muted flex items-center justify-center">
                    <User className="h-4 w-4" />
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <div className="flex items-center justify-start gap-2 p-2">
                  <div className="flex flex-col space-y-1 leading-none">
                    <p className="font-medium">{user.email}</p>
                  </div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem asChild>
                  <Link href="/profile">
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Profile</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuItem asChild>
                  <Link href="/billing">
                    <CreditCard className="mr-2 h-4 w-4" />
                    <span>Billing</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleSignOut}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          ) : (
            <Button
              onClick={() => setShowAuthDialog(true)}
              variant="outline"
              className="font-extrabold"
            >
              Sign In
            </Button>
          )}
        </nav>
      </div>
      <AuthDialog 
        isOpen={showAuthDialog}
        openSignUp={false}
        onClose={() => setShowAuthDialog(false)}
        onSuccess={() => setShowAuthDialog(false)}
      />
    </header>
  )
} 'use client'

import { useCanvas } from "@/contexts/CanvasContext"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { formatDistanceToNow } from "date-fns"
import { Grid2x2 } from 'lucide-react'
import { motion } from "framer-motion"
import { useRef, useEffect, useState } from "react"
import { useLayouts } from "@/contexts/LayoutContext"
import { useCanvasTypes } from "@/contexts/CanvasTypeContext"
import { CanvasLayoutDetails, CanvasType } from "@/types/canvas-sections"
import { useNewCanvas } from "@/contexts/NewCanvasContext"
import DynamicIcon from "./Util/DynamicIcon"
import { TAG_INFO } from "@/src/constants/tags"
import useEmblaCarousel from 'embla-carousel-react'

export function UserCanvasSelector() {
  const { userCanvases, loadCanvas } = useCanvas()
  const existingConstraintsRef = useRef<HTMLDivElement>(null)
  const newCanvasConstraintsRef = useRef<HTMLDivElement>(null)
  const { getLayoutsForSectionCount, getLayouts } = useLayouts()
  const { getCanvasTypes } = useCanvasTypes()
  const [canvasTypes, setCanvasTypes] = useState<Record<string, CanvasType>>({})
  const [canvasLayouts, setCanvasLayouts] = useState<Record<string, CanvasLayoutDetails>>({})
  const { setNewCanvas, setSelectedType } = useNewCanvas();
  const [searchTerm, setSearchTerm] = useState('')
  const [isDragging, setIsDragging] = useState(false);
  const [dragStartPosition, setDragStartPosition] = useState<{ x: number; y: number } | null>(null);
  const [existingCanvasesRef, existingCanvasesApi] = useEmblaCarousel({
    dragFree: true,
    containScroll: "trimSnaps"
  })
  const [newCanvasRef, newCanvasApi] = useEmblaCarousel({
    dragFree: true,
    containScroll: "trimSnaps"
  })

  const tagCarousels = TAG_INFO.reduce((acc, tag) => {
    const [ref, api] = useEmblaCarousel({
      dragFree: true,
      containScroll: "trimSnaps"
    });
    acc[tag.name] = { ref, api };
    return acc;
  }, {} as Record<string, { ref: ReturnType<typeof useEmblaCarousel>[0], api: ReturnType<typeof useEmblaCarousel>[1] }>);

  useEffect(() => {
    getCanvasTypes().then(setCanvasTypes)
  }, [getCanvasTypes])

  useEffect(() => {
    getLayouts().then(setCanvasLayouts)
  }, [getLayouts])

  const handleCanvasSelect = async (canvasId: string) => {
    await loadCanvas(canvasId)
    localStorage.setItem('lastCanvasId', canvasId)
  }

  const handleNewCanvasSelect = (type: CanvasType) => {
    setSelectedType(type);
    setNewCanvas([true, null]);
  };

  useEffect(() => {
    const preventScroll = (e: WheelEvent) => {
      e.preventDefault()
    }

    existingConstraintsRef.current?.addEventListener('wheel', preventScroll, { passive: false })
    newCanvasConstraintsRef.current?.addEventListener('wheel', preventScroll, { passive: false })

    return () => {
      existingConstraintsRef.current?.removeEventListener('wheel', preventScroll)
      newCanvasConstraintsRef.current?.removeEventListener('wheel', preventScroll)
    }
  }, [])

  const filteredCanvasTypes = Object.entries(canvasTypes).filter(([_, type]) =>
    type.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const getCanvasTypesByTag = (tagName: string) => {
    return Object.entries(canvasTypes).filter(([_, type]) => type.tags?.includes(tagName));
  }

  return (
    <div className="flex flex-col w-full h-screen overflow-y-auto bg-background">
      <div className="p-8 space-y-12">
        <div>
          <h2 className="text-3xl font-bold tracking-tight mb-4">Your Canvases</h2>
          <div className="overflow-hidden" ref={existingCanvasesRef}>
            <div className="flex gap-6 pb-4">
              {userCanvases.map((canvas) => (
                <motion.div
                  key={canvas.id}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  whileHover={{ scale: 1.02 }}
                  transition={{ duration: 0.2 }}
                  className="w-[450px] flex-shrink-0"
                >
                  <Card 
                    className="cursor-pointer hover:shadow-lg transition-shadow"
                    onClick={() => canvas.id && handleCanvasSelect(canvas.id)}
                  >
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-xl">{canvas.name}</CardTitle>
                        <div className="flex items-center gap-2 text-muted-foreground">
                          {canvas.canvasType.icon && <DynamicIcon name={canvas.canvasType.icon} className="h-6 w-6" />}
                          <span className="text-sm">
                            {canvas.canvasType.name}
                          </span>
                        </div>
                      </div>
                      <CardDescription>
                        <div className="flex items-start gap-4">
                          <p className="line-clamp-6 flex-1">{canvas.description}</p>
                          <div className="flex-shrink-0 w-24 h-24">
                            <div
                              className="w-full h-full grid gap-1"
                              style={{
                                gridTemplateColumns: canvas.canvasLayout.gridTemplate.columns,
                                gridTemplateRows: canvas.canvasLayout.gridTemplate.rows,
                              }}
                            >
                              {Array.from({ length: canvas.canvasLayout.sectionCount }).map((_, index) => (
                                <div
                                  key={index}
                                  className="rounded-sm bg-muted"
                                  style={{
                                    gridArea: canvas.canvasLayout.areas?.[index] || 'auto',
                                  }}
                                />
                              ))}
                            </div>
                          </div>
                        </div>
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="text-sm text-muted-foreground">
                        Last edited {canvas.updatedAt && formatDistanceToNow(canvas.updatedAt, { addSuffix: true })}
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          </div>
        </div>

        <div>
          <div className="flex items-center mb-4">
            <h2 className="text-3xl font-bold tracking-tight mr-4">Create New Canvas</h2>
            <input
              type="text"
              placeholder="Search canvas types..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="border border-gray-300 rounded-md p-2 max-w-xs"
            />
          </div>
          <div className="overflow-hidden" ref={newCanvasRef}>
            <div className="flex gap-6 pl-6">
              {filteredCanvasTypes.map(([key, type]) => (
                <motion.div
                  key={key}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  whileHover={{ 
                    scale: 1.15,
                    zIndex: 50,
                    transition: { duration: 0.3 }
                  }}
                  transition={{ duration: 0.2 }}
                  className="w-[300px] flex-shrink-0 py-6"
                >
                  <Card 
                    className="cursor-pointer hover:shadow-xl transition-all duration-300 relative group h-[280px]"
                    onClick={() => handleNewCanvasSelect(type)}
                  >
                    <CardHeader className="group-hover:opacity-0 transition-opacity duration-300">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-xl">{type.name}</CardTitle>
                        {type.icon && <DynamicIcon name={type.icon} className="h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors" />}
                      </div>
                      <CardDescription className="line-clamp-2">
                        {type.description}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="group-hover:opacity-0 transition-opacity duration-300">
                        <div className="mt-2">
                          <div className="w-full h-24">
                            <div
                              className="w-full h-full grid gap-1"
                              style={{
                                gridTemplateColumns: type.defaultLayout?.layout.gridTemplate.columns,
                                gridTemplateRows: type.defaultLayout?.layout.gridTemplate.rows,
                              }}
                            >
                              {Array.from({ length: type.sections.length }).map((_, index) => (
                                <div
                                  key={index}
                                  className="rounded-sm bg-muted"
                                  style={{
                                    gridArea: type.defaultLayout?.layout.areas?.[index] || 'auto',
                                  }}
                                />
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>

                      <div 
                        className="absolute inset-x-4 top-8 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-4 group-hover:-translate-y-2"
                        style={{
                          display: 'grid',
                          gridTemplateColumns: type.defaultLayout?.layout.gridTemplate.columns || 'repeat(2, 1fr)',
                          gridTemplateRows: type.defaultLayout?.layout.gridTemplate.rows || 'repeat(2, 1fr)',
                          gap: '0.5rem',
                          height: '240px'
                        }}
                      >
                        {type.sections.map((section, index) => {
                          let gridArea;
                          if (type.defaultLayout?.layout.areas?.[index]) {
                            const [row, col, rowSpan, colSpan] = type.defaultLayout.layout.areas[index].split('/').map(n => n.trim());
                            gridArea = `${row} / ${col} / ${rowSpan} / ${colSpan}`;
                          } else {
                            const row = Math.floor(index / 2) + 1;
                            const col = (index % 2) + 1;
                            gridArea = `${row} / ${col} / ${row + 1} / ${col + 1}`;
                          }
                          
                          return (
                            <div
                              key={index}
                              className="flex items-center justify-center gap-2 rounded-md border-2 border-dashed
                                border-primary/20 bg-primary/5 transition-all duration-300"
                              style={{ gridArea }}
                            >
                              <div className="flex items-center justify-center flex-wrap gap-1">
                                <DynamicIcon 
                                  name={section.icon} 
                                  className="w-4 h-4 text-primary"
                                />
                                <span className="text-xs text-center text-primary">
                                  {section.name}
                                </span>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          </div>
        </div>

        {TAG_INFO.map(tag => {
          const canvasTypesForTag = getCanvasTypesByTag(tag.name);
          if (canvasTypesForTag.length === 0) return null;

          return (
            <div key={tag.name}>
              <h2 className="text-3xl font-bold tracking-tight mb-4">{`${tag.name} Canvases`}</h2>
              <div className="overflow-hidden" ref={tagCarousels[tag.name].ref}>
                <div className="flex gap-6 pl-6">
                  {canvasTypesForTag.map(([key, type]) => (
                    <motion.div
                      key={key}
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      whileHover={{ 
                        scale: 1.15,
                        zIndex: 50,
                        transition: { duration: 0.3 }
                      }}
                      transition={{ duration: 0.2 }}
                      className="w-[300px] flex-shrink-0 py-6"
                    >
                      <Card 
                        className="cursor-pointer hover:shadow-xl transition-all duration-300 relative group h-[280px]"
                        onClick={() => handleNewCanvasSelect(type)}
                      >
                        <CardHeader className="group-hover:opacity-0 transition-opacity duration-300">
                          <div className="flex items-center justify-between">
                            <CardTitle className="text-xl">{type.name}</CardTitle>
                            {type.icon && <DynamicIcon name={type.icon} className="h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors" />}
                          </div>
                          <CardDescription className="line-clamp-2">
                            {type.description}
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="group-hover:opacity-0 transition-opacity duration-300">
                            <div className="mt-2">
                              <div className="w-full h-24">
                                <div
                                  className="w-full h-full grid gap-1"
                                  style={{
                                    gridTemplateColumns: type.defaultLayout?.layout.gridTemplate.columns,
                                    gridTemplateRows: type.defaultLayout?.layout.gridTemplate.rows,
                                  }}
                                >
                                  {Array.from({ length: type.sections.length }).map((_, index) => (
                                    <div
                                      key={index}
                                      className="rounded-sm bg-muted"
                                      style={{
                                        gridArea: type.defaultLayout?.layout.areas?.[index] || 'auto',
                                      }}
                                    />
                                  ))}
                                </div>
                              </div>
                            </div>
                          </div>

                          <div 
                            className="absolute inset-x-4 top-8 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-4 group-hover:-translate-y-2"
                            style={{
                              display: 'grid',
                              gridTemplateColumns: type.defaultLayout?.layout.gridTemplate.columns || 'repeat(2, 1fr)',
                              gridTemplateRows: type.defaultLayout?.layout.gridTemplate.rows || 'repeat(2, 1fr)',
                              gap: '0.5rem',
                              height: '240px'
                            }}
                          >
                            {type.sections.map((section, index) => {
                              let gridArea;
                              if (type.defaultLayout?.layout.areas?.[index]) {
                                const [row, col, rowSpan, colSpan] = type.defaultLayout.layout.areas[index].split('/').map(n => n.trim());
                                gridArea = `${row} / ${col} / ${rowSpan} / ${colSpan}`;
                              } else {
                                const row = Math.floor(index / 2) + 1;
                                const col = (index % 2) + 1;
                                gridArea = `${row} / ${col} / ${row + 1} / ${col + 1}`;
                              }
                              
                              return (
                                <div
                                  key={index}
                                  className="flex items-center justify-center gap-2 rounded-md border-2 border-dashed
                                    border-primary/20 bg-primary/5 transition-all duration-300"
                                  style={{ gridArea }}
                                >
                                  <div className="flex items-center justify-center flex-wrap gap-1">
                                    <DynamicIcon 
                                      name={section.icon} 
                                      className="w-4 h-4 text-primary"
                                    />
                                    <span className="text-xs text-center text-primary">
                                      {section.name}
                                    </span>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  )
}import React from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog'
import { Textarea } from '@/components/ui/textarea'
import { DialogClose } from '@radix-ui/react-dialog'
import { useCanvas } from '@/contexts/CanvasContext'
import { Plus } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { CanvasLayout, CanvasLayoutDetails } from '@/types/canvas-sections'
import { CanvasType } from '@/types/canvas-sections'
import { useCanvasFolders } from '@/contexts/CanvasFoldersContext'

interface NewCanvasDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  canvasType: CanvasType;
  layout?: CanvasLayout;
  folderId?: string;
}

export function NewCanvasDialog({ open, onOpenChange, canvasType, layout, folderId}: NewCanvasDialogProps) {
  const { createNewCanvas, loadCanvas } = useCanvas();
  const { rootFolderId, setCurrentFolder } = useCanvasFolders()
  const [tempName, setTempName] = React.useState('')
  const [tempDescription, setTempDescription] = React.useState('')
  const [isValid, setIsValid] = React.useState(true)

  const handleSave = async () => {
    if (!tempName.trim()) {
      setIsValid(false)
      return
    }

    try {
      console.log('Creating new canvas with:', {
        name: tempName.trim(),
        description: tempDescription.trim(),
        canvasType: canvasType || '',
        layout: layout || ''
      });

      const newCanvasId = await createNewCanvas({
        name: tempName.trim(),
        description: tempDescription.trim(),
        canvasType: canvasType,
        layout: layout,
        folderId: folderId || rootFolderId
      })
      
      if (newCanvasId) {
        await loadCanvas(newCanvasId)
        localStorage.setItem('lastCanvasId', newCanvasId)
      }
      
      // Reset form and close dialog
      setTempName('')
      setTempDescription('')
      onOpenChange(false)
    } catch (error) {
      console.error('Failed to create canvas:', error)
      // Optionally add error handling UI here
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>
      <div className="flex items-center gap-1 px-4">
      <Button
          variant="default"
          className="mt-4"
        >
          Create Canvas
        </Button>
        </div>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Canvas</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col gap-4">
          <div>
            <Input
              placeholder="Name"
              value={tempName}
              onChange={(e) => {
                const trimmed = e.target.value.trim()
                setIsValid(!!trimmed)
                setTempName(e.target.value)
              }}
              className={!isValid ? 'border-red-500' : ''}
            />
            {!isValid && (
              <p className="text-sm text-red-500 mt-1">Name cannot be empty</p>
            )}
          </div>
          <Textarea
            placeholder={`Description

The more detail you provide, the better the AI can understand your situation and the more insightful the advice will be.
              `}
            value={tempDescription}
            onChange={(e) => setTempDescription(e.target.value)}
            className="min-h-[200px]"
          />
          <DialogFooter>
            <DialogClose asChild>
              <Button onClick={handleSave}>
                Create Canvas
              </Button>
            </DialogClose>
          </DialogFooter>
        </div>
      </DialogContent>
    </Dialog>
  )
} 