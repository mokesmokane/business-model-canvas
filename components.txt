import React from 'react'
import { ScrollArea } from '@/components/ui/scroll-area'
import { LayoutDashboard } from 'lucide-react'
import { SidebarSection } from './SidebarSection'
import { useAuth } from '@/contexts/AuthContext'

interface SidebarContentProps {
  isExpanded: boolean
}

export function SidebarContent({ isExpanded }: SidebarContentProps) {
  const { userCanvases } = useAuth()

  return (
    <div className={`flex flex-col h-full ${isExpanded ? '' : 'items-center'}`}>
      <ScrollArea className={`flex-grow ${isExpanded ? 'w-full' : 'w-16'}`}>
        <div className={`flex flex-col gap-4 ${isExpanded ? 'px-4 py-2' : 'items-center py-2'}`}>
          <SidebarSection
            icon={LayoutDashboard}
            title="Business Models"
            isExpanded={isExpanded}
            items={userCanvases.map(canvas => ({
              id: canvas.id,
              name: canvas.companyName || 'Untitled Canvas'
            }))}
          />
        </div>
      </ScrollArea>
    </div>
  )
}import { ChevronLeft, ChevronRight, LucideIcon, Plus, Trash2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import React from 'react';
import { useCanvas } from '@/contexts/CanvasContext';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { NewCanvasDialog } from '@/components/NewCanvasDialog';
import { useExpanded } from '@/contexts/ExpandedContext';

interface SectionItem {
  id: string;
  name: string;
}

interface SidebarSectionProps {
  icon: LucideIcon;
  title: string;
  items: SectionItem[];
  isExpanded: boolean;
  onItemClick?: (id: string) => void;
  onNewItem?: () => void;
}

export function SidebarSection({ 
  icon: Icon, 
  title, 
  items, 
  isExpanded
}: SidebarSectionProps) {
  const { loadCanvas, createNewCanvas, deleteCanvas, resetForm, currentCanvas } = useCanvas();
  const [dialogOpen, setDialogOpen] = React.useState(false);
  const { setIsExpanded, setIsWide } = useExpanded()

  const handleCanvasSelect = React.useCallback(async (canvasId: string) => {
    await loadCanvas(canvasId);
    localStorage.setItem('lastCanvasId', canvasId);
  }, [loadCanvas]);
  
  const handleNewCanvas = React.useCallback(() => {
    setDialogOpen(true);
  }, []);

  const handleDeleteCanvas = React.useCallback(async (canvasId: string) => {
    await deleteCanvas(canvasId);
    if (localStorage.getItem('lastCanvasId') === canvasId) {
      localStorage.removeItem('lastCanvasId');
      if (items.length > 0) {
        handleCanvasSelect(items[0].id);
      } else {
        resetForm();
        handleNewCanvas();
      }
    }
  }, [deleteCanvas, createNewCanvas, handleCanvasSelect, items]);

  return (
    <div className={isExpanded ? "space-y-2 w-full" : "flex flex-col items-center"}>
      {isExpanded ? (
        <>
          <h3 className="text-sm font-semibold text-gray-300 flex items-center px-4 py-2">
            <Icon className="h-4 w-4 mr-2" />
            {title}
            <div className="flex-grow"></div>
            <Button variant="ghost" size="icon" className="h-8 w-8 text-gray-400 hover:text-gray-100" onClick={()=>setIsExpanded(false)}>
              <ChevronLeft className="h-4 w-4" />
            </Button>
          </h3>
          <NewCanvasDialog/>
          {items.map((item) => (
            <div key={item.id} className="flex items-center gap-1 px-4">
              <Button
                variant="ghost"
                className={`flex-1 justify-start text-gray-400 hover:text-gray-100 ${
                  currentCanvas?.id === item.id ? 'bg-gray-800/50 text-gray-100 font-medium' : ''
                }`}
                onClick={() => handleCanvasSelect(item.id)}
              >
                {item.name}
              </Button>
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button variant="ghost" size="icon" className="h-8 w-8 text-gray-400 hover:text-gray-100">
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent className="bg-gray-900 border-gray-800">
                  <AlertDialogHeader>
                    <AlertDialogTitle className="text-gray-100">Delete Canvas</AlertDialogTitle>
                    <AlertDialogDescription className="text-gray-400">
                      Are you sure you want to delete "{item.name}"? This action cannot be undone.
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel className="bg-gray-800 text-gray-100 hover:bg-gray-700 border-gray-700">
                      Cancel
                    </AlertDialogCancel>
                    <AlertDialogAction 
                      onClick={() => handleDeleteCanvas(item.id)}
                      className="bg-red-600 text-gray-100 hover:bg-red-700"
                    >
                      Delete
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </div>
          ))}
        </>
      ) : (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button 
              variant="ghost" 
              size="icon" 
              className="w-10 h-10 p-0 text-gray-400 hover:text-gray-100"
              onClick={()=>{setIsExpanded(true); setIsWide(false)}}
            >
              <Icon className="h-5 w-5" />
            </Button>
          </TooltipTrigger>
          <TooltipContent side="right" className="bg-gray-900 text-gray-100 border-gray-800">
            {title}
          </TooltipContent>
        </Tooltip>
      )}
    </div>
  )
}import { Button } from '@/components/ui/button'

const actions = [
  { key: 'suggest', label: 'Suggest' },
  { key: 'question', label: 'Question Me' },
  { key: 'critique', label: 'Critique' },
  { key: 'research', label: 'Research' },
]

interface ActionButtonsProps {
  onActionSelect: (action: string) => void;
}

export function ActionButtons({ onActionSelect }: ActionButtonsProps) {
  return (
    <div className="flex justify-evenly gap-2 px-2 py-2">
      {actions.map(({ key, label }) => (
        <Button
          key={key}
          variant="outline"
          size="sm"
          className={`
            border-gray-700 
            bg-gray-900 text-gray-400 hover:bg-gray-800 hover:text-gray-100
          `}
          onClick={() => onActionSelect(key)}
        >
          {label}
        </Button>
      ))}
    </div>
  )
} 'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Send, Bot, User, AlertTriangle, Shrink, Expand } from 'lucide-react'
import AISuggestionItem from '@/components/Canvas/AISuggestionItem'
import { AIThinkingIndicator } from '@/components/ui/ai-thinking'
import { useCanvas } from '@/contexts/CanvasContext'
import ReactMarkdown from 'react-markdown'
import { useChat } from '@/contexts/ChatContext'
import { Message } from '@/contexts/ChatContext'
import { SectionButtons } from './SectionButtons'
import { ActionButtons } from './ActionButtons'
import { sendChatRequest } from '@/services/aiService'
import { motion, AnimatePresence } from 'framer-motion'
import { useExpanded } from '@/contexts/ExpandedContext'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'

export function AIChatArea() {
  const { updateSection, formData } = useCanvas()
  const { messages, addMessage, addMessages, input, setInput, isLoading, setIsLoading } = useChat()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const [activeSection, setActiveSection] = useState<string | null>(null)
  const { isExpanded, isWide, setIsExpanded, setIsWide } = useExpanded()
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, isLoading])

  const handleAddSuggestion = (index: number, section: string, suggestion: string, rationale: string, suggestionId: string) => {
    const currentItems = (formData[section as keyof typeof formData] as string[]) || []
    const newItems = [...currentItems, `${suggestion}\n\n${rationale}`]
    console.log(`Adding suggestion to section: ${section}`)
    updateSection(section, newItems)
    handleRemoveSuggestion(index, suggestionId)
  }

  const handleRemoveSuggestion = (index: number, suggestionId: string) => {
    console.log(`Removing suggestion with id: ${suggestionId} from message index: ${index}`)
    let updatedMessage = {...messages[index],
      suggestions: messages[index]?.suggestions?.filter((s: any) => s.id !== suggestionId)
    }
    console.log(`Updated message: ${JSON.stringify(updatedMessage, null, 2)}`)
    const updatedMessages = [...messages.slice(0, index), updatedMessage, ...messages.slice(index + 1)]
    console.log(`Updated messages: ${JSON.stringify(updatedMessages, null, 2)}`)
    addMessages(updatedMessages)
  }

  const handleSend = async () => {
    if (input.trim()) {
      const userMessage = { role: 'user', content: input } as Message
      addMessages([...messages, userMessage])      
      setInput('')
      setIsLoading(true)

      try {
        const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]
        const aiResponse = await sendChatRequest([...currentMessages, userMessage], formData)
        addMessages([...messages, aiResponse as Message])
      } catch (error) {
        const errorMessage = error instanceof Error 
          ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
          : String(error)
        
        addMessages([...messages, { 
          role: 'error', 
          content: `An error occurred:\n\n${errorMessage}` 
        }])
      } finally {
        setIsLoading(false)
      }
    }
  }

  const handleDismiss = (index: number, suggestionId: string) => {
    handleRemoveSuggestion(index, suggestionId)
  }

  const handleExpand = async (suggestion: { suggestion: string }) => {
    const expandMessage = `Tell me more about "${suggestion.suggestion}"`
    setInput('')
    setIsLoading(true)

    try {
      const userMessage = { role: 'user', content: 'Tell me more' } as Message
      const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]
      addMessages([...currentMessages, userMessage])

      const aiResponse = await sendChatRequest([...currentMessages, { role: 'user', content: expandMessage }], formData)
      addMessages([...messages, aiResponse as Message])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...messages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  const handleAction = async (action: string) => {
    const actionMessage = action === 'question' ? `Question me about ${activeSection}` : action === 'critique' ? `Critique the ${activeSection}` : action === 'research' ? `Research the ${activeSection}` : `Suggest things for ${activeSection}`
    setIsLoading(true)
    setActiveSection(null)
    const userMessage = { role: 'user', content: actionMessage, action: action } as Message
    const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]

    try {
      addMessages([...currentMessages, userMessage])

      const aiResponse = await sendChatRequest([...currentMessages, userMessage], formData)
      addMessages([...currentMessages, userMessage, aiResponse as Message])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...currentMessages, userMessage, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className={`h-full flex flex-col ${isExpanded ? '' : 'items-center'}`}>
      {isExpanded ? (
        <>
          <div className="flex items-center justify-between gap-2 p-4 border-b border-gray-800">
            <div className="flex items-center gap-2">
              <Bot className="h-4 w-4 text-gray-400" />
              <h3 className="text-sm font-semibold text-gray-300">AI Assistant</h3>
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="text-gray-400 hover:text-gray-100"
              onClick={()=>setIsWide(!isWide)}
            >
              {isWide ? <Shrink className="h-4 w-4" /> : <Expand className="h-4 w-4" />}
            </Button>
          </div>
          <ScrollArea className="flex-grow p-4">
            <div className="space-y-4">
              {messages.map((message, messageIndex) => (
                <div key={messageIndex} className={`flex gap-2 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                  {message.role === 'assistant' && (
                    <div className="w-6 h-6 rounded-full bg-gray-800 flex items-center justify-center">
                      <Bot className="w-4 h-4 text-gray-300" />
                    </div>
                  )}
                  <div className={`max-w-[600px] rounded-lg p-3 ${
                    message.role === 'user' 
                      ? 'bg-gray-800 text-gray-100 ml-6' 
                      : message.role === 'assistant'
                      ? 'bg-gray-800/50 text-gray-100 mr-6'
                      : 'bg-red-900/50 text-gray-100'
                  }`}>
                    {message.role === 'error' ? (
                      <div className="flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4 text-red-400" />
                        <span>{message.content}</span>
                      </div>
                    ) : (
                      <ReactMarkdown className="prose prose-invert prose-sm">
                        {message.content}
                      </ReactMarkdown>
                    )}
                    {message.suggestions && (
                      <div className="mt-2">
                        <AnimatePresence initial={false}>
                          {message.suggestions.map((suggestion, index) => (
                            <motion.div
                              key={suggestion.id || index}
                              initial={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                              animate={{ opacity: 1, height: "auto", marginBottom: "0.5rem" }}
                              exit={{ opacity: 0, height: 0, marginBottom: 0 }}
                              transition={{ duration: 0.2, ease: "easeOut" }}
                            >
                              <AISuggestionItem 
                                suggestion={suggestion}
                                onLike={() => handleAddSuggestion(messageIndex, suggestion.section, suggestion.suggestion, suggestion.rationale, suggestion.id)}
                                onDismiss={() => handleDismiss(messageIndex, suggestion.id)}
                                onExpand={() => handleExpand(suggestion)}
                              />
                            </motion.div>
                          ))}
                        </AnimatePresence>
                      </div>
                    )}
                  </div>
                  {message.role === 'user' && (
                    <div className="w-6 h-6 rounded-full bg-gray-800 flex items-center justify-center">
                      <User className="w-4 h-4 text-gray-300" />
                    </div>
                  )}
                </div>
              ))}
              {isLoading && (
                <div className="flex gap-2">
                  <div className="w-6 h-6 rounded-full bg-gray-800 flex items-center justify-center">
                    <Bot className="w-4 h-4 text-gray-300" />
                  </div>
                  <AIThinkingIndicator />
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
          <div className="flex-shrink-0">
            <SectionButtons 
              activeSection={activeSection}
              onSectionSelect={setActiveSection}
            />
            <div className={`transition-all duration-200 ease-in-out ${
              activeSection 
                ? 'opacity-100 max-h-20 translate-y-0' 
                : 'opacity-0 max-h-0 -translate-y-2 pointer-events-none'
            }`}>
              <ActionButtons
                onActionSelect={handleAction}
              />
            </div>
            <div className="p-2">
              <form onSubmit={(e) => { e.preventDefault(); handleSend(); }} className="flex gap-2">
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder={isExpanded ? "Type your message..." : "Chat..."}
                  className="flex-grow bg-gray-900 border-gray-800 text-gray-100 placeholder:text-gray-500"
                />
                <Button 
                  type="submit" 
                  size="icon" 
                  disabled={isLoading}
                  variant="ghost"
                  className="text-gray-400 hover:text-gray-100"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </form>
            </div>
          </div>
        </>
      ) : (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="w-10 h-10 p-0 text-gray-400 hover:text-gray-100"
              onClick={()=>{setIsExpanded(true); setIsWide(true)}}
            >
              <Bot className="h-5 w-5" />
              <span className="sr-only">AI Assistant</span>
            </Button>
          </TooltipTrigger>
          <TooltipContent side="right" className="bg-gray-900 text-gray-100 border-gray-800">
            AI Assistant
          </TooltipContent>
        </Tooltip>
      )}
    </div>
  )
}import { Button } from '@/components/ui/button'
import { 
  Building2, 
  Users, 
  Workflow, 
  Gift, 
  Heart, 
  Users2, 
  Truck, 
  Receipt, 
  Coins,
  LucideIcon
} from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'

const sections = [
  { icon: Building2, name: 'Key Partners', key: 'keyPartners' },
  { icon: Workflow, name: 'Key Activities', key: 'keyActivities' },
  { icon: Receipt, name: 'Key Resources', key: 'keyResources' },
  { icon: Gift, name: 'Value Propositions', key: 'valuePropositions' },
  { icon: Heart, name: 'Customer Relationships', key: 'customerRelationships' },
  { icon: Truck, name: 'Channels', key: 'channels' },
  { icon: Users2, name: 'Customer Segments', key: 'customerSegments' },
  { icon: Users, name: 'Cost Structure', key: 'costStructure' },
  { icon: Coins, name: 'Revenue Streams', key: 'revenueStreams' },
]

interface SectionButtonsProps {
  activeSection: string | null;
  onSectionSelect: (section: string | null) => void;
}

export function SectionButtons({ activeSection, onSectionSelect }: SectionButtonsProps) {
  return (
    <div className="flex justify-between px-4 py-2">
      {sections.map(({ icon: Icon, name, key }) => (
        <Tooltip key={key}>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className={`h-8 w-8 ${activeSection === key ? 'bg-gray-800 text-gray-100' : 'text-gray-400'}`}
              onClick={() => {
                if (activeSection !== key) {
                  onSectionSelect(key)
                  console.log(`Selected section: ${key}`)
                } else {
                  onSectionSelect(null)
                  console.log(`Deselected section: ${key}`)
                }
              }}
            >
              <Icon className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent side="top" className="bg-gray-900 text-gray-100 border-gray-800">
            {name}
          </TooltipContent>
        </Tooltip>
      ))}
    </div>
  )
} import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { TooltipProvider } from '@/components/ui/tooltip'
import { LayoutDashboard } from 'lucide-react'
import { SidebarContent } from './SidebarContent'
import { SidebarFooter } from './SidebarFooter'
import { AIChatArea } from './AIChatArea'
import { SidebarSection } from './SidebarSection'
import { useAuth } from '@/contexts/AuthContext'
import { useExpanded } from '@/contexts/ExpandedContext'


interface SidebarProps {
  isExpanded: boolean
  setShowAuthDialog: (show: boolean) => void
}

export function Sidebar({setShowAuthDialog}: SidebarProps) {
  const { userCanvases } = useAuth()
  const { isExpanded, isWide, setIsExpanded, setIsWide } = useExpanded()
  const sidebarWidth = !isExpanded ? '4rem' : isWide ? '42rem' : '24rem'

  return (
    <TooltipProvider>
      <div 
        className={`relative flex flex-col h-[calc(100vh-64px)] bg-gray-950 border-r border-gray-800 transition-all duration-300 ease-in-out ${
          isExpanded ? 'items-stretch' : 'items-center'
        }`}
        style={{ width: sidebarWidth }}
      >
        <div className={`flex flex-col gap-4 ${isExpanded ? 'pw-full py-2' : 'items-center py-2'}`}>
          <SidebarSection
            icon={LayoutDashboard}
            title="Business Models"
            isExpanded={isExpanded}
            items={userCanvases.map(canvas => ({
              id: canvas.id,
              name: canvas.companyName || 'Untitled Canvas'
            }))}
          />
        </div>
        {isExpanded && <div className="border-t border-gray-800 my-2 w-full"></div>}
        <div className={`flex-grow overflow-hidden ${isExpanded ? 'w-full' : 'w-16'}`}>
          <AIChatArea/>
        </div>
        <div className={`flex-none ${isExpanded ? 'w-full' : 'w-16'}`}>
          <SidebarFooter isExpanded={isExpanded} setShowAuthDialog={setShowAuthDialog} />
        </div>
      </div>
    </TooltipProvider>
  )
}import React from 'react'
import { Settings, HelpCircle, Users, LogOut, User } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import { useAuth } from '@/contexts/AuthContext'
import { useCanvas } from '@/contexts/CanvasContext'
import { useChat } from '@/contexts/ChatContext'

interface SidebarFooterProps {
  isExpanded: boolean
  setShowAuthDialog: (show: boolean) => void
}

export function SidebarFooter({ isExpanded, setShowAuthDialog }: SidebarFooterProps) {
  const { user, logout } = useAuth();
  const { clearState } = useCanvas();
  const { clearMessages } = useChat();

  const handleSignOut = async () => {
    try {
      await logout();
      clearState();
      clearMessages();
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const footerItems = [
    { icon: Users, label: 'Profile', action: () => {} },
    { icon: Settings, label: 'Settings', action: () => {} },
    { icon: HelpCircle, label: 'Help', action: () => {} },
    { icon: LogOut, label: 'Sign Out', action: handleSignOut },
  ];

  return (
    <div className={`mt-auto border-t border-gray-800 ${isExpanded ? 'py-2 px-4' : 'py-4'}`}>
      {isExpanded ? (
        <div className="flex flex-col gap-2">
          {footerItems.map(({ icon: Icon, label, action }) => (
            <Button
              key={label}
              variant="ghost"
              className="w-full justify-start text-gray-400 hover:text-gray-100 px-2"
              onClick={action}
            >
              <Icon className="mr-2 h-4 w-4" />
              {label}
            </Button>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center gap-4">
          {footerItems.map(({ icon: Icon, label, action }) => (
            <Tooltip key={label}>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="w-10 h-10 p-0 text-gray-400 hover:text-gray-100"
                  onClick={action}
                >
                  <Icon className="h-5 w-5" />
                  <span className="sr-only">{label}</span>
                </Button>
              </TooltipTrigger>
              <TooltipContent side="right" className="bg-gray-900 text-gray-100 border-gray-800">
                {label}
              </TooltipContent>
            </Tooltip>
          ))}
        </div>
      )}
    </div>
  )
}'use client'

import React, { useRef } from 'react'
import { cn } from '@/lib/utils'

interface ResizeHandleProps {
  onResize: (width: number) => void
  sidebarRef: React.RefObject<HTMLDivElement>
  onResizeStart: () => void
  onResizeEnd: () => void
}

export function ResizeHandle({ onResize, sidebarRef, onResizeStart, onResizeEnd }: ResizeHandleProps) {
  const isDragging = useRef(false)

  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault()
    isDragging.current = true
    onResizeStart()
    document.body.style.cursor = 'ew-resize'
    document.body.classList.add('select-none')
    
    const startX = e.pageX
    const startWidth = sidebarRef.current?.offsetWidth || 384

    const handleMouseMove = (moveEvent: MouseEvent) => {
      if (!isDragging.current) return
      
      const deltaX = moveEvent.pageX - startX
      const newWidth = Math.max(250, Math.min(800, startWidth + deltaX))
      
      if (sidebarRef.current) {
        sidebarRef.current.style.width = `${newWidth}px`
      }
    }
    
    const handleMouseUp = () => {
      isDragging.current = false
      onResizeEnd()
      document.body.style.cursor = ''
      document.body.classList.remove('select-none')
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
      
      if (sidebarRef.current) {
        onResize(sidebarRef.current.offsetWidth)
      }
    }
    
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  return (
    <div
      className={cn(
        "absolute right-0 top-0 bottom-0 w-1 cursor-ew-resize z-50",
        "hover:bg-gray-600 transition-colors",
        "after:absolute after:right-0 after:top-0 after:bottom-0 after:w-4 after:translate-x-1/2"
      )}
      onMouseDown={handleMouseDown}
    />
  )
} "use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = ({
  children,
  ...props
}: AlertDialogPrimitive.AlertDialogPortalProps) => (
  <AlertDialogPrimitive.Portal {...props}>
    {children}
  </AlertDialogPrimitive.Portal>
)
AlertDialogPortal.displayName = AlertDialogPrimitive.Portal.displayName

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, children, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-opacity animate-in fade-in",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed z-50 grid w-full max-w-lg scale-100 gap-4 border bg-background p-6 opacity-100 shadow-lg animate-in fade-in-90 slide-in-from-bottom-10 sm:rounded-lg sm:zoom-in-90 sm:slide-in-from-bottom-0",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-gray-200 bg-white text-gray-950 shadow-sm dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
import { Bot } from 'lucide-react'

export function AIThinkingIndicator() {
  return (
    <div className="flex items-center gap-2 p-2 bg-zinc-100 rounded-lg animate-in fade-in duration-300">
      <Bot className="h-4 w-4 text-zinc-500" />
      <div className="flex gap-1">
        <span className="w-1.5 h-1.5 bg-zinc-400 rounded-full animate-bounce [animation-delay:-0.3s]" />
        <span className="w-1.5 h-1.5 bg-zinc-400 rounded-full animate-bounce [animation-delay:-0.15s]" />
        <span className="w-1.5 h-1.5 bg-zinc-400 rounded-full animate-bounce" />
      </div>
    </div>
  )
} "use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-gray-200 dark:bg-gray-800" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm text-gray-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = ({
  children,
  ...props
}: DialogPrimitive.DialogPortalProps) => (
  <DialogPrimitive.Portal {...props}>
    <div className="fixed inset-0 z-50 flex items-start justify-center sm:items-center">
      {children}
    </div>
  </DialogPrimitive.Portal>
)
DialogPortal.displayName = DialogPrimitive.Portal.displayName

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background p-6 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300",
  {
    variants: {
      variant: {
        default: "bg-gray-900 text-gray-50 hover:bg-gray-900/90 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90",
        destructive:
          "bg-red-500 text-gray-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-gray-50 dark:hover:bg-red-900/90",
        outline:
          "border border-gray-200 bg-white hover:bg-gray-100 hover:text-gray-900 dark:border-gray-800 dark:bg-gray-950 dark:hover:bg-gray-800 dark:hover:text-gray-50",
        secondary:
          "bg-gray-100 text-gray-900 hover:bg-gray-100/80 dark:bg-gray-800 dark:text-gray-50 dark:hover:bg-gray-800/80",
        ghost: "hover:bg-gray-800 hover:text-gray-100 text-gray-400",
        link: "text-gray-900 underline-offset-4 hover:underline dark:text-gray-50",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 data-[state=open]:bg-gray-100 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-gray-800 dark:data-[state=open]:bg-gray-800",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-100 dark:bg-gray-800", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-gray-950 placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:file:text-gray-50 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
"use client"

import * as React from "react"
import { Header } from "./Header/Header"
import { CanvasContent } from "./Canvas/CanvasContent"
import { Sidebar } from "./Sidebar/Sidebar"
import { useAuth } from '@/contexts/AuthContext';
import { AuthDialog } from './auth/AuthDialog';
import { useEffect } from 'react';
import { useCanvas } from "@/contexts/CanvasContext"
import { useExpanded } from "@/contexts/ExpandedContext"

interface BusinessModelCanvas {
  companyName: string;
  companyDescription: string;
  designedFor: string;
  designedBy: string;
  date: string;
  version: string;
  keyPartners: string;
  keyActivities: string;
  valuePropositions: string;
  customerRelationships: string;
  channels: string;
  customerSegments: string;
  keyResources: string;
  costStructure: string;
  revenueStreams: string;
}

export function BusinessModelCanvasComponent() {
  const { user } = useAuth();
  const {
    formData,
    status,
    error,
    loadCanvas,
    updateField,
    resetForm
  } = useCanvas();
  
  const { isExpanded, setIsExpanded } = useExpanded()
  const [showAuthDialog, setShowAuthDialog] = React.useState(false);

  const handleExpandSidebar = React.useCallback(() => {
    setIsExpanded(true)
  }, []);

  useEffect(() => {
    const storedCanvasId = localStorage.getItem('lastCanvasId');
    if (storedCanvasId) {
      loadCanvas(storedCanvasId);
    }
  }, [loadCanvas]);

  const handleSave = React.useCallback(async () => {
    if (!user) {
      setShowAuthDialog(true);
      return;
    }
  }, [user]);

  return (
    <>
      <div className="flex h-[calc(100vh-64px)] bg-white dark:bg-gray-950">
        <Sidebar 
          isExpanded={isExpanded}
          setShowAuthDialog={setShowAuthDialog}
        />
        <div className="flex flex-col flex-1 overflow-hidden">
          <Header />
          <CanvasContent 
            onExpandSidebar={handleExpandSidebar}
          />
        </div>
      </div>
      <AuthDialog 
        isOpen={showAuthDialog}
        onClose={() => setShowAuthDialog(false)}
        onSuccess={handleSave}
      />
    </>
  );
}import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useAuth } from '@/contexts/AuthContext';

interface AuthDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export function AuthDialog({ isOpen, onClose, onSuccess }: AuthDialogProps) {
  const [isSignUp, setIsSignUp] = React.useState(false);
  const [email, setEmail] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [error, setError] = React.useState('');
  const [verificationSent, setVerificationSent] = React.useState(false);
  const { signUp, signIn } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      if (isSignUp) {
        await signUp(email, password);
        setVerificationSent(true);
      } else {
        await signIn(email, password);
        onSuccess();
        onClose();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  if (verificationSent) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Verify your email</DialogTitle>
            <DialogDescription>
              We've sent a verification email to {email}. Please check your inbox and click the verification link.
            </DialogDescription>
          </DialogHeader>
          <Button onClick={onClose}>Close</Button>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{isSignUp ? 'Create an account' : 'Sign in'}</DialogTitle>
          <DialogDescription>
            {isSignUp 
              ? 'Create an account to save your business model canvas'
              : ''}
          </DialogDescription>
        </DialogHeader>
        <form 
          onSubmit={handleSubmit} 
          className="space-y-4" 
          method="post"
        >
          <div>
            <Input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              id="email"
              name="email"
              autoComplete="email"
            />
          </div>
          <div>
            <Input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              id="current-password"
              name="current-password"
              autoComplete="current-password"
            />
          </div>
          {error && <p className="text-sm text-red-500">{error}</p>}
          <div className="flex flex-col gap-2">
            <Button type="submit">
              {isSignUp ? 'Sign up' : 'Sign in'}
            </Button>
            <Button 
              type="button" 
              variant="ghost"
              onClick={() => setIsSignUp(!isSignUp)}
            >
              {isSignUp 
                ? 'Already have an account? Sign in' 
                : "Don't have an account? Sign up"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
} 'use client'

import { AuthProvider as AuthContextProvider } from '@/contexts/AuthContext'

export function AuthProvider({ children }: { children: React.ReactNode }) {
  return <AuthContextProvider>{children}</AuthContextProvider>
} 'use client'

import React from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { useState, useRef, useEffect } from 'react'
import { 
  Building2, 
  Users, 
  Workflow, 
  Gift, 
  Heart, 
  Users2, 
  Truck, 
  Receipt, 
  Coins,
  LucideIcon,
  ThumbsUp,
  X
} from 'lucide-react'

// Map section names to their corresponding icons
const sectionIcons: Record<string, LucideIcon> = {
  keyPartners: Building2,
  keyActivities: Workflow,
  keyResources: Receipt,
  valuePropositions: Gift,
  customerRelationships: Heart,
  channels: Truck,
  customerSegments: Users2,
  costStructure: Users,
  revenueStreams: Coins,
}

interface AISuggestion {
  id: string;
  suggestion: string;
  rationale: string;
  section?: string;
  itemId?: string;
}

interface AISuggestionItemProps {
  suggestion: AISuggestion;
  onLike: () => void;
  onDismiss: () => void;
  onExpand: () => void;
}

function AISuggestionItem({ suggestion, onLike, onDismiss, onExpand }: AISuggestionItemProps) {
  const [isHovered, setIsHovered] = useState(false)
  const [isRemoving, setIsRemoving] = useState(false)
  const [isLiked, setIsLiked] = useState(false)
  const actionExecuted = useRef(false)

  const Icon = suggestion.section ? sectionIcons[suggestion.section] : undefined

  useEffect(() => {
    if (isRemoving && !actionExecuted.current) {
      actionExecuted.current = true;
      const timer = setTimeout(() => {
        if (isLiked) {
          console.log(`Like suggestion with id: ${suggestion.id}`)
          onLike()
        } else {
          onDismiss()
        }
      }, 500)
      return () => clearTimeout(timer)
    }
  }, [isRemoving, isLiked, onLike, onDismiss, suggestion.id])

  const handleLike = () => {
    setIsLiked(true)
    setIsRemoving(true)
  }

  const handleDismiss = () => {
    setIsLiked(false)
    setIsRemoving(true)
  }

  return (
    <Card 
      className={`mb-2 border-2 bg-gray-800/50 ${
        isHovered ? 'border-gray-700' : 'border-gray-800'
      } ${
        isRemoving
          ? isLiked
            ? 'scale-110 opacity-0 translate-y-[-20px]'
            : 'scale-90 opacity-0 translate-y-[20px]'
          : ''
      } transition-all duration-300`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <CardContent className="p-3 relative">
        <div className="flex items-start gap-2">
          {Icon && <Icon className="w-4 h-4 mt-1 text-gray-400" />}
          <div className="flex-1">
            <p className="text-sm text-gray-200 mb-1">{suggestion.suggestion}</p>
            <p className="text-xs text-gray-400">{suggestion.rationale}</p>
          </div>
        </div>
        <div className="flex gap-1 mt-2 justify-end">
          <Button
            size="sm"
            variant="ghost"
            className="text-gray-400 hover:text-gray-100"
            onClick={handleLike}
          >
            <ThumbsUp className="h-4 w-4" />
          </Button>
          <Button
            size="sm"
            variant="ghost"
            className="text-gray-400 hover:text-gray-100"
            onClick={handleDismiss}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

export default AISuggestionItem'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Send } from 'lucide-react'
interface DynamicInputProps {
    onSubmit: (value: string) => void
    onCancel?: () => void
    placeholder?: string
    initialValue?: string
  }
  
interface DynamicInputProps {
    onSubmit: (value: string) => void
    onCancel?: () => void
    placeholder?: string
    initialValue?: string
    isEditing?: boolean
  }
  
  export function DynamicInput({ 
    onSubmit, 
    onCancel, 
    placeholder = "Add item...",
    initialValue = "",
    isEditing = false
  }: DynamicInputProps) {
    const [inputValue, setInputValue] = useState(initialValue)
    const [isExpanded, setIsExpanded] = useState(!!initialValue)
    const [isFocused, setIsFocused] = useState(false)
    const [showButton, setShowButton] = useState(false)
    const textareaRef = useRef<HTMLTextAreaElement>(null)
  
    // Update input value when initialValue changes
    useEffect(() => {
      setInputValue(initialValue)
      setIsExpanded(!!initialValue)
      if (initialValue && textareaRef.current) {
        textareaRef.current.focus()
      }
    }, [initialValue])
  
    useEffect(() => {
      if (isExpanded && textareaRef.current) {
        textareaRef.current.focus()
      }
    }, [isExpanded])
  
    useEffect(() => {
      let timer: NodeJS.Timeout
      if (isExpanded) {
        timer = setTimeout(() => setShowButton(true), 300)
      } else {
        setShowButton(false)
      }
      return () => clearTimeout(timer)
    }, [isExpanded])
  
    const handleSubmit = () => {
      if (inputValue.trim()) {
        onSubmit(inputValue.trim())
        setInputValue('')
        setIsExpanded(false)
      }
    }
  
    const handleCancel = () => {
      setInputValue('')
      setIsExpanded(false)
      onCancel?.()
    }
  
    const handleKeyDown = (e: React.KeyboardEvent) => {
      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        handleSubmit()
      } else if (e.key === 'Escape' && onCancel) {
        e.preventDefault()
        handleCancel()
      }
    }
  
    return (
      <div 
        className="w-full"
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => {
          if (!inputValue && !isFocused) {
            setIsExpanded(false)
          }
        }}
      >
        <div className={`relative transition-all duration-300 ease-in-out`}>
          <Textarea
            ref={textareaRef}
            className={`w-full resize-none transition-all duration-300 ease-in-out ${
              isExpanded 
                ? 'h-32 pb-12' 
                : 'h-10 overflow-hidden text-ellipsis whitespace-nowrap'
            }`}
            placeholder={isExpanded ? placeholder : isEditing ? "Edit item..." : placeholder.split('\n')[0]}
            value={inputValue}
            onChange={(e) => {
              setInputValue(e.target.value)
              setIsExpanded(true)
            }}
            onKeyDown={handleKeyDown}
            onFocus={() => {
              setIsExpanded(true)
              setIsFocused(true)
            }}
            onBlur={() => {
              setIsFocused(false)
              if (!inputValue) {
                setIsExpanded(false)
              }
            }}
          />
          {isExpanded && (
            <div 
              className={`absolute right-2 bottom-2 flex items-center gap-2 transition-opacity duration-300 ease-in-out ${
                showButton ? 'opacity-100' : 'opacity-0'
              }`}
            >
              {onCancel && (
                <Button 
                  size="sm"
                  variant="outline"
                  onClick={handleCancel}
                  aria-label="Cancel"
                  className="py-1 h-7"
                >
                  Cancel
                </Button>
              )}
              <Button 
                size="sm"
                onClick={handleSubmit}
                disabled={!inputValue.trim()}
                aria-label={isEditing ? "Save changes" : "Add item"}
                className="py-1 h-7"
              >
                <Send className="h-4 w-4 mr-2" />
                {isEditing ? 'Save' : 'Send'}
              </Button>
            </div>
          )}
        </div>
      </div>
    )
  }'use client'

import React from 'react'
import { Button } from '@/components/ui/button'
import { 
  Sparkles,
  Lightbulb,
  MessageCircle
} from 'lucide-react'
import { useChat } from '@/contexts/ChatContext'
import { Message } from '@/contexts/ChatContext'
import { useCanvas } from '@/contexts/CanvasContext'
import { sendChatRequest } from '@/services/aiService'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

const actions = [
  { key: 'suggestEdit', label: 'Suggest Edit', icon: Lightbulb },
  { key: 'critique', label: 'Critique', icon: MessageCircle }
]

interface AIItemAssistButtonProps {
  section: string
  sectionKey: string
  onExpandSidebar: () => void
  onDropdownStateChange: (isOpen: boolean) => void
}

export function AIItemAssistButton({ 
  section, 
  sectionKey, 
  onExpandSidebar,
  onDropdownStateChange 
}: AIItemAssistButtonProps) {
  const { setIsLoading, addMessages, isLoading, messages } = useChat()
  const { formData } = useCanvas()

  const handleAction = async (action: string) => {
    onExpandSidebar()
    const actionMessage = action === 'question' 
      ? `Question me about ${section}` 
      : action === 'critique' 
      ? `Critique the ${section}` 
      : action === 'research' 
      ? `Research the ${section}` 
      : `Suggest things for ${section}`

    const message = {
      role: 'user',
      content: actionMessage,
      action: action
    } as Message

    const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]
    const updatedMessages = [...currentMessages, message]
    
    await addMessages(updatedMessages)
    setIsLoading(true)
    try {
      const aiResponse = await sendChatRequest(updatedMessages, formData)
      addMessages([...updatedMessages, aiResponse as Message])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...updatedMessages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <DropdownMenu onOpenChange={onDropdownStateChange}>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="outline"
          size="icon"
          className="ml-2"
        >
          <Sparkles className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48 bg-gray-900 border-gray-800">
        {actions.map(({ key, label, icon: Icon }) => (
          <DropdownMenuItem
            key={key}
            onClick={() => handleAction(key)}
            className="text-gray-400 hover:bg-gray-800 hover:text-gray-100 cursor-pointer flex items-center gap-2"
          >
            <Icon className="h-4 w-4" />
            {label}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
} 'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { 
  Sparkles,
  Lightbulb,
  HelpCircle,
  MessageCircle,
  Search
} from 'lucide-react'
import { useChat } from '@/contexts/ChatContext'
import { Message } from '@/contexts/ChatContext'
import { useCanvas } from '@/contexts/CanvasContext'
import { sendChatRequest } from '@/services/aiService'

const actions = [
  { key: 'suggest', label: 'Suggest', icon: Lightbulb },
  { key: 'question', label: 'Question Me', icon: HelpCircle },
  { key: 'critique', label: 'Critique', icon: MessageCircle },
  { key: 'research', label: 'Research', icon: Search },
]

interface AISectionAssistButtonProps {
  section: string
  sectionKey: string
  onExpandSidebar: () => void
}

export function AISectionAssistButton({ section, sectionKey, onExpandSidebar }: AISectionAssistButtonProps) {
  const { setIsLoading, addMessages, isLoading, messages } = useChat()
  const { formData } = useCanvas()
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)

  const handleAction = async (action: string) => {
    onExpandSidebar()
    const actionMessage = action === 'question' 
      ? `Question me about ${section}` 
      : action === 'critique' 
      ? `Critique the ${section}` 
      : action === 'research' 
      ? `Research the ${section}` 
      : `Suggest things for ${section}`

    const message = {
      role: 'user',
      content: actionMessage,
      action: action
    } as Message

    const currentMessages = [...messages.filter((m: Message) => m.role == 'system' || m.role == 'user' || m.role == 'assistant')]
    const updatedMessages = [...currentMessages, message]
    
    await addMessages(updatedMessages)
    setIsLoading(true)
    try {
      const aiResponse = await sendChatRequest(updatedMessages, formData)
      addMessages([...updatedMessages, aiResponse as Message])
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? `${error.name}: ${error.message}\n\nStack: ${error.stack}`
        : String(error)
      
      addMessages([...updatedMessages, { 
        role: 'error', 
        content: `An error occurred:\n\n${errorMessage}` 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div 
      className="relative"
      onMouseEnter={() => setIsDropdownOpen(true)}
      onMouseLeave={() => setIsDropdownOpen(false)}
    >
      <Button 
        variant="outline"
        size="icon"
        className="ml-2 hover:bg-gray-800/50 hover:text-gray-100 group"
        disabled={isLoading}
      >
        <Sparkles className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
      </Button>

      <div className={`
        absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-gray-900 border border-gray-800
        transform transition-all duration-200 ease-in-out origin-top-right z-50
        ${isDropdownOpen 
          ? 'opacity-100 scale-100 translate-y-0' 
          : 'opacity-0 scale-95 -translate-y-2 pointer-events-none'}
      `}>
        <div className="absolute -top-2 right-0 h-2 w-full" />
        <div className="py-1">
          {actions.map(({ key, label, icon: Icon }) => (
            <button
              key={key}
              onClick={() => handleAction(key)}
              className="flex w-full items-center gap-2 px-4 py-2 text-sm text-gray-400 hover:bg-gray-800 hover:text-gray-100"
            >
              <Icon className="h-4 w-4" />
              {label}
            </button>
          ))}
        </div>
      </div>
    </div>
  )
} 

export default AISectionAssistButtonimport React, { useEffect, useState } from 'react'
import ReactMarkdown from 'react-markdown'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { LucideIcon, Send } from 'lucide-react'
import { AIItemAssistButton } from './AIItemAssistButton'
// import { AISectionAssistButton } from './AISectionAssistButton' 
import { ScrollArea } from '@/components/ui/scroll-area'
import { Input } from '../ui/input'
import { Check, X, Edit2, Trash2 } from 'lucide-react'
import { DynamicInput } from './DynamicInput'
import AISuggestionItem from './AISuggestionItem'

interface SectionItemProps {
    item: string
    onDelete: () => void
    isEditing: boolean
    onEditStart: () => void
    onEditEnd: () => void
  }
  export function SectionItem({ 
    item, 
    onDelete, 
    isEditing,
    onEditStart,
    onEditEnd
  }: SectionItemProps) {
    const [isHovered, setIsHovered] = useState(false)
    const [isInteractingWithDropdown, setIsInteractingWithDropdown] = useState(false)

    const showControls = isHovered || isEditing || isInteractingWithDropdown

    return (
      <Card 
        className={`mb-2 p-3 transition-all duration-300 ${
          isEditing ? 'border-primary/50 bg-primary/5 shadow-md' : ''
        }`}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => !isInteractingWithDropdown && setIsHovered(false)}
      >
        <p className="text-sm whitespace-pre-wrap mb-2">
          {item}
        </p>
        <div 
          className={`transition-all duration-500 ease-[cubic-bezier(0.34,1.56,0.64,1)] ${
            showControls ? 'opacity-100 max-h-24 translate-y-0' : 'opacity-0 max-h-0 translate-y-2'
          } overflow-hidden`}
        >
          <div className="flex items-center space-x-2 mt-2 justify-end">
            <div onClick={(e) => e.stopPropagation()}>
              <AIItemAssistButton 
                section={item} 
                sectionKey={item} 
                onExpandSidebar={() => {}} 
                onDropdownStateChange={setIsInteractingWithDropdown}
              />
            </div>
            <Button 
              onClick={isEditing ? onEditEnd : onEditStart}
              size="sm" 
              variant={isEditing ? "default" : "outline"}
              className="flex items-center"
            >
              <Edit2 className="h-4 w-4" />
            </Button>
            <Button 
              onClick={onDelete} 
              size="sm" 
              variant="outline"
              className="flex items-center"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </Card>
    )
  }
  
  export default SectionItem'use client'

import React, { useEffect, useState } from 'react'
import ReactMarkdown from 'react-markdown'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { LucideIcon, Send } from 'lucide-react'
import { AISectionAssistButton } from './AISectionAssistButton'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Input } from '../ui/input'
import { Check, X, Edit2, Trash2 } from 'lucide-react'
import { DynamicInput } from './DynamicInput'
import AISuggestionItem from './AISuggestionItem'
import SectionItem from './SectionItem'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'

interface AISuggestion {
  id: string;
  suggestion: string;
  rationale: string;
}

interface CanvasSectionProps {
  title: string;
  sectionKey: string;
  icon: LucideIcon;
  items: string[];
  onChange: (value: string[]) => void;
  placeholder: string;
  className?: string;
}

export function CanvasSection({ 
  title, 
  sectionKey, 
  icon: Icon, 
  items, 
  onChange, 
  placeholder, 
  className 
}: CanvasSectionProps) {
  const itemsArray = Array.isArray(items) ? items : items ? [items] : [];
  const [editingIndex, setEditingIndex] = useState<number | null>(null)

  const handleAddOrUpdateItem = (content: string) => {
    if (editingIndex !== null) {
      // Update existing item
      const newItems = [...itemsArray]
      newItems[editingIndex] = content
      onChange(newItems)
      setEditingIndex(null)
    } else {
      // Add new item
      const newItems = [...itemsArray, content]
      onChange(newItems)
    }
  }

  const handleDeleteItem = (index: number) => {
    const newItems = [...itemsArray]
    newItems.splice(index, 1)
    onChange(newItems)
    if (editingIndex === index) {
      setEditingIndex(null)
    }
  }

  const handleEditStart = (index: number) => {
    setEditingIndex(index)
  }

  const handleEditCancel = () => {
    setEditingIndex(null)
  }

  return (
    <Card className={`flex flex-col ${className}`}>
      <CardHeader>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <CardTitle className="flex items-center gap-2">
                <Icon className="h-5 w-5" />
                {title}
                <div className="flex-1" />
                <AISectionAssistButton section={title} sectionKey={sectionKey} onExpandSidebar={() => {}} />
              </CardTitle>
            </TooltipTrigger>
            {(itemsArray.length > 0) && (
              <TooltipContent className="whitespace-pre-line text-sm text-muted-foreground">
                {placeholder}
              </TooltipContent>
            )}
          </Tooltip>
        </TooltipProvider>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col">
        <ScrollArea className="flex-1 mb-4">
          {itemsArray.length === 0 ? (
            <p className="text-gray-500 text-sm whitespace-pre-line">
              {placeholder}
            </p>
          ) : (
            itemsArray.map((item, index) => (
              <SectionItem
                key={index}
                item={item}
                onDelete={() => handleDeleteItem(index)}
                isEditing={editingIndex === index}
                onEditStart={() => handleEditStart(index)}
                onEditEnd={() => handleEditCancel()}
              />
            ))
          )}
        </ScrollArea>
        
        <div className="flex items-center space-x-2">
          <DynamicInput 
            placeholder={title}
            onSubmit={handleAddOrUpdateItem}
            onCancel={editingIndex !== null ? handleEditCancel : undefined}
            initialValue={editingIndex !== null ? itemsArray[editingIndex] : ''}
            isEditing={editingIndex !== null}
          />
        </div>
      </CardContent>
    </Card>
  )
}import { Building2, Users, Workflow, Gift, Heart, Users2, Truck, Receipt, Coins } from "lucide-react"
import { CanvasSection } from "./CanvasSection"
import { useEffect } from "react"
import { useCanvas } from "@/contexts/CanvasContext"

interface CanvasContentProps {
  onExpandSidebar: () => void
}

export function CanvasContent({ onExpandSidebar }: CanvasContentProps) {
  const { currentCanvas, formData, updateField, updateSection } = useCanvas();

  useEffect(() => {
    console.log('Canvas updated:', formData);
  }, [formData]);

  return (
    <div className="flex flex-col flex-1 p-4 space-y-4 overflow-auto">
      <div className="grid grid-cols-5 gap-4 flex-[2]">
        <CanvasSection
          title="Key Partners"
          sectionKey="keyPartners"
          icon={Building2}
          items={formData.keyPartners}
          onChange={(value: string[]) => updateSection('keyPartners', value)}
          placeholder={`Who are our Key Partners?
Who are our key suppliers?
Which Key Resources are we acquiring from partners?
Which Key Activities do partners perform?`}
        />
        <div className="flex flex-col space-y-4 flex-1">
          <CanvasSection
            title="Key Activities"
            sectionKey="keyActivities"
            icon={Workflow}
            items={formData.keyActivities}
            onChange={(value: string[]) => updateSection('keyActivities', value)}
            placeholder={`What Key Activities do our Value Propositions require?
Our Distribution Channels?
Customer Relationships?
Revenue Streams?`}
            className="flex-1"
          />
          <CanvasSection
            title="Key Resources"
            sectionKey="keyResources"
            icon={Receipt}
            items={formData.keyResources} 
            onChange={(value: string[]) => updateSection('keyResources', value)}
            placeholder={`What Key Resources do our Value Propositions require?
Our Distribution Channels? Customer Relationships?
Revenue Streams?`}
            className="flex-1"
          />
        </div>
        <CanvasSection
          title="Value Propositions"
          sectionKey="valuePropositions"
          icon={Gift}
          items={formData.valuePropositions}
          onChange={(value: string[]) => updateSection('valuePropositions', value)}
          placeholder={`What value do we deliver to the customer?
Which one of our customer's problems are we helping to solve?
What bundles of products and services are we offering to each Customer Segment?
Which customer needs are we satisfying?`}
        />
        <div className="flex flex-col space-y-4 flex-1">
          <CanvasSection
            title="Customer Relationships"
            sectionKey="customerRelationships"
            icon={Heart}
            items={formData.customerRelationships}
            onChange={(value: string[]) => updateSection('customerRelationships', value)}
            placeholder={`What type of relationship does each of our Customer Segments expect us to establish and maintain with them?
Which ones have we established?
How are they integrated with the rest of our business model?
How costly are they?`}
            className="flex-1"
          />
          <CanvasSection
            title="Channels"
            sectionKey="channels"
            icon={Truck}
            items={formData.channels}
            onChange={(value: string[]) => updateSection('channels', value)}
            placeholder={`Through which Channels do our Customer Segments want to be reached?
How are we reaching them now?
How are our Channels integrated?
Which ones work best?
Which ones are most cost-efficient?
How are we integrating them with customer routines?`}
            className="flex-1"
          />
        </div>
        <CanvasSection
          title="Customer Segments"
          sectionKey="customerSegments"
          icon={Users2}
          items={formData.customerSegments}
          onChange={(value: string[]) => updateSection('customerSegments', value)}
          placeholder={`For whom are we creating value?
Who are our most important customers?`}
        />
      </div>
      <div className="grid grid-cols-2 gap-4 flex-1">
        <CanvasSection
          title="Cost Structure"
          sectionKey="costStructure"
          icon={Users}
          items={formData.costStructure}
          onChange={(value: string[]) => updateSection('costStructure', value)}
          placeholder={`What are the most important costs inherent in our business model?
Which Key Resources are most expensive?
Which Key Activities are most expensive?`}
        />
        <CanvasSection
          title="Revenue Streams"
          sectionKey="revenueStreams"
          icon={Coins}
          items={formData.revenueStreams}
          onChange={(value: string[]) => updateSection('revenueStreams', value)}
          placeholder={`For what value are our customers really willing to pay?
For what do they currently pay?
How are they currently paying?
How would they prefer to pay?
How much does each Revenue Stream contribute to overall revenues?`}
        />
      </div>
    </div>
  )
} 'use client'

import { Button } from "@/components/ui/button"
import { useAuth } from "@/contexts/AuthContext"
import { User, LogOut, CreditCard, Settings, Menu } from "lucide-react"
import { useState } from "react"
import { AuthDialog } from "@/components/auth/AuthDialog"
import Link from 'next/link'
import { useExpanded } from "@/contexts/ExpandedContext"


export function SiteHeader() {
  const { user, logout, subscriptionStatus, userData } = useAuth()
  const [showAuthDialog, setShowAuthDialog] = useState(false)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)
  const { isExpanded, setIsExpanded } = useExpanded()

  console.log('SiteHeader Render:', {
    userExists: !!user,
    subscriptionStatus,
    userData
  });

  const handleSignOut = async () => {
    try {
      await logout()
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }

  return (
    <header className="w-full bg-gray-800 p-4 shadow-md">
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="icon"
            className="text-gray-400 hover:text-gray-100"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            <Menu className="h-4 w-4" />
          </Button>
          <Link href="/">
            <h1 className="text-2xl font-bold text-white hover:text-gray-200 transition-colors">cavvy.ai</h1>
          </Link>
        </div>
        
        <div className="flex items-center gap-8">
          {!user && (
            <nav className="flex gap-6">
              <Link href="/features" className="text-gray-300 hover:text-white transition-colors">
                Features
              </Link>
              <Link href="/faq" className="text-gray-300 hover:text-white transition-colors">
                FAQ
              </Link>
              <Link href="/pricing" className="text-gray-300 hover:text-white transition-colors">
                Pricing
              </Link>
            </nav>
          )}
          {user && (
            <>
              {subscriptionStatus === 'free' && (
                <Link href="/upgrade" className="text-gray-300 hover:text-white transition-colors">
                  Upgrade Plan
                </Link>
              )}
              {(subscriptionStatus === 'pro' || subscriptionStatus === 'enterprise') && (
                <div className="flex items-center gap-2 px-3 py-1.5 bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-full">
                  <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse" />
                  <span className="text-sm font-medium text-blue-400">
                    {subscriptionStatus === 'pro' ? 'Pro' : 'Enterprise'} Plan
                  </span>
                </div>
              )}
            </>
          )}

          {/* Auth button/dropdown */}
          {user ? (
            <div 
              className="relative group"
              onMouseEnter={() => setIsDropdownOpen(true)}
              onMouseLeave={() => setIsDropdownOpen(false)}
            >
              <Button 
                variant="ghost" 
                className="h-8 w-8 rounded-full p-0 hover:bg-gray-700"
              >
                <div className="w-8 h-8 rounded-full bg-gray-700 flex items-center justify-center">
                  <User className="h-4 w-4 text-white" />
                </div>
              </Button>

              <div className={`
                absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white
                transform transition-all duration-200 ease-in-out origin-top-right
                ${isDropdownOpen 
                  ? 'opacity-100 scale-100 translate-y-0' 
                  : 'opacity-0 scale-95 -translate-y-2 pointer-events-none'}
              `}>
                <div className="absolute -top-2 right-0 h-2 w-full" />
                <div className="rounded-md ring-1 ring-black ring-opacity-5 py-1">
                  <div className="flex items-center justify-start gap-2 p-2">
                    <div className="flex flex-col space-y-1 leading-none">
                      <p className="font-medium text-gray-900">{user.email}</p>
                    </div>
                  </div>
                  <hr className="my-1" />
                  <button className="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Profile</span>
                  </button>
                  <button className="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    <CreditCard className="mr-2 h-4 w-4" />
                    <span>Billing</span>
                  </button>
                  <hr className="my-1" />
                  <button 
                    onClick={handleSignOut}
                    className="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                  >
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Log out</span>
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <Button
              onClick={() => setShowAuthDialog(true)}
              variant="outline"
              className="text-gray-100 border-gray-100 bg-transparent hover:bg-gray-700 hover:text-white"
            >
              Sign In
            </Button>
          )}
        </div>
      </div>
      <AuthDialog 
        isOpen={showAuthDialog}
        onClose={() => setShowAuthDialog(false)}
        onSuccess={() => setShowAuthDialog(false)}
      />
    </header>
  )
} import React from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog'
import { Textarea } from '@/components/ui/textarea'
import { DialogClose } from '@radix-ui/react-dialog'
import { useCanvas } from '@/contexts/CanvasContext'
import { Plus } from 'lucide-react'

export function NewCanvasDialog() {
  const { createNewCanvas } = useCanvas();
  const [open, setOpen] = React.useState(false)
  const [tempName, setTempName] = React.useState('')
  const [tempDescription, setTempDescription] = React.useState('')
  const [isValid, setIsValid] = React.useState(true)

  const handleSave = async () => {
    if (!tempName.trim()) {
      setIsValid(false)
      return
    }

    try {
      await createNewCanvas({
        name: tempName.trim(),
        description: tempDescription.trim()
      })
      
      // Reset form and close dialog
      setTempName('')
      setTempDescription('')
      setOpen(false)
    } catch (error) {
      console.error('Failed to create canvas:', error)
      // Optionally add error handling UI here
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
          <Button variant="ghost" className="w-full justify-start pl-8">
            <Plus className="h-4 w-4" />
            New Canvas
          </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Canvas</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col gap-4">
          <div>
            <Input
              placeholder="Business Name"
              value={tempName}
              onChange={(e) => {
                const trimmed = e.target.value.trim()
                setIsValid(!!trimmed)
                setTempName(e.target.value)
              }}
              className={!isValid ? 'border-red-500' : ''}
            />
            {!isValid && (
              <p className="text-sm text-red-500 mt-1">Business name cannot be empty</p>
            )}
          </div>
          <Textarea
            placeholder="Business Description"
            value={tempDescription}
            onChange={(e) => setTempDescription(e.target.value)}
            className="min-h-[100px]"
          />
          <DialogFooter>
            <DialogClose asChild>
              <Button onClick={handleSave}>
                Create Canvas
              </Button>
            </DialogClose>
          </DialogFooter>
        </div>
      </DialogContent>
    </Dialog>
  )
} import React from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog'
import { Pencil } from 'lucide-react'
import { Textarea } from '@/components/ui/textarea'
import { DialogClose } from '@radix-ui/react-dialog'
import { useCanvas } from '@/contexts/CanvasContext'

export function CompanyEditDialog() {
  const { formData, updateField } = useCanvas();
  const [tempName, setTempName] = React.useState(formData.companyName || '')
  const [tempDescription, setTempDescription] = React.useState(formData.companyDescription || '')
  const [isValid, setIsValid] = React.useState(true)

  const handleSave = () => {
    if (!tempName.trim()) {
      setIsValid(false)
      return
    }
    updateField('companyName', tempName)
    updateField('companyDescription', tempDescription)
  }

  const handleOpenChange = (open: boolean) => {
    if (open) {
      setTempName(formData.companyName || '')
      setTempDescription(formData.companyDescription || '')
      setIsValid(true)
    }
  }

  return (
    <Dialog onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Pencil className="h-4 w-4" />
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Company Details</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col gap-4">
          <div>
            <Input
              placeholder="Company Name"
              value={tempName}
              onChange={(e) => {
                setTempName(e.target.value)
                setIsValid(!!e.target.value.trim())
              }}
              className={!isValid ? 'border-red-500' : ''}
            />
            {!isValid && (
              <p className="text-sm text-red-500 mt-1">Company name cannot be empty</p>
            )}
          </div>
          <Textarea
            placeholder="Company Description"
            value={tempDescription}
            onChange={(e) => setTempDescription(e.target.value)}
            className="min-h-[100px]"
          />
          <DialogFooter>
            <DialogClose asChild>
              <Button onClick={handleSave}>
                Save Changes
              </Button>
            </DialogClose>
          </DialogFooter>
        </div>
      </DialogContent>
    </Dialog>
  )
} import React, { ChangeEvent, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { CompanyEditDialog } from './CompanyEditDialog'
import { BusinessModelCanvas } from '@/types/canvas'
import { useCanvas } from '@/contexts/CanvasContext'
import AISectionAssistButton from '../Canvas/AISectionAssistButton'

interface HeaderProps {
  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void
}

export function Header() {
  const {  status, formData, updateField, resetForm } = useCanvas();

  useEffect(() => {
  console.log('Header canvas updated:', formData);
  }, [formData]);

  function onInputChange(event: ChangeEvent<HTMLInputElement>): void {
    updateField(event.target.id as keyof BusinessModelCanvas, event.target.value)
  }

  return (
    <div className="flex items-center justify-between p-4 border-b">
      <div className="flex items-center gap-4">
        <h1 className="text-3xl font-bold tracking-tight">The Business Model Canvas</h1>
        <div className="flex items-center gap-2">
          <Input 
            value={formData.companyName}
            className="max-w-[200px]"
            readOnly
          />
          <CompanyEditDialog/>
        </div>
      </div>
      
      <div className="flex items-center gap-4">
        <Input
          id="designedFor"
          className="max-w-[150px]"
          type="text"
          placeholder="Designed For"
          value={formData.designedFor}
          onChange={onInputChange}
        />
        <Input
          id="designedBy"
          className="max-w-[150px]"
          type="text"
          placeholder="Designed By"
          value={formData.designedBy}
          onChange={onInputChange}
        />
        <Input
          id="date"
          className="max-w-[150px]"
          type="date"
          placeholder="Date"
          value={formData.date}
          onChange={onInputChange}
        />
        <Input
          id="version"
          className="max-w-[150px]"
          type="text"
          placeholder="Version"
          value={formData.version}
          onChange={onInputChange}
        />
      </div>
    </div>
  )
} 